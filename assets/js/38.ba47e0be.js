(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{425:function(t,e,o){"use strict";o.r(e);var n=o(43),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"_127"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_127"}},[t._v("#")]),t._v(" 127")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("  BIP: 127\n  Layer: Applications\n  Title: Simple Proof-of-Reserves Transactions\n  Author: Steven Roose <steven@stevenroose.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0127\n  Status: Draft\n  Type: Standards Track\n  Created: 2019-01-28\n  License: CC0-1.0\n")])])]),o("h2",{attrs:{id:"abstract"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),o("p",[t._v("This BIP describes a simple way to construct proof-of-reserves\ntransactions. This proposal formalizes a standard format for\nconstructing such proofs, easing their construction with existing wallet\ninfrastructure and enabling general proof-verification software. It\nrelies on existing standards such as regular Bitcoin transaction\nserialization/validation and the BIP 174 PSBT format. The proposal also\nincludes the description of a PSBT extension for a better user\nexperience.")]),t._v(" "),o("h2",{attrs:{id:"copyright"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[t._v("#")]),t._v(" Copyright")]),t._v(" "),o("p",[t._v("This BIP is licensed under the Creative Commons CC0 1.0 Universal\nlicense.")]),t._v(" "),o("h2",{attrs:{id:"motivation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),o("p",[t._v("From the very early days in the history of Bitcoin, there have been\ncompanies managing bitcoins for their users. These users give up control\nover their coins in return for a certain service. Inevitably, there have\nbeen many cases of companies losing their users' bitcoins without\ntimely disclosing such events to the public. Proofs of Reserves are a\nway for companies managing large amounts of bitcoins to prove ownership\nover a given amount of funds. The regular proof of control helps to\nensure that no significant loss has occurred.")]),t._v(" "),o("p",[t._v("While the term proof-of-reserves is not new by any means, the procedure\nis not very common among high-value custodian companies. One of the\nreasons for this is that every company that wants to perform a\nproof-of-reserves has to construct its own way to do so. Accordingly,\ntheir users have to understand the construction of the proof in order to\nbe able to verify it. This raises the bar of entry both for custodians\nand for users.")]),t._v(" "),o("h3",{attrs:{id:"what-this-bip-is-not-doing-what-this-bip-is-not-doing"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#what-this-bip-is-not-doing-what-this-bip-is-not-doing"}},[t._v("#")]),t._v(" What this BIP is not doing {#what_this_bip_is_not_doing}")]),t._v(" "),o("p",[t._v("The proof-of-reserve construction described in this document has some\nknown shortcomings, mostly with regards to its privacy properties. While\nthere exists research about improved proof-of-reserves mechanisms that\nhave much better privacy properties[^1], this BIP intentionally only\nformalizes the de-facto existing method.")]),t._v(" "),o("h2",{attrs:{id:"specification"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),o("p",[t._v("Our specification consists of two parts:")]),t._v(" "),o("ol",[o("li",[t._v("the format for the actual proofs")]),t._v(" "),o("li",[t._v("a file format used to package a set of proofs and relevant metadata")])]),t._v(" "),o("p",[t._v("The final construction should have the following properties:")]),t._v(" "),o("ul",[o("li",[t._v("flexible proof construction to support complex wallet\ninfrastructures")]),t._v(" "),o("li",[t._v("easy integration with existing wallet solutions (both hardware and\nsoftware wallets)")]),t._v(" "),o("li",[t._v("support for verification via a standard procedure, regardless of\npublisher of the proof")]),t._v(" "),o("li",[t._v("proof prevents reuse of proofs by other parties by committing to a\nmessage")]),t._v(" "),o("li",[t._v("allow validating that the issuer had the funds under his control at\na certain block, regardless of what happened after that block")])]),t._v(" "),o("h3",{attrs:{id:"proof-format-proof-format"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proof-format-proof-format"}},[t._v("#")]),t._v(" Proof Format {#proof_format}")]),t._v(" "),o("p",[t._v("To allow for maximal compatibility with existing systems, proofs are\nformatted as regular Bitcoin transactions. However, one small adaptation\nto the transaction is made that has two functions:")]),t._v(" "),o("ol",[o("li",[t._v("make the transaction unspendable to avoid putting funds at risk")]),t._v(" "),o("li",[t._v("link the proof to the issuer of the proof to prevent copying proofs\nfrom other custodians")])]),t._v(" "),o("p",[t._v("The resulting construction is a Bitcoin transaction with the following\ncharacteristics:")]),t._v(" "),o("ul",[o("li",[t._v('The first input (the "commitment input")\n'),o("ul",[o("li",[t._v('MUST have the txid part of the previous outpoint set to the\nSHA-256 hash of the commitment message prefixed with\n"Proof-of-Reserves: "[^2] and index 0.')])])]),t._v(" "),o("li",[t._v("The remaining inputs\n"),o("ul",[o("li",[t._v("MUST have signatures that commit to the commitment input (e.g.\nusing "),o("code",[t._v("SIGHASH_ALL")]),t._v(").")])])]),t._v(" "),o("li",[t._v("The transaction MUST have a single output that is the exact sum of\nall the inputs, assuming the commitment input to have 0 value; this\nmeans the transaction has no miner fee.")])]),t._v(" "),o("p",[t._v("The existence of the first input (which is just a commitment hash)\nensures that this transaction is invalid and can never be confirmed.")]),t._v(" "),o("h3",{attrs:{id:"proof-file-format-proof-file-format"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proof-file-format-proof-file-format"}},[t._v("#")]),t._v(" Proof File Format {#proof_file_format}")]),t._v(" "),o("p",[t._v("In theory, the first part of the specification would be sufficient as a\nminimum viable standard. However, there are a number of motivations to\nextend the standard with an extra layer of metadata:")]),t._v(" "),o("ol",[o("li",[o("p",[t._v("constructing and combining multiple proofs")]),t._v(" "),o("p",[t._v(":   Having thousands of UTXOs spread across different offline and\nonline wallets could make it difficult to construct a single\nproof transaction with all UTXOs. Allowing multiple proof\ntransactions with the same commitment message and block number\ngives extra flexibility to custodians with complex wallet\ninfrastructure without making the combined proof less secure.")])]),t._v(" "),o("li",[o("p",[t._v("metadata for verification")]),t._v(" "),o("p",[t._v(":   Not all systems that will be used for verification have access\nto a full index of all transactions. However, proofs should be\neasily verifiable even after some of the UTXOs used in the proof\nare no longer unspent. Metadata present in the proof allows for\nrelatively efficient verification of proofs even if no\ntransaction index is available.")])]),t._v(" "),o("li",[o("p",[t._v("potential future improvements")]),t._v(" "),o("p",[t._v(":   The extensible metadata format allows for amending the standard\nin the future. One potential improvement would be having UTXO\nset commitments. These would allow the proofs-of-reserves to\ncome with accompanying proofs-of-inclusion of all used UTXOs in\nthe UTXO set at the block of proof construction (making\nvalidation even more efficient).")])])]),t._v(" "),o("p",[t._v("The proposed proof-file format provides a standard way of combining\nmultiple proofs and associated metadata. The specification of the format\nis in the Protocol Buffers"),o("a",{attrs:{href:"https://github.com/protocolbuffers/protobuf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("^3"),o("OutboundLink")],1),t._v(" format.")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v('syntax = "proto3";\nimport "google/protobuf/any.proto";\n\nmessage OutputMeta {\n    // Identify the outpoint.\n    bytes txid = 1;\n    uint32 vout = 2;\n\n    // The block hash of the block where this output was created.\n    bytes block_hash = 3;\n}\n\nmessage FinalProof {\n    // The proof transaction.  Should be able to be parsed like a regular\n    // Bitcoin transaction.\n    bytes proof_tx = 1;\n\n    // The metadata of the ouputs used in the proof transaction.\n    repeated OutputMeta output_metadata = 2;\n}\n\nmessage ProofOfReserves {\n    // A version number for this format to enable extending it with\n    // additional fields.\n    uint32 version = 1;\n\n    // The network magic for the network in which the proofs are valid.\n    // 0xD9B4BEF9 for mainnet, 0x0709110B for testnet\n    //TODO consider BIP44 coin type ids instead:\n    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n    uint32 network_magic = 2;\n\n    // The commitment message for this proof-of-reserves.\n    // This message is global for all the proofs.\n    string message = 3;\n\n    // The block at which this proof is supposed to be validated.\n    // Verification should take into account unspentness of outputs at this\n    // block height.\n    bytes block_hash = 4;\n\n    // The set of final proof transactions with their output metadata.\n    repeated FinalProof final_proofs = 5;\n\n    // Reserved field that can potentially be used by proof-construction tools.\n    // It can be ignored for verification.\n    repeated google.protobuf.Any pending_proofs = 6;\n}\n')])])]),o("p",[t._v("The last field, "),o("code",[t._v("pending_proofs")]),t._v(", leaves open some space in the same\nfile that can be used by proof-construction tools. This allows them to\nconstruct different proofs incrementally without having to switch\nbetween file formats.")]),t._v(" "),o("h3",{attrs:{id:"psbt-bip-174-extension-psbt-bip-174-extension"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#psbt-bip-174-extension-psbt-bip-174-extension"}},[t._v("#")]),t._v(" PSBT (BIP 174) extension {#psbt_bip_174_extension}")]),t._v(" "),o("p",[t._v('The "commitment input" detailed in the proof format section does not\nspend an existing UTXO and thus shouldn\'t be signed (empty '),o("code",[t._v("scriptSig")]),t._v("\nand witness). This can cause some problems when signing this type of\ntransactions. For example, hardware wallets often require the signer to\nprovide information about all inputs of transactions they are signing,\nsuch as the previous output or previous transaction; this data obviously\ndoesn't exist for the commitment inputs.")]),t._v(" "),o("p",[t._v("For most existing devices, it's possible to circumvent these\nrequirements by providing dummy data or by instructing the device to\nignore this specific input. However, there is still a UX problem.\nBecause the hardware wallet device doesn't recognize the transaction as\na proof-of-reserves transaction it will think it is signing a regular\ntransaction that is spending all the money in the UTXOs. Most devices\nwill ask for confirmation with a message along the lines of \"Are you\nsure you want to send XXX BTC to address [...]?\". This is not the\nbest user experience.")]),t._v(" "),o("p",[t._v("An addition to the BIP 174 PSBT format could help signing devices to\nrecognize proof-of-reserve transactions. The following field is added to\nthe BIP 174 "),o("code",[t._v("INPUT")]),t._v(" map:")]),t._v(" "),o("ul",[o("li",[t._v("Type: Proof-of-reserves commitment "),o("code",[t._v("PSBT_IN_POR_COMMITMENT = 0x09")]),t._v(" "),o("ul",[o("li",[t._v("Key: None. The key must only contain the 1 byte type.\n"),o("ul",[o("li",[o("code",[t._v("{0x09}")])])])]),t._v(" "),o("li",[t._v("Value: The UTF-8 encoded commitment message string for the\nproof-of-reserves.\n"),o("ul",[o("li",[o("code",[t._v("{porCommitment}")])])])])])])]),t._v(" "),o("p",[t._v("Wallets processing an input that has this field set")]),t._v(" "),o("ul",[o("li",[t._v("MUST make sure the txid of the previous outpoint is set to the\nSHA-256 hash of the prefixed commitment message string, as detailed\nabove;")]),t._v(" "),o("li",[t._v("MUST assume the input value to be 0 (without requiring the previous\noutput or transaction to be provided);")]),t._v(" "),o("li",[t._v("SHOULD display the commitment message to ask the user for\nconfirmation before signing any inputs;")]),t._v(" "),o("li",[t._v("SHOULD only provide signatures with a signature hash that commits to\nthis input;")]),t._v(" "),o("li",[t._v("SHOULD accept an empty "),o("code",[t._v("scriptSig")]),t._v(" for this input (as if the\n"),o("code",[t._v("scriptPubKey")]),t._v(" was "),o("code",[t._v("OP_TRUE")]),t._v(").")])]),t._v(" "),o("h2",{attrs:{id:"compatibility"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[t._v("#")]),t._v(" Compatibility")]),t._v(" "),o("p",[t._v("The proof transaction specification is based on the Bitcoin transaction\nserialization protocol and will thus always be compatible with\nserializers that can interpret Bitcoin transactions. The protobuf file\nformat is custom to this BIP and has a version byte to enable updates\nwhile attempting to remain backwards compatible.")]),t._v(" "),o("h2",{attrs:{id:"implementations"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#implementations"}},[t._v("#")]),t._v(" Implementations")]),t._v(" "),o("p",[t._v("A proof-of-concept implementation of the PSBT extension in the\n"),o("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-bitcoin",target:"_blank",rel:"noopener noreferrer"}},[t._v("rust-bitcoin"),o("OutboundLink")],1),t._v(" project can\nbe found in the "),o("code",[t._v("psbt-por")]),t._v(" branch here:\n"),o("a",{attrs:{href:"https://github.com/stevenroose/rust-bitcoin/tree/psbt-por",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/stevenroose/rust-bitcoin/tree/psbt-por"),o("OutboundLink")],1)]),t._v(" "),o("p",[t._v("A work-in-progress implementation of a tool that produces and verifies\nproofs in the described format can be found here:\n"),o("a",{attrs:{href:"https://github.com/stevenroose/reserves",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/stevenroose/reserves"),o("OutboundLink")],1)]),t._v(" "),o("h2",{attrs:{id:"footnotes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#footnotes"}},[t._v("#")]),t._v(" Footnotes")]),t._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("<references />\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("p",[t._v('[^1]: Dagher, Gaby G., Benedikt Bünz, Joseph Bonneau, Jeremy Clark, and\nDan Boneh. "Provisions: Privacy-preserving proofs of solvency for\nBitcoin exchanges." (2015).')]),t._v(" "),o("p",[t._v('[^2]: If the message is "Some Message", the txid part should be\n'),o("code",[t._v('SHA-256("Proof-of-Reserves: Some Message")')]),t._v(" with the string encoded\nas UTF-8.")])])}),[],!1,null,null,null);e.default=i.exports}}]);