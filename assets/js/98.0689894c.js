(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{473:function(e,t,a){"use strict";a.r(t);var s=a(43),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_61"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_61"}},[e._v("#")]),e._v(" 61")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("  BIP: 61\n  Layer: Peer Services\n  Title: Reject P2P message\n  Author: Gavin Andresen <gavinandresen@gmail.com>\n  Comments-Summary: Controversial; some recommendation, and some discouragement\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0061\n  Status: Final\n  Type: Standards Track\n  Created: 2014-06-18\n")])])]),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("This BIP describes a new message type for the Bitcoin peer-to-peer\nnetwork.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("Giving peers feedback about why their blocks or transactions are\nrejected, or why they are being banned for not following the protocol\nhelps interoperability between different implementations.")]),e._v(" "),a("p",[e._v("It also gives SPV (simplified payment verification) clients a hint that\nsomething may be wrong when their transactions are rejected due to\ninsufficient priority or fees.")]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("Data types in this specification are as described at\n"),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Protocol_specification",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://en.bitcoin.it/wiki/Protocol_specification"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"reject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reject"}},[e._v("#")]),e._v(" reject")]),e._v(" "),a("p",[e._v('One new message type "reject" is introduced. It is sent directly to a\npeer in response to a "version", "tx" or "block" message.')]),e._v(" "),a("p",[e._v("For example, the message flow between two peers for a relayed\ntransaction that is rejected for some reason would be:")]),e._v(" "),a("p",[a("code",[e._v("--\x3e inv")]),a("br"),e._v(" "),a("code",[e._v("<-- getdata")]),a("br"),e._v(" "),a("code",[e._v("--\x3e tx")]),a("br"),e._v(" "),a("code",[e._v("<-- reject")])]),e._v(" "),a("p",[e._v("All implementations of the P2P protocol version 70,002 and later should\nsupport the reject message.")]),e._v(" "),a("h4",{attrs:{id:"common-payload-common-payload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-payload-common-payload"}},[e._v("#")]),e._v(" common payload {#common_payload}")]),e._v(" "),a("p",[e._v("Every reject message begins with the following fields. Some messages\nappend extra, message-specific data.")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Field Size   Name              Data type    Comments\nvariable     response-to-msg   var_str      Message that triggered the reject\n1            reject-code       uint8_t      0x01 through 0x4f (see below)\nvariable     reason            var_string   Human-readable message for debugging")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("The human-readable string is intended only for debugging purposes; in\nparticular, different implementations may use different strings. The\nstring should not be shown to users or used for anthing besides\ndiagnosing interoperability problems.")]),e._v(" "),a("p",[e._v('The following reject code categories are used; in the descriptions\nbelow, "server" is the peer generating the reject message, "client"\nis the peer that will receive the message.')]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Range       Category\n0x01-0x0f   Protocol syntax errors\n0x10-0x1f   Protocol semantic errors\n0x40-0x4f   Server policy rule")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"rejection-codes-common-to-all-message-types-rejection-codes-common-to-all-message-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rejection-codes-common-to-all-message-types-rejection-codes-common-to-all-message-types"}},[e._v("#")]),e._v(" rejection codes common to all message types {#rejection_codes_common_to_all_message_types}")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Code   Description\n0x01   Message could not be decoded")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"reject-version-codes-reject-version-codes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reject-version-codes-reject-version-codes"}},[e._v("#")]),e._v(" reject version codes {#reject_version_codes}")]),e._v(" "),a("p",[e._v('Codes generated during the initial connection process in response to a\n"version" message:')]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Code   Description\n0x11   Client is an obsolete, unsupported version\n0x12   Duplicate version message received")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"reject-tx-payload-codes-reject-tx-payload-codes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reject-tx-payload-codes-reject-tx-payload-codes"}},[e._v("#")]),e._v(" reject tx payload, codes {#reject_tx_payload_codes}")]),e._v(" "),a("p",[e._v("Transaction rejection messages extend the basic message with the\ntransaction id hash:")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Field Size   Name   Data type    Comments\n32           hash   char[32]   transaction that is rejected")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("The following codes are used:")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Code   Description\n0x10   Transaction is invalid for some reason (invalid signature, output value greater than input, etc.)\n0x12   An input is already spent\n0x40   Not mined/relayed because it is \"non-standard\" (type or version unknown by the server)\n0x41   One or more output amounts are below the 'dust' threshold\n0x42   Transaction does not have enough fee/priority to be relayed or mined")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"payload-reject-block-payload-reject-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payload-reject-block-payload-reject-block"}},[e._v("#")]),e._v(" payload, reject block {#payload_reject_block}")]),e._v(" "),a("p",[e._v("Block rejection messages extend the basic message with the block header\nhash:")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Field Size   Name   Data type    Comments\n32           hash   char[32]   block (hash of block header) that is rejected")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Rejection codes:")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("code   description\n0x10   Block is invalid for some reason (invalid proof-of-work, invalid signature, etc)\n0x11   Block's version is no longer supported\n0x43   Inconsistent with a compiled-in checkpoint")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Note: blocks that are not part of the server's idea of the current best\nchain, but are otherwise valid, should not trigger reject messages.")]),e._v(" "),a("h2",{attrs:{id:"compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" Compatibility")]),e._v(" "),a("p",[e._v("The reject message is backwards-compatible; older peers that do not\nrecognize the reject message will ignore it.")]),e._v(" "),a("h2",{attrs:{id:"implementation-notes-implementation-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation-notes-implementation-notes"}},[e._v("#")]),e._v(" Implementation notes {#implementation_notes}")]),e._v(" "),a("p",[e._v("Implementors must consider what happens if an attacker either sends them\nreject messages for valid transactions/blocks or sends them random\nreject messages, and should beware of possible denial-of-service\nattacks. For example, notifying the user of every reject message\nreceived would make it trivial for an attacker to mount an\nannoy-the-user attack. Even merely writing every reject message to a\ndebugging log could make an implementation vulnerable to a\nfill-up-the-users-disk attack.")])])}),[],!1,null,null,null);t.default=o.exports}}]);