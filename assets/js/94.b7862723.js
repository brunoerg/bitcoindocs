(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{471:function(e,t,i){"use strict";i.r(t);var n=i(43),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"_47"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_47"}},[e._v("#")]),e._v(" 47")]),e._v(" "),i("p",[e._v("RECENT CHANGES:")]),e._v(" "),i("ul",[i("li",[e._v("(19 Apr 2016) Define version 2 payment codes")]),e._v(" "),i("li",[e._v("(17 Apr 2016) Clarify usage of outpoints in notification\ntransactions")]),e._v(" "),i("li",[e._v("(18 Dec 2015) Update explanations to resolve FAQs")])]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("      BIP: 47\n      Layer: Applications\n      Title: Reusable Payment Codes for Hierarchical Deterministic Wallets\n      Author: Justus Ranvier <justus@openbitcoinprivacyproject.org>\n      Comments-Summary: Unanimously Discourage for implementation\n      Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0047\n      Status: Draft\n      Type: Informational\n      Created: 2015-04-24\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br"),i("span",{staticClass:"line-number"},[e._v("2")]),i("br"),i("span",{staticClass:"line-number"},[e._v("3")]),i("br"),i("span",{staticClass:"line-number"},[e._v("4")]),i("br"),i("span",{staticClass:"line-number"},[e._v("5")]),i("br"),i("span",{staticClass:"line-number"},[e._v("6")]),i("br"),i("span",{staticClass:"line-number"},[e._v("7")]),i("br"),i("span",{staticClass:"line-number"},[e._v("8")]),i("br"),i("span",{staticClass:"line-number"},[e._v("9")]),i("br")])]),i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),i("p",[e._v("This BIP defines a technique for creating a payment code which can be\npublicly advertised and associated with a real-life identity without\ncreating the loss of security or privacy inherent to P2PKH address\nreuse.")]),e._v(" "),i("p",[e._v("This BIP is a particular application of BIP43 and is intended to\nsupplement HD wallets which implement BIP44.")]),e._v(" "),i("p",[e._v('The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL\nNOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and\n"OPTIONAL" in this document are to be interpreted as described in RFC\n2119.')]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("p",[e._v("Payment codes add identity information to transactions which is useful\nin a merchant-customer interaction while protecting the privacy of\nusers. Payment codes provide the privacy benefits of Darkwallet-style\nStealth Addresses to SPV clients without requiring the assistance of a\ntrusted full node and while greatly reducing reliance on blockchain\nstorage.")]),e._v(" "),i("h2",{attrs:{id:"path-levels-path-levels"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#path-levels-path-levels"}},[e._v("#")]),e._v(" Path levels {#path_levels}")]),e._v(" "),i("p",[e._v("We define the following 3 levels in BIP32 path:")]),e._v(" "),i("p",[i("code",[e._v("m / purpose' / coin_type' / identity'")])]),e._v(" "),i("p",[e._v("The child keys derived from an identity are used in different ways:")]),e._v(" "),i("p",[i("code",[e._v("m / purpose' / coin_type' / identity' / 0")])]),e._v(" "),i("p",[e._v("The 0th (non-hardened) child is the notification key.")]),e._v(" "),i("p",[i("code",[e._v("m / purpose' / coin_type' / identity' / 0 through 2147483647")])]),e._v(" "),i("p",[e._v("These (non-hardened) keypairs are used for ECDH to generate deposit\naddresses.")]),e._v(" "),i("p",[i("code",[e._v("m / purpose' / coin_type' / identity' / 0' through 2147483647'")])]),e._v(" "),i("p",[e._v("These (hardened) keypairs are ephemeral payment codes.")]),e._v(" "),i("p",[e._v("Apostrophe in the path indicates that BIP32 hardened derivation is used.")]),e._v(" "),i("p",[e._v("Each level has a special meaning, described in the chapters below.")]),e._v(" "),i("h3",{attrs:{id:"purpose"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#purpose"}},[e._v("#")]),e._v(" Purpose")]),e._v(" "),i("p",[e._v("Purpose is a constant set to 47' (or 0x8000002F) following the BIP43\nrecommendation. It indicates that the subtree of this node is used\naccording to this specification.")]),e._v(" "),i("h3",{attrs:{id:"coin-type-coin-type"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#coin-type-coin-type"}},[e._v("#")]),e._v(" Coin type {#coin_type}")]),e._v(" "),i("p",[e._v("The coin type field is identical to the same field in BIP44")]),e._v(" "),i("p",[e._v("Hardened derivation is used at this level.")]),e._v(" "),i("h3",{attrs:{id:"identity"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#identity"}},[e._v("#")]),e._v(" Identity")]),e._v(" "),i("p",[e._v("The identity derivation level produces an extended public key and its\nassociated extended private key.")]),e._v(" "),i("p",[e._v('When the extended public key at this level is combined with the metadata\nspecified in the Representation section below, the resulting entity is\ncalled a "payment code."')]),e._v(" "),i("p",[e._v("This derivation level is equivalent to the Account level in BIP-44.\nWallets SHOULD treat payment codes as intrinsically part of the BIP-44\naccount at the same index and create payment codes and accounts as\npairs.")]),e._v(" "),i("p",[e._v("For example, the payment code created represented by (m / 47' / 0' /\n0') is part of the account represented by (m / 44' / 0' / 0').")]),e._v(" "),i("p",[e._v("The second account in a wallet consists of the new account/payment code\npair created by using an index of 1 in as the account/identity level of\nboth paths.")]),e._v(" "),i("p",[e._v("Incoming payments received via this specification are equivalent to\npayments received to BIP-44 addresses, and unspent outputs from both\ntypes of addresses can be used as inputs in the same outgoing\ntransaction.")]),e._v(" "),i("p",[e._v("Hardened derivation is used at this level.")]),e._v(" "),i("p",[e._v("Except where noted, all keys derived from a payment code use the public\nderivation method.")]),e._v(" "),i("h2",{attrs:{id:"versions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#versions"}},[e._v("#")]),e._v(" Versions")]),e._v(" "),i("p",[e._v("Payment codes contain a version byte which identifies a specific set of\nbehavior.")]),e._v(" "),i("p",[e._v("Unless otherwise specified, payment codes of different versions are\ninteroperable. If Alice uses a version x payment code, and Bob uses a\nversion y payment code, they can still send and receive transactions\nbetween each other.")]),e._v(" "),i("p",[e._v("Currently specified versions:")]),e._v(" "),i("ul",[i("li",[e._v("Version 1\n"),i("ul",[i("li",[e._v("Address type: P2PKH")]),e._v(" "),i("li",[e._v("Notification type: address")])])]),e._v(" "),i("li",[e._v("Version 2\n"),i("ul",[i("li",[e._v("Address type: P2PKH")]),e._v(" "),i("li",[e._v("Notification type: bloom-multisig")])])])]),e._v(" "),i("h3",{attrs:{id:"recommended-versions-recommended-versions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#recommended-versions-recommended-versions"}},[e._v("#")]),e._v(" Recommended Versions {#recommended_versions}")]),e._v(" "),i("ul",[i("li",[e._v("Wallets which have bloom filtering capabilities SHOULD create\nversion 2 payment codes instead of version 1 payment codes.")]),e._v(" "),i("li",[e._v("Version 1 payment codes are only recommended for wallets which lack\naccess to bloom filtering capability.")])]),e._v(" "),i("h2",{attrs:{id:"version-1-version-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#version-1-version-1"}},[e._v("#")]),e._v(" Version 1 {#version_1}")]),e._v(" "),i("h3",{attrs:{id:"representation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#representation"}},[e._v("#")]),e._v(" Representation")]),e._v(" "),i("h4",{attrs:{id:"binary-serialization-binary-serialization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#binary-serialization-binary-serialization"}},[e._v("#")]),e._v(" Binary Serialization {#binary_serialization}")]),e._v(" "),i("p",[e._v("A payment code contains the following elements:")]),e._v(" "),i("ul",[i("li",[e._v("Byte 0: version. required value: 0x01")]),e._v(" "),i("li",[e._v("Byte 1: features bit field. All bits must be zero except where\nspecified elsewhere in this specification\n"),i("ul",[i("li",[e._v("Bit 0: Bitmessage notification")]),e._v(" "),i("li",[e._v("Bits 1-7: reserved")])])]),e._v(" "),i("li",[e._v("Byte 2: sign. required value: 0x02 or 0x03")]),e._v(" "),i("li",[e._v("Bytes 3 - 34: x value, must be a member of the secp256k1 group")]),e._v(" "),i("li",[e._v("Bytes 35 - 66: chain code")]),e._v(" "),i("li",[e._v("Bytes 67 - 79: reserved for future expansion, zero-filled unless\notherwise noted")])]),e._v(" "),i("h4",{attrs:{id:"base58-serialization-base58-serialization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#base58-serialization-base58-serialization"}},[e._v("#")]),e._v(" Base58 Serialization {#base58_serialization}")]),e._v(" "),i("p",[e._v("When a payment code is presented to the user, it SHOULD be presented\nencoded in Base58Check form.")]),e._v(" "),i("ul",[i("li",[e._v('The version byte is: 0x47 (produces a "P" as the first character\nof the serialized form)')]),e._v(" "),i("li",[e._v("The payload is the binary serialization of the payment code")])]),e._v(" "),i("h3",{attrs:{id:"protocol"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#protocol"}},[e._v("#")]),e._v(" Protocol")]),e._v(" "),i("p",[e._v("In the following examples, Alice and Bob are identities with a\ncorresponding payment codes. Alice initiates a Bitcoin transaction, and\nBob is the recipient of the transaction.")]),e._v(" "),i("p",[e._v("It is assumed that Alice can easily obtain Bob's payment code via a\nsuitable method outside the scope of the payment code protocol.")]),e._v(" "),i("h4",{attrs:{id:"definitions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),i("ul",[i("li",[e._v("Payment code: an extended public key and associated metadata which\nis associated with a particular identity/account")]),e._v(" "),i("li",[e._v("Notification address: the P2PKH address associated with the 0^th^\npublic key derived from a payment code")]),e._v(" "),i("li",[e._v("Notification transaction: a transaction which sends an output to a\nnotification address which includes an embedded payment code")]),e._v(" "),i("li",[e._v("Designated input: the first input in the notification transaction\nwhich exposes an secp256k1 pubkey in either its signature script, or\nin the redeem script or pubkey script of the output being spent")]),e._v(" "),i("li",[e._v("Designated pubkey: the first secp256k1 pubkey pushed to the stack\nduring script execution for the designated input")]),e._v(" "),i("li",[e._v("Outpoint: the specific output of a previous transaction which is\nbeing spent. See the Reference section for the binary serialization")])]),e._v(" "),i("h4",{attrs:{id:"notification-transaction-notification-transaction"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#notification-transaction-notification-transaction"}},[e._v("#")]),e._v(" Notification Transaction {#notification_transaction}")]),e._v(" "),i("p",[e._v("Prior to the first time Alice initiates a transaction to Bob, Alice MUST\ninform Bob of her payment code via the following procedure:")]),e._v(" "),i("p",[e._v("Note: this procedure is used if Bob uses a version 1 payment code\n(regardless of the the version of Alice's payment code). If Bob's\npayment code is not version 1, see the appropriate section in this\nspecification.")]),e._v(" "),i("ol",[i("li",[e._v("Alice constructs a transaction which sends a small quantity of\nbitcoins to Bob's notification address (notification transaction)\n"),i("ol",[i("li",[e._v("The inputs selected for this transaction MUST NOT be easily\nassociated with Alice's notification address")])])]),e._v(" "),i("li",[e._v("Alice derives a unique shared secret using ECDH:\n"),i("ol",[i("li",[i("p",[e._v("Alice selects the private key corresponding to the designated\npubkey:\na")])]),e._v(" "),i("li",[i("p",[e._v("Alice selects the public key associated with Bob's notification\naddress:\nB, where B = bG")])]),e._v(" "),i("li",[i("p",[e._v("Alice calculates a secret point:\nS = aB")])]),e._v(" "),i("li",[i("p",[e._v("Alice calculates a 64 byte blinding factor:\ns = HMAC-SHA512(x, o)")]),e._v(" "),i("ol",[i("li",[e._v('"x" is the x value of the secret point')]),e._v(" "),i("li",[e._v('"o" is the outpoint being spent by the designated input')])])])])]),e._v(" "),i("li",[e._v("Alice serializes her payment code in binary form.")]),e._v(" "),i("li",[e._v("Alice renders her payment code (P) unreadable to anyone except Bob:\n"),i("ol",[i("li",[e._v("Replace the x value with x':\nx' = x XOR (first 32 bytes of s)")]),e._v(" "),i("li",[e._v("Replace the chain code with c':\nc' = c XOR (last 32 bytes of s)")])])]),e._v(" "),i("li",[e._v("Alice adds an OP_RETURN output to her transaction which consists\nof P.")])]),e._v(" "),i("img",{attrs:{src:"bip-0047/reusable_payment_codes-01.png"}}),e._v(" "),i("ol",[i("li",[e._v("Bob watches for any transactions which create an output at his\nnotification address.")]),e._v(" "),i("li",[e._v("When a transaction is received, the client examines it to determine\nif it contains a standard OP_RETURN output with an 80 byte payload\n(notification transactions).")]),e._v(" "),i("li",[e._v("If the first byte of the payload in a notification transaction is\n0x01:\n"),i("ol",[i("li",[i("p",[e._v("Bob selects the designated pubkey:\nA, where A = aG")])]),e._v(" "),i("li",[i("p",[e._v("Bob selects the private key associated with his notification\naddress:\nb")])]),e._v(" "),i("li",[i("p",[e._v("Bob calculates a secret point:\nS = bA")])]),e._v(" "),i("li",[i("p",[e._v("Bob calculates the blinding factor:\ns = HMAC-SHA512(x, o)")]),e._v(" "),i("ol",[i("li",[e._v('"x" is the x value of the secret point')]),e._v(" "),i("li",[e._v('"o" is the outpoint being spent by the designated input.')])])]),e._v(" "),i("li",[i("p",[e._v("Bob interprets the 80 byte payload as a payment code, except:")]),e._v(" "),i("ol",[i("li",[e._v("Replace the x value with x':\nx' = x XOR (first 32 bytes of s)")]),e._v(" "),i("li",[e._v("Replace the chain code with c':\nc' = c XOR (last 32 bytes of s)")])])]),e._v(" "),i("li",[i("p",[e._v("If the updated x value is a member of the secp256k1 group, the\npayment code is valid.")])]),e._v(" "),i("li",[i("p",[e._v("If the updated x value is not a member of the secp256k1 group,\nthe payment code is ignored.")])])])])]),e._v(" "),i("p",[e._v("Now that Bob's client has received Alice's payment code, it is\npossible for Alice to send payments (up to 2^32^ payments) to Bob.")]),e._v(" "),i("p",[e._v("Alice will never again need to send a notification transaction to Bob.")]),e._v(" "),i("p",[e._v("Bitcoins received via notification transactions require special handling\nin order to avoid privacy leaks:")]),e._v(" "),i("ol",[i("li",[e._v("The value of outputs received to notification addresses MUST NOT be\ndisplayed to the user as part of their spendable balance.")]),e._v(" "),i("li",[e._v("Outputs received to notification addresses MUST NOT be used as\ninputs for any transaction that involve ECDH calculations using any\nof the user's payment codes.")]),e._v(" "),i("li",[e._v("Outputs received to notification addresses MAY be passed through a\nmixing service before being added to the user's spendable balance.")]),e._v(" "),i("li",[e._v("Outputs received to notification addresses MAY be donated to miners\nusing dust-b-gone or an equivalent procedure.")])]),e._v(" "),i("h5",{attrs:{id:"standard-notification-transaction-scripts-standard-notification-transaction-scripts"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#standard-notification-transaction-scripts-standard-notification-transaction-scripts"}},[e._v("#")]),e._v(" Standard Notification Transaction Scripts {#standard_notification_transaction_scripts}")]),e._v(" "),i("p",[e._v("Alice SHOULD use an input script in one of the following standard forms\nto expose a public key, and compliant applications SHOULD recognize all\nof these forms.")]),e._v(" "),i("ul",[i("li",[e._v("P2PK (pay to pubkey)")]),e._v(" "),i("li",[e._v("P2PKH (pay to pubkey hash)")]),e._v(" "),i("li",[e._v("Multisig (bare multisig, without P2SH)")]),e._v(" "),i("li",[e._v("a script which spends any of the above script forms via P2SH (pay to\nscript hash)")])]),e._v(" "),i("p",[e._v("Compatible wallets MAY provide a method for a user to manually specify\nthe public key associated with a notification transaction in order to\nrecover payment codes sent via non-standard notification transactions.")]),e._v(" "),i("h5",{attrs:{id:"post-notification-privacy-considerations-post-notification-privacy-considerations"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#post-notification-privacy-considerations-post-notification-privacy-considerations"}},[e._v("#")]),e._v(" Post-Notification Privacy Considerations {#post_notification_privacy_considerations}")]),e._v(" "),i("p",[e._v("Incautious handling of change outputs from notification transactions may\ncause unintended loss of privacy.")]),e._v(" "),i("p",[e._v("The recipient of a transaction which spends a change output from a prior\nnotification transaction will learn about the potential connection\nbetween the sender and the recipient of the notification transaction.")]),e._v(" "),i("p",[e._v("The following actions are recommended to reduce this risk:")]),e._v(" "),i("ul",[i("li",[e._v("Wallets which support mixing SHOULD mix change outputs from\nnotification transactions prior to spending them")]),e._v(" "),i("li",[e._v("Wallets which do not support mixing MAY simulate mixing by creating\na transaction which spends the change output to the next external\nBIP44 address")])]),e._v(" "),i("h4",{attrs:{id:"sending"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#sending"}},[e._v("#")]),e._v(" Sending")]),e._v(" "),i("ol",[i("li",[e._v("Each time Alice wants to initiate a transaction to Bob, Alice\nderives a unique P2PKH address for the transaction using ECDH as\nfollows:\n"),i("ol",[i("li",[i("p",[e._v("Alice selects the 0th private key derived from her payment code:\na")])]),e._v(" "),i("li",[i("p",[e._v("Alice selects the next unused public key derived from Bob's\npayment code, starting from zero:\nB, where B = bG")]),e._v(" "),i("ol",[i("li",[e._v('The "next unused" public key is based on an index specific\nto the Alice-Bob context, not global to either Alice or Bob')])])]),e._v(" "),i("li",[i("p",[e._v("Alice calculates a secret point:\nS = aB")])]),e._v(" "),i("li",[i("p",[e._v("Alice calculates a scalar shared secret using the x value of S:\ns = SHA256(Sx)")]),e._v(" "),i("ol",[i("li",[e._v("If the value of s is not in the secp256k1 group, Alice MUST\nincrement the index used to derive Bob's public key and try\nagain.")])])]),e._v(" "),i("li",[i("p",[e._v("Alice uses the scalar shared secret to calculate the ephemeral\npublic key used to generate the P2PKH address for this\ntransaction:\nB' = B + sG")])])])])]),e._v(" "),i("img",{attrs:{src:"bip-0047/reusable_payment_codes-04.png"}}),e._v(" "),i("img",{attrs:{src:"bip-0047/reusable_payment_codes-05.png"}}),e._v(" "),i("ol",[i("li",[e._v("Bob is watching for incoming payments on B' ever since he received\nthe notification transaction from Alice.\n"),i("ol",[i("li",[e._v("Bob calculates n shared secrets with Alice, using the 0^th^\npublic key derived Alice's payment code, and private keys 0 - n\nderived from Bob's payment code, where n is his desired\nlookahead window.")]),e._v(" "),i("li",[e._v("Bob calculates the ephemeral deposit addresses using the same\nprocedure as Alice:\nB' = B + sG")]),e._v(" "),i("li",[e._v("Bob calculate the private key for each ephemeral address as:\nb' = b + s")])])])]),e._v(" "),i("img",{attrs:{src:"bip-0047/reusable_payment_codes-02.png"}}),e._v(" "),i("img",{attrs:{src:"bip-0047/reusable_payment_codes-03.png"}}),e._v(" "),i("h4",{attrs:{id:"refunds"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#refunds"}},[e._v("#")]),e._v(" Refunds")]),e._v(" "),i("p",[e._v("Because Bob learns Alice's payment code as part of the process of\nreceiving a payment, Bob has all the information he needs in order to\nsend a refund to Alice.")]),e._v(" "),i("p",[e._v("A refund transaction is identical to a payment transactions, with only\nthe roles of the participants switches.")]),e._v(" "),i("p",[e._v("Bob MUST send a notification transaction to Alice prior to the first\ntime he sends funds to Alice, even if he has received transactions from\nher in the past.")]),e._v(" "),i("img",{attrs:{src:"bip-0047/reusable_payment_codes-06.png"}}),e._v(" "),i("h4",{attrs:{id:"anonymous-payments-anonymous-payments"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#anonymous-payments-anonymous-payments"}},[e._v("#")]),e._v(" Anonymous Payments {#anonymous_payments}")]),e._v(" "),i("p",[e._v("If Alice does not want her payment to Bob to be associated with her\nidentity, she generates an ephemeral payment code to use for the\ntransaction.")]),e._v(" "),i("ul",[i("li",[e._v("Ephemeral payment codes are the hardened children of a payment code,\nstarting from an index of zero.")]),e._v(" "),i("li",[e._v("An ephemeral payment code SHOULD only be used for a single outgoing\npayment.")]),e._v(" "),i("li",[e._v("The notification address of an ephemeral payment code MUST be\nmonitored for notification transactions in order to detect incoming\nrefund payments")]),e._v(" "),i("li",[e._v("The correspondence between BIP44 accounts and ephemeral payment\ncodes is 1:many")])]),e._v(" "),i("h4",{attrs:{id:"cold-storage-cold-storage"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cold-storage-cold-storage"}},[e._v("#")]),e._v(" Cold Storage {#cold_storage}")]),e._v(" "),i("ul",[i("li",[e._v("Unlike traditional watching-only wallets, those associated with\npayment codes held in cold storage can not detect incoming payments\nimmediately.")]),e._v(" "),i("li",[e._v("When the watching-only wallet detects an incoming notification\ntransaction, it packages the transaction in an\nimplementation-specific format suitable for transfer to the offline\ndevice.")]),e._v(" "),i("li",[e._v("The offline device recovers the payment code, then pre-generates a\nlarge number of relevant keypairs (example: 10000) in order to\nminimize the need for air gap round trips.")]),e._v(" "),i("li",[e._v("The offline device then packages the relevant public keys in an\nimplementation-specific format suitable for transfer to the online\ndevice.")]),e._v(" "),i("li",[e._v("The online device can then watch for incoming payments using a\nsuitable lookahead window.")]),e._v(" "),i("li",[e._v("If the lookahead window reaches the end of the pre-generated public\nkeys, the user must generate more keys on the offline device and\ntransfer them to the online device.")])]),e._v(" "),i("h4",{attrs:{id:"wallet-recovery-wallet-recovery"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#wallet-recovery-wallet-recovery"}},[e._v("#")]),e._v(" Wallet Recovery {#wallet_recovery}")]),e._v(" "),i("p",[e._v("Normal operation of a payment code-enabled wallet can be performed by an\nSPV client and does not require access to a complete copy of the\nblockchain.")]),e._v(" "),i("p",[e._v("Recovering a wallet from a seed, however, does require access to a\nfully-indexed blockchain.")]),e._v(" "),i("p",[e._v("The required data may be obtained from copy of the blockchain under the\ncontrol of the user, or via a publicly-queriable blockchain explorer.")]),e._v(" "),i("p",[e._v("When querying a public blockchain explorer, wallets SHOULD connect to\nthe explorer through Tor (or equivalent) and SHOULD avoid grouping\nqueries in a manner that associates ephemeral addresses with each other.")]),e._v(" "),i("p",[e._v("Previously-spendable funds will generally not be lost or become\ninaccessible after a recovery from a seed, but all information regarding\nprevious outgoing payments will be lost.")]),e._v(" "),i("p",[e._v("In order to recover received funds from a seed, the wallet must obtain\nevery notification it has ever received to its notification address,\nincluding all spent transactions. It then re-establishes its lookahead\nwindow for each subchain by scanning every derived address sequentially\nuntil it locates a contiguous block of unused addresses of a\nuser-specified length.")]),e._v(" "),i("p",[e._v("The metadata which a wallet must store to properly process outgoing\ntransactions consists of:")]),e._v(" "),i("ol",[i("li",[e._v("A list of every payment code to which the identity has sent a\nnotification transaction.\n"),i("ol",[i("li",[e._v("This list is lost if a wallet must be recovered from a seed.")]),e._v(" "),i("li",[e._v("The recovered wallet MUST send notification transactions as if\nit was a newly-created wallet")])])]),e._v(" "),i("li",[e._v("The index value corresponding to the next unused pubkey for each\npayment code on the previous list\n"),i("ol",[i("li",[e._v("This value can be recovered by checking each ephemeral deposit\naddress in sequence for transactions.")]),e._v(" "),i("li",[e._v("Wallets MAY use a lookahead window capable of detecting gaps in\nthe address sequence during this recovery operation.")])])]),e._v(" "),i("li",[e._v("The index value of the next unused ephemeral payment code.\n"),i("ol",[i("li",[e._v("Recovering all incoming funds associated with ephemeral payment\ncodes with 100% certainty requires exhausting the entire 2^32^\naddress space of potential ephemeral payment codes.\n"),i("ol",[i("li",[e._v('In most cases, less than 100% certainty is acceptable as\nlong as a fallback "deep scan" is available as an option\nto the user.')])])]),e._v(" "),i("li",[e._v("The wallet checks the notification address for each ephemeral\npayment code for notification transactions in order to recover\nassociated funds.")]),e._v(" "),i("li",[e._v("Since most ephemeral payment codes will not receive a refund\ntransaction wallets SHOULD use a large lookahead window for this\nrecovery operation.")]),e._v(" "),i("li",[e._v("The recovered value MUST be chosen as a number higher than any\nephemeral payment code which has received a notification\ntransaction.")])])])]),e._v(" "),i("h3",{attrs:{id:"wallet-sharing-wallet-sharing"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#wallet-sharing-wallet-sharing"}},[e._v("#")]),e._v(" Wallet Sharing {#wallet_sharing}")]),e._v(" "),i("p",[e._v("Wallets using payment codes generally should not be shared across\nmultiple devices, given the need to synchronize metadata between each\ninstance.")]),e._v(" "),i("p",[e._v("If wallets are shared between devices without a synchronization\nmechanism, undesirable address reuse can occur.")]),e._v(" "),i("p",[e._v("Wallets may perform an OPTIONAL check for existing transactions to an\nephemeral deposit addresses prior to sending a transaction by checking a\nlocal copy of the blockchain or querying a public blockchain explorer\nvia Tor or equivalent.")]),e._v(" "),i("h3",{attrs:{id:"alternate-notification-methods-alternate-notification-methods"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#alternate-notification-methods-alternate-notification-methods"}},[e._v("#")]),e._v(" Alternate Notification Methods {#alternate_notification_methods}")]),e._v(" "),i("p",[e._v("In order to ensure that no funds will be lost in the event the recipient\nmust recover their wallet from a seed, the sender MUST send a\nnotification transaction the first time the sender interacts with a\nparticular recipient.")]),e._v(" "),i("p",[e._v("A recipient MAY choose to designate alternate notification methods which\nthe sender may use in addition to a notification transaction.")]),e._v(" "),i("p",[e._v("If the recipient specifies an alternate notification method, a compliant\nimplementation MAY refrain from continually monitoring the notification\naddress and SHOULD check the notification address periodically to detect\npayments sent by users who can not employ the alternate method.")]),e._v(" "),i("p",[e._v("A recipient specifies their preference for alternate notification by\nsetting the appropriate bits in the feature byte of their payment code.")]),e._v(" "),i("h3",{attrs:{id:"bitmessage-notification-bitmessage-notification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#bitmessage-notification-bitmessage-notification"}},[e._v("#")]),e._v(" Bitmessage Notification {#bitmessage_notification}")]),e._v(" "),i("p",[e._v("A recipient which prefers to receive notifications via Bitmessage\nindicates this preference by:")]),e._v(" "),i("ul",[i("li",[e._v("Setting bit 0 of the features byte to 1")]),e._v(" "),i("li",[e._v("Setting byte 67 of the serialized payment code to the desired\nBitmessage address version")]),e._v(" "),i("li",[e._v("Setting byte 68 of the serialized payment code to the desired\nBitmessage stream number")])]),e._v(" "),i("p",[e._v("The sender uses this information to construct a valid notification\nBitmessage address:")]),e._v(" "),i("ol",[i("li",[e._v("Derive a Bitmessage signing key as:\nB = payment code / 0 / 0")]),e._v(" "),i("li",[e._v("Initialize a counter at 1:\nn")]),e._v(" "),i("li",[e._v("Derive a candidate encryption key as:\nB' = payment code / 0 / n")]),e._v(" "),i("li",[e._v("If the combination of B and B` do not form a valid Bitmessage\naddress, increment n by one and try again")]),e._v(" "),i("li",[e._v("Use the address version, signing key, encryption key, and stream\nnumber to construct a Bitmessage address per the Bitmessage protocol")])]),e._v(" "),i("p",[e._v("The sender transmits their payment code in base58 form to the calculated\nBitmessage address.")]),e._v(" "),i("p",[e._v("In order to use Bitmessage notification, the recipient must have a\nBitmessage client which listens at the address which the senders will\nderive and is capable of relaying received payment codes to the Bitcoin\nwallet.")]),e._v(" "),i("h2",{attrs:{id:"version-2-version-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#version-2-version-2"}},[e._v("#")]),e._v(" Version 2 {#version_2}")]),e._v(" "),i("p",[e._v("Version 2 payment codes behave identifically to version 1 payment codes,\nexcept as modified below.")]),e._v(" "),i("h3",{attrs:{id:"representation-representation-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#representation-representation-1"}},[e._v("#")]),e._v(" Representation {#representation_1}")]),e._v(" "),i("h4",{attrs:{id:"binary-serialization-binary-serialization-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#binary-serialization-binary-serialization-1"}},[e._v("#")]),e._v(" Binary Serialization {#binary_serialization_1}")]),e._v(" "),i("ul",[i("li",[e._v("Byte 0: version. required value: 0x02")])]),e._v(" "),i("h3",{attrs:{id:"protocol-protocol-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#protocol-protocol-1"}},[e._v("#")]),e._v(" Protocol {#protocol_1}")]),e._v(" "),i("h4",{attrs:{id:"definitions-definitions-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#definitions-definitions-1"}},[e._v("#")]),e._v(" Definitions {#definitions_1}")]),e._v(" "),i("ul",[i("li",[e._v("Notification change output: the change output from a notification\ntransaction which which resides in the sender's wallet, but can be\nautomatically located by the intended recipient")]),e._v(" "),i("li",[e._v("Payment code identifier: a 33 byte representation of a payment code\nconstructed by prepending 0x02 to the SHA256 hash of the binary\nserialization of the payment code")])]),e._v(" "),i("h4",{attrs:{id:"notification-transaction-notification-transaction-1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#notification-transaction-notification-transaction-1"}},[e._v("#")]),e._v(" Notification Transaction {#notification_transaction_1}")]),e._v(" "),i("p",[e._v("Note: this procedure is used if Bob uses a version 2 payment code\n(regardless of the the version of Alice's payment code). If Bob's\npayment code is not version 2, see the appropriate section in this\nspecification.")]),e._v(" "),i("ol",[i("li",[e._v("Construct a notification transaction as per the version 1\ninstructions, except do not create the output to Bob's notification\naddress")]),e._v(" "),i("li",[e._v("Create a notification change address as follows:\n"),i("ol",[i("li",[e._v("Obtain the pubkey corresponding to the next change address")]),e._v(" "),i("li",[e._v("Construct a multisig output in the form:")])])])]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("    OP_1 <Bob's payment code identifier> <change address pubkey> OP_2 OP_CHECKMULTISIG\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br")])]),i("p",[e._v("The relative ordering of the payment code identifier and change address\npubkey in the above script MAY be randomized")]),e._v(" "),i("p",[e._v("Bob detects notification transactions by adding his payment code\nidentifier to his bloom filter.")]),e._v(" "),i("ol",[i("li",[e._v("When the filter returns a notification transaction, the sender's\npayment code is unblinded using the same procedure as for version 1\nnotification transactions.")])]),e._v(" "),i("p",[e._v("Alice's wallet should spend the notification change output at the next\nappropriate opportunity.")]),e._v(" "),i("h2",{attrs:{id:"test-vectors-test-vectors"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#test-vectors-test-vectors"}},[e._v("#")]),e._v(" Test Vectors {#test_vectors}")]),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://gist.github.com/SamouraiDev/6aad669604c5930864bd",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP47 Reusable Payment Codes Test\nVectors"),i("OutboundLink")],1)])]),e._v(" "),i("h2",{attrs:{id:"reference"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"bip-0032.mediawiki",title:"wikilink"}},[e._v("BIP32 - Hierarchical Deterministic\nWallets")])]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0043.mediawiki",title:"wikilink"}},[e._v("BIP43 - Purpose Field for Deterministic\nWallets")])]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0044.mediawiki",title:"wikilink"}},[e._v("BIP44 - Multi-Account Hierarchy for Deterministic\nWallets")])]),e._v(" "),i("li",[i("a",{attrs:{href:"https://bitcoin.org/en/developer-reference#outpoint",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Outpoint"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/petertodd/dust-b-gone",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("dust-b-gone"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://en.bitcoin.it/wiki/Base58Check_encoding",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Base58Check\nencoding"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://bitmessage.org/bitmessage.pdf",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bitmessage"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-April/007812.html",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mailing list\ndiscussion"),i("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);