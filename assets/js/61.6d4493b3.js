(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{435:function(e,t,n){"use strict";n.r(t);var s=n(43),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_155"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_155"}},[e._v("#")]),e._v(" 155")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 155\n  Layer: Peer Services\n  Title: addrv2 message\n  Author: Wladimir J. van der Laan <laanwj@gmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0155\n  Status: Draft\n  Type: Standards Track\n  Created: 2019-02-27\n  License: BSD-2-Clause\n")])])]),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),n("h3",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This document proposes a new P2P message to gossip longer node addresses\nover the P2P network. This is required to support new-generation Onion\naddresses, I2P, and potentially other networks that have longer endpoint\naddresses than fit in the 128 bits of the current "),n("code",[e._v("addr")]),e._v(" message.")]),e._v(" "),n("h3",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This BIP is licensed under the 2-clause BSD license.")]),e._v(" "),n("h3",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("Tor v3 hidden services are part of the stable release of Tor since\nversion 0.3.2.9. They have various advantages compared to the old hidden\nservices, among which better encryption and privacy [^1]. These services\nhave 256 bit addresses and thus do not fit in the existing "),n("code",[e._v("addr")]),e._v("\nmessage, which encapsulates onion addresses in OnionCat IPv6 addresses.")]),e._v(" "),n("p",[e._v("Other transport-layer protocols such as I2P have always used longer\naddresses. This change would make it possible to gossip such addresses\nover the P2P network, so that other peers can connect to them.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("blockquote",[n("p",[e._v('The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL\nNOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and\n"OPTIONAL" in this document are to be interpreted as described in\nRFC 2119[^2].')])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("addrv2")]),e._v(" message is defined as a message where\n"),n("code",[e._v('pchCommand == "addrv2"')]),e._v(". It is serialized in the standard encoding for\nP2P messages. Its format is similar to the current "),n("code",[e._v("addr")]),e._v(" message format\n[^3], with the difference that the fixed 16-byte IP address is replaced\nby a network ID and a variable-length address, and the services format\nhas been changed to\n"),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer",target:"_blank",rel:"noopener noreferrer"}},[e._v("CompactSize"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("This means that the message contains a serialized "),n("code",[e._v("std::vector")]),e._v(" of the\nfollowing structure:")]),e._v(" "),n("p",[e._v("Type                              Name          Description")]),e._v(" "),n("hr"),e._v(" "),n("p",[n("code",[e._v("uint32_t")]),e._v(" "),n("code",[e._v("time")]),e._v("        Time that this node was last seen as connected to the network. A time in Unix epoch time format.\n"),n("code",[e._v("CompactSize")]),e._v(" "),n("code",[e._v("services")]),e._v("    Service bits. A bit field that is 64 bits wide, encoded in "),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer",target:"_blank",rel:"noopener noreferrer"}},[e._v("CompactSize"),n("OutboundLink")],1),e._v(".\n"),n("code",[e._v("uint8_t")]),e._v(" "),n("code",[e._v("networkID")]),e._v("   Network identifier. An 8-bit value that specifies which network is addressed.\n"),n("code",[e._v("std::vector <uint8_t>")]),e._v(" "),n("code",[e._v("addr")]),e._v("        Network address. The interpretation depends on networkID.\n"),n("code",[e._v("uint16_t")]),e._v(" "),n("code",[e._v("port")]),e._v("        Network port. If not relevant for the network this MUST be 0.")]),e._v(" "),n("p",[e._v("One message can contain up to 1,000 addresses. Clients SHOULD reject\nmessages with more addresses.")]),e._v(" "),n("p",[e._v("Field "),n("code",[e._v("addr")]),e._v(" has a variable length, with a maximum of 512 bytes (4096\nbits). Clients SHOULD reject messages with longer addresses,\nirrespective of the network ID.")]),e._v(" "),n("p",[e._v("The list of reserved network IDs is as follows:")]),e._v(" "),n("p",[e._v("Network ID   Enumeration   Address length (bytes)   Description")]),e._v(" "),n("hr"),e._v(" "),n("p",[n("code",[e._v("0x01")]),e._v(" "),n("code",[e._v("IPV4")]),e._v("        4                        IPv4 address (globally routed internet)\n"),n("code",[e._v("0x02")]),e._v(" "),n("code",[e._v("IPV6")]),e._v("        16                       IPv6 address (globally routed internet)\n"),n("code",[e._v("0x03")]),e._v(" "),n("code",[e._v("TORV2")]),e._v("       10                       Tor v2 hidden service address\n"),n("code",[e._v("0x04")]),e._v(" "),n("code",[e._v("TORV3")]),e._v("       32                       Tor v3 hidden service address\n"),n("code",[e._v("0x05")]),e._v(" "),n("code",[e._v("I2P")]),e._v("         32                       I2P overlay network address\n"),n("code",[e._v("0x06")]),e._v(" "),n("code",[e._v("CJDNS")]),e._v("       16                       Cjdns overlay network address")]),e._v(" "),n("p",[e._v("Clients are RECOMMENDED to gossip addresses from all known networks even\nif they are currently not connected to some of them. That could help\nmulti-homed nodes and make it more difficult for an observer to tell\nwhich networks a node is connected to.")]),e._v(" "),n("p",[e._v("Clients SHOULD NOT gossip addresses from unknown networks because they\nhave no means to validate those addresses and so can be tricked to\ngossip invalid addresses.")]),e._v(" "),n("p",[e._v("Further network ID numbers MUST be reserved in a new BIP document.")]),e._v(" "),n("p",[e._v("Clients SHOULD reject messages that contain addresses that have a\ndifferent length than specified in this table for a specific network ID,\nas these are meaningless.")]),e._v(" "),n("p",[e._v("See the appendices for the address encodings to be used for the various\nnetworks.")]),e._v(" "),n("h2",{attrs:{id:"signaling-support-and-compatibility-signaling-support-and-compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#signaling-support-and-compatibility-signaling-support-and-compatibility"}},[e._v("#")]),e._v(" Signaling support and compatibility {#signaling_support_and_compatibility}")]),e._v(" "),n("p",[e._v("Introduce a new message type "),n("code",[e._v("sendaddrv2")]),e._v(". Sending such a message\nindicates that a node can understand and prefers to receive "),n("code",[e._v("addrv2")]),e._v("\nmessages instead of "),n("code",[e._v("addr")]),e._v(' messages. I.e. "Send me addrv2".')]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("sendaddrv2")]),e._v(" message MUST only be sent in response to the "),n("code",[e._v("version")]),e._v("\nmessage from a peer and prior to sending the "),n("code",[e._v("verack")]),e._v(" message.")]),e._v(" "),n("p",[e._v("For older peers, that did not emit "),n("code",[e._v("sendaddrv2")]),e._v(", keep sending the legacy\n"),n("code",[e._v("addr")]),e._v(" message, ignoring addresses with the newly introduced address\ntypes.")]),e._v(" "),n("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),n("p",[e._v("The reference implementation is available at (to be done)")]),e._v(" "),n("h2",{attrs:{id:"acknowledgements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[e._v("#")]),e._v(" Acknowledgements")]),e._v(" "),n("p",[e._v("- Jonas Schnelli: change "),n("code",[e._v("services")]),e._v(" field to\n"),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer",target:"_blank",rel:"noopener noreferrer"}},[e._v("CompactSize"),n("OutboundLink")],1),e._v(",\nto make the message more compact in the likely case instead of always\nusing 8 bytes.")]),e._v(" "),n("p",[e._v("- Gregory Maxwell: various suggestions regarding extensibility")]),e._v(" "),n("h2",{attrs:{id:"appendix-a-tor-v2-address-encoding-appendix-a-tor-v2-address-encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix-a-tor-v2-address-encoding-appendix-a-tor-v2-address-encoding"}},[e._v("#")]),e._v(" Appendix A: Tor v2 address encoding {#appendix_a_tor_v2_address_encoding}")]),e._v(" "),n("p",[e._v("The new message introduces a separate network ID for "),n("code",[e._v("TORV2")]),e._v(".")]),e._v(" "),n("p",[e._v("Clients MUST send Tor hidden service addresses with this network ID,\nwith the 80-bit hidden service ID in the address field. This is the same\nas the representation in the legacy "),n("code",[e._v("addr")]),e._v(" message, minus the 6 byte\nprefix of the OnionCat wrapping.")]),e._v(" "),n("p",[e._v("Clients SHOULD ignore OnionCat ("),n("code",[e._v("fd87:d87e:eb43::/48")]),e._v(") addresses on\nreceive if they come with the "),n("code",[e._v("IPV6")]),e._v(" network ID.")]),e._v(" "),n("h2",{attrs:{id:"appendix-b-tor-v3-address-encoding-appendix-b-tor-v3-address-encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix-b-tor-v3-address-encoding-appendix-b-tor-v3-address-encoding"}},[e._v("#")]),e._v(" Appendix B: Tor v3 address encoding {#appendix_b_tor_v3_address_encoding}")]),e._v(" "),n("p",[e._v("According to the spec [^4], next-gen "),n("code",[e._v(".onion")]),e._v(" addresses are encoded as\nfollows:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('onion_address = base32(PUBKEY | CHECKSUM | VERSION) + ".onion"\n CHECKSUM = H(".onion checksum" | PUBKEY | VERSION)[:2]\n\n where:\n   - PUBKEY is the 32 bytes ed25519 master pubkey of the hidden service\n   - VERSION is a one byte version field (default value \'\\x03\')\n   - ".onion checksum" is a constant string\n   - CHECKSUM is truncated to two bytes before inserting it in onion_address\n   - H() is the SHA3-256 cryptographic hash function\n')])])]),n("p",[e._v("Tor v3 addresses MUST be sent with the "),n("code",[e._v("TORV3")]),e._v(" network ID, with the\n32-byte PUBKEY part in the address field. As VERSION will always be\n'\\x03' in the case of v3 addresses, this is enough to reconstruct the\nonion address.")]),e._v(" "),n("h2",{attrs:{id:"appendix-c-i2p-address-encoding-appendix-c-i2p-address-encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix-c-i2p-address-encoding-appendix-c-i2p-address-encoding"}},[e._v("#")]),e._v(" Appendix C: I2P address encoding {#appendix_c_i2p_address_encoding}")]),e._v(" "),n("p",[e._v("Like Tor, I2P naming uses a base32-encoded address format[^5].")]),e._v(" "),n("p",[e._v("I2P uses 52 characters (256 bits) to represent the full SHA-256 hash,\nfollowed by "),n("code",[e._v(".b32.i2p")]),e._v(".")]),e._v(" "),n("p",[e._v("I2P addresses MUST be sent with the "),n("code",[e._v("I2P")]),e._v(" network ID, with the decoded\nSHA-256 hash as address field.")]),e._v(" "),n("h2",{attrs:{id:"appendix-d-cjdns-address-encoding-appendix-d-cjdns-address-encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix-d-cjdns-address-encoding-appendix-d-cjdns-address-encoding"}},[e._v("#")]),e._v(" Appendix D: Cjdns address encoding {#appendix_d_cjdns_address_encoding}")]),e._v(" "),n("p",[e._v("Cjdns addresses are simply IPv6 addresses in the "),n("code",[e._v("fc00::/8")]),e._v(" range[^6].\nThey MUST be sent with the "),n("code",[e._v("CJDNS")]),e._v(" network ID.")]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<references/>\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("[^1]: "),n("a",{attrs:{href:"https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tor Rendezvous Specification - Version\n3"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^2]: "),n("a",{attrs:{href:"https://tools.ietf.org/html/rfc2119",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 2119"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^3]: "),n("a",{attrs:{href:"https://bitcoin.org/en/developer-reference#addr",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bitcoin Developer Reference: addr\nmessage"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^4]: "),n("a",{attrs:{href:"https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tor Rendezvous Specification - Version 3: Encoding onion\naddresses"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^5]: "),n("a",{attrs:{href:"https://geti2p.net/en/docs/naming#base32",target:"_blank",rel:"noopener noreferrer"}},[e._v("I2P: Naming and address\nbook"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^6]: "),n("a",{attrs:{href:"https://github.com/cjdelisle/cjdns/blob/6e46fa41f5647d6b414612d9d63626b0b952746b/doc/Whitepaper.md#pulling-it-all-together",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cjdns whitepaper: Pulling It All\nTogether"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);