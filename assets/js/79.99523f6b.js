(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{454:function(e,t,n){"use strict";n.r(t);var i=n(43),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_301"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_301"}},[e._v("#")]),e._v(" 301")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 301\n  Layer: Consensus (soft fork)\n  Title: Blind Merged Mining (Consensus layer)\n  Author: Paul Sztorc <truthcoin@gmail.com>\n          CryptAxe <cryptaxe@gmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0301\n  Status: Draft\n  Type: Standards Track\n  Created: 2019-07-23\n  License: BSD-2-Clause\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v('Blind Merged Mining (BMM) is a way of mining optional extension blocks\n(ie, "asymmetric sidechains"). BMM produces weak guarantees that the\nblock is valid, for *any* arbitrary set of rules; and yet it does so\nwithout requiring miners to actually do any validation on the block\nwhatsoever.')]),e._v(" "),n("p",[e._v('BMM actually is a process that spans two or more chains. Here we focus\non the modifications to mainchain Bitcoin. For an explanation of the\n"whole picture", please see '),n("a",{attrs:{href:"http://www.truthcoin.info/blog/blind-merged-mining/",target:"_blank",rel:"noopener noreferrer"}},[e._v("this\npost"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v('Our goal here, is to allow mainchain miners to trustlessly "sell" the\nact of finding a sidechain block.')]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v('Regular "Merged-Mining" (MM) allows miners to reuse their hashing work\nto secure other chains (for example, as in Namecoin). However,\ntraditional MM has two drawbacks:')]),e._v(" "),n("ol",[n("li",[e._v("Miners must run a full node of the other chain. (This is because\n[while miners can effortlessly create the block] miners will not\ncreate a valid payment to themselves, unless the block that they MM\nis a valid one. Therefore, miners must assemble a *valid* block\nfirst, then MM it.)")]),e._v(" "),n("li",[e._v("Miners are paid on the other chain, not on the regular BTC\nmainchain. For example, miners who MM Namecoin will earn NMC (and\nthey will need to sell the NMC for BTC, before selling the BTC in\norder to pay for electricity).")])]),e._v(" "),n("p",[e._v("BMM addresses both shortcomings.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("p",[e._v('Note: This document uses the notation side:\\* and main:\\* in front\nof otherwise-ambiguous words (such as "block", "node", or\n"chain"), to distinguish the mainchain version from its sidechain\ncounterpart. We also use "Simon" to refer to a Sidechain Full Node,\nand "Mary" to refer to a mainchain miner.')]),e._v(" "),n("h3",{attrs:{id:"bmm-request-bmm-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bmm-request-bmm-request"}},[e._v("#")]),e._v(" BMM Request {#bmm_request}")]),e._v(" "),n("p",[e._v("To buy the right to find a sidechain block, users broadcast BMM\nRequests.")]),e._v(" "),n("p",[e._v("Here, these can take two forms. The first does not require the Lightning\nNetwork, but it does have new requirements for Immediate Expiration (see\nbelow). The second inherits Immediate Expiration from the Lightning\nNetwork itself, but requires extra preparation and a different/larger\nmessage.")]),e._v(" "),n("p",[e._v("Both forms require that certain Critical Data will be committed to\nwithin the coinbase of the block that the transaction is included in\n(see BMM Accept). For the OnChain (non-Lightning) version, we have\ncreated a new extended serialization transaction type (very similar to\nhow SegWit handles witness data (the witness stack)).")]),e._v(" "),n("h4",{attrs:{id:"immediate-expiration-fill-or-kill-immediate-expiration-fill-or-kill"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#immediate-expiration-fill-or-kill-immediate-expiration-fill-or-kill"}},[e._v("#")]),e._v(' Immediate Expiration ("Fill-or-Kill") {#immediate_expiration_fill_or_kill}')]),e._v(" "),n("p",[e._v('We would like to make special guarantees to the counterparties of this\ntransaction. Specifically, instead of Simon making a "payment" to\nMary, we prefer that Simon give Mary an "offer" (which she can either\naccept or decline).')]),e._v(" "),n("p",[e._v("Crucially, we want Simon to safely make many offers to several different\nMary's, in realtime (ie, quickly and off-chain). However, we ultimately\nwant only one offer to be accepted, at most. In other words, we want\nSimon's offers to *immediately expire*. If only one offer can become\na bona fide transaction, then Simon will feel comfortable making\nmultiple offers all day long. Because all of the Simons are making many\noffers, the Marys collectively gain access to a large set of offers to\nchoose from.")]),e._v(" "),n("h4",{attrs:{id:"onchain-bmm-request-onchain-bmm-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#onchain-bmm-request-onchain-bmm-request"}},[e._v("#")]),e._v(" OnChain BMM Request {#onchain_bmm_request}")]),e._v(" "),n("p",[e._v("OnChain BMMRs do not require the Lightning network, but they do have new\nrequirements for validation.")]),e._v(" "),n("h5",{attrs:{id:"structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[e._v("#")]),e._v(" Structure")]),e._v(" "),n("p",[e._v("The following data is required:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("    32-bytes  - h* sideHeaderHash\n    ?~?-bytes - critical data extended serialization\n        3-bytes - 0x00bf00 identifying bytes\n        1-byte  - nSidechain\n        2-bytes - prevSideBlockRef\n        4-bytes - prevMainHeaderBytes\n")])])]),n("p",[e._v("sideHeaderHash comes from side:chain (side:nodes build\nside:blocks/headers). The identifying bytes are given here. nSidechain\nidentifies which sidechain we are BMMing. By the time Blind Merged\nMining can take place, it is known globally.")]),e._v(" "),n("p",[e._v("prevBlockRef, is a little more complicated (next section).")]),e._v(" "),n("p",[e._v("To qualify for inclusion in a block, BMM requests are subject to the\nfollowing requirements:")]),e._v(" "),n("ol",[n("li",[e._v('Requests must match a corresponding "BMM Accept" (see last section\nof BIP).')]),e._v(" "),n("li",[e._v("At most, only one Request is allowed in a main:block, per sidechain.\nIn other words, if 700 users broadcast BMM Requests for sidechain\n#4, then the main:miner must choose one single Request to include.")]),e._v(" "),n("li",[e._v("The 4-bytes of prevMainHeaderBytes must match the last four bytes of\nthe previous main:blockheader. Thus, Simon's txns are only be valid\nfor the current block, in the block history that he knows about (and\ntherefore, the current sidechain history that he knows about).")])]),e._v(" "),n("h5",{attrs:{id:"prevblockref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prevblockref"}},[e._v("#")]),e._v(" prevBlockRef")]),e._v(" "),n("p",[e._v('prevBlockRef is an integer that counts the number of "skips" one must\ntake in the side:chain in order to find the current side:block\'s parent\nblock. This value is zero unless the sidechain is reorganizing (or\nskipping over invalid sidechain blocks). If a side:node wants to orphan\nthe most-recent N blocks, the value of the current block will be equal\nto N; in the block after that it will be back to zero.')]),e._v(" "),n("p",[n("code",[e._v('<img src="bip-0301/bmm-dots-examples.png?raw=true" align="middle">')]),e._v(" "),n("code",[e._v("</img>")])]),e._v(" "),n("p",[e._v('Above: Three blockchains, with different max length (small number),\nreorganization histories, and prevBlockRef numbers (larger numbers\nbeneath blocks). The ordering given via each side:block\'s\n"prevSideBlockRef" will be isomorphic to an ordering given by each\nside:block\'s "prevSideHeaderHash" ("prevSideHeaderHash is the\nsidechain\'s equivalent of the mainchain\'s "prevBlockHash"). One can\nfreely convert from one to the other.')]),e._v(" "),n("h5",{attrs:{id:"extended-serialization-extended-serialization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extended-serialization-extended-serialization"}},[e._v("#")]),e._v(" Extended Serialization {#extended_serialization}")]),e._v(" "),n("p",[e._v('To impose new requirements at the transaction level, we borrow the dummy\nvin & "flag" trick from SegWit style transactions. Unless all of the\nrequirements for sidechain critical data transactions are met by the\nblock it is included in, the transaction is invalid. With SegWit, this\nextra data is the SegWit signature stack, and the extra requirements are\nthe signatures\' locations and validity. In the sidechain BMM critical\ndata transactions, the extra data is the (nSidechain, h\\*) pair, which\nmust meet the first two requirements (above) as well as the\nmain:blocknumber, which must meet the third requirement (above).')]),e._v(" "),n("p",[n("code",[e._v('<img src="bip-0301/witness-vs-critical.png?raw=true" align="middle">')]),e._v(" "),n("code",[e._v("</img>")])]),e._v(" "),n("p",[e._v("Above: A chart showing normal txns, SegWit txns, and CriticalData txns.\nThe specific SegWit txn can be seen\n"),n("a",{attrs:{href:"http://srv1.yogh.io/#tx:id:D4A99AE93DF6EE3D4E42CE69338DFC1D06CCD9B198666E98FF0588057378D3D9",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v('These types of transactions have slightly different mempool behavior,\nand should probably be kept in a second mempool. These txns are\nreceived, checked immediately, and if valid they are evaluated for\ninclusion in a block. If they are not able to be included in the\nspecific requested block (if the block height requested has been\nsurpassed by the chain tip), they are discarded. In fact, after any\nmain:block is found, everything in this "second mempool" can be\ndiscarded as new payments will be created immediately for the next block\nheight. (This includes cases where the blockchain reorganizes.) There is\nno re-evaluation of the txns in this mempool ever -- they are evaluated\nonce and then either included or discarded. They never need to be\nrescanned.')]),e._v(" "),n("p",[e._v("Interestingly, these payments will *always* be directed to main:miners\nfrom non-main:miners. Therefore, non-mining full nodes do not need to\nkeep them in any mempool at all. Non-miner nodes can just wait for a\nblock to be found, and check the txn then. These transactions more\nresemble a stock market's pit trade-offers (in contrast, regular\nBitcoin txns are more like paper checks).")]),e._v(" "),n("h4",{attrs:{id:"lightning-bmm-request-lightning-bmm-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lightning-bmm-request-lightning-bmm-request"}},[e._v("#")]),e._v(" Lightning BMM Request {#lightning_bmm_request}")]),e._v(" "),n("p",[e._v("Lightning BMMRs require Simons to have a LN-channel pathways open with\nMarys. This may not always be practical (or even possible), especially\ntoday.")]),e._v(" "),n("p",[e._v("LN txns cannot make use of prevSideBlockRef, as no one knows for sure\nwhen (or if) they will be broadcast on-chain. Instead, they must use\nprevSideBlockHash. But they otherwise require the same data:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("    4-bytes - Message header (0xD0520C6E)   \n    1-byte - sidechain number\n    32-bytes  - h* side:block hash  \n    32-bytes  - prevSideBlockHash   \n")])])]),n("p",[e._v("Notice that, in OnChain BMMRs, Simon could reuse the same h\\* all he\nwanted, because only one OnChain BMMR could be included per main:block\nper sidechain. However, on the LN no such rule can be enforced, as the\ngoal is to push everything off-chain and include *zero* txns. So, we\nwill never know what the Requests were, or how many had an effect on\nanything.")]),e._v(" "),n("p",[e._v("Therefore, Simon will need to ensure that he "),n("strong",[e._v("gives each Mary a\ndifferent h\\*")]),e._v(". Simon can easily do this, as he controls the\nside:block's contents and can simply increment a side:nonce -- this\nchanges the side:block, and changes its hash (ie, changes h\\*).")]),e._v(" "),n("p",[e._v("With a unique h\\* per Mary (or, more precisely, per channel), and at\nmost 1 h\\* making it into a block (per sidechain), Simon can ensure\nthat he is charged, at most, one time.")]),e._v(" "),n("p",[e._v("That's probably confusing, so here is an example, in which: Simon\nstarts with 13 BTC, Mary starts with 40 BTC, the side:block's tx-fees\ncurrently total 7.1 BTC, and Simon is keeping 0.1 BTC for himself and\npaying 7 BTC to Mary.")]),e._v(" "),n("p",[e._v("We start with (I):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("    Simon 13 in, Mary 40 in ; 53 in total\n        Simon's version [signed by Mary]\n            13 ; to Simon if TimeLock=over; OR to Mary if SimonSig\n            40 ; to Mary\n        Mary's version [signed by Simon]\n            40 ; to me if TimeLock=over; OR to Simon if MarySig\n            13 ; to Simon\n")])])]),n("p",[e._v("And both parties move, from there to (II):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("    Simon 13 in, Mary 40 in ; 53 in total\n        Simon's version [signed by Mary]\n            6 ; to Simon if TimeLock=over; OR to Mary if SimonSig\n            40 ; to Mary\n            7 ; to Mary if critical data requirements met; OR to Simon if LongTimeLock=over\n        Mary's version [signed by Simon]\n            40 ; to Mary if TimeLock=over; OR to Simon if MarySig\n            6 ; to Simon\n            7 ; to Mary if critical data requirements met; OR to Simon if LongTimeLock=over\n")])])]),n("p",[e._v("From here, if the h\\* side:block in question is BMMed, they can\nproceed to (III):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("    Simon 13 in, Mary 40 in ; 53 in total\n        Simon's version [signed by Mary]\n            6 ; to Simon if TimeLock=over; OR to Mary if SimonSig\n            47 ; to Mary\n        Mary's version [signed by Simon]\n            47 ; to me if TimeLock=over; OR to Simon if MarySig\n            6 ; to Simon\n")])])]),n("p",[e._v("If Simon proceeds immediately, he removes Mary's incentive to care\nabout blocks being built on this side:block. If Simon's side:block is\norphaned, he loses his 7 BTC. Simon can either play it safe, and wait\nfor (for example) 100 side:blocks before moving on (ie, before moving on\nto the third LN txn, above); or else Simon can take the risk if he feels\ncomfortable with it.")]),e._v(" "),n("p",[e._v("If the h\\* side:block is not found, then (II) and (III) are basically\nequivalent to each other. Simon and Mary could jointly reconstruct (I)\nand go back there, or they could proceed to a new version of II (with a\ndifferent h\\*, trying again with new side:block in the next\nmain:block).")]),e._v(" "),n("p",[e._v("Now that we have described Requests, we can describe how they are\naccepted.")]),e._v(" "),n("h3",{attrs:{id:"bmm-accept-bmm-accept"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bmm-accept-bmm-accept"}},[e._v("#")]),e._v(" BMM Accept {#bmm_accept}")]),e._v(" "),n("p",[e._v('For each BMM Request that a main:miner "accepts", main:miners must\nplace an OP Return output into their main:coinbase txn. (We\'ve changed\nthe tx-standardness policy to allow multiple OP_RETURNs.)')]),e._v(" "),n("p",[e._v('The following data is required in the "accept" OP_RETURN output:')]),e._v(" "),n("p",[n("code",[e._v("1-byte - OP_RETURN (0x6a)")]),n("br"),e._v(" "),n("code",[e._v("1-byte - Push the following 36 bytes (0x24)")]),n("br"),e._v(" "),n("code",[e._v("4-bytes - Message header (0xD3407053)")]),n("br"),e._v(" "),n("code",[e._v("32-bytes - h*")]),n("br"),e._v(" "),n("code",[e._v("~5-bytes - BMM identifier bytes")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3377-L3470",target:"_blank",rel:"noopener noreferrer"}},[e._v("Link to\ncode"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("If these OP_RETURN outputs are not present, then no BMM Requests have\nbeen accepted. (And, if they are not accepted, then they cannot be\nincluded in a main:block.)")]),e._v(" "),n("h2",{attrs:{id:"backward-compatibility-backward-compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#backward-compatibility-backward-compatibility"}},[e._v("#")]),e._v(" Backward compatibility {#backward_compatibility}")]),e._v(" "),n("p",[e._v('As a soft fork, older software will continue to operate without\nmodification. As stated above, BMM asks nodes to track a set of ordered\nhashes, and to allow miners to "sell" the act of finding a sidechain\nblock. Non-upgraded nodes will notice that this activity (specifically:\ndata in coinbases, and new txns that have OP Returns and interesting\nmessage headers) is now taking place, but they will not understand any\nof it. Much like P2SH or a new OP Code, these old users will not be\ndirectly affected by the fork, as they will have no expectations of\nreceiving payments of this kind.')]),e._v(" "),n("p",[e._v("(As a matter of fact, the only people receiving money here all happen to\nbe miners. So there is less reason than ever to expect compatibility\nproblems.)")]),e._v(" "),n("h2",{attrs:{id:"deployment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),n("p",[e._v('This BIP will be deployed by "version bits" BIP9 with the name\n"blindmm" and using bit 4.')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("// Deployment of Drivechains (BIPX, BIPY)\nconsensus.vDeployments[Consensus::DEPLOYMENT_DRIVECHAINS].bit = 4;\nconsensus.vDeployments[Consensus::DEPLOYMENT_DRIVECHAINS].nStartTime = 1579072881; // January 15th, 2020.\nconsensus.vDeployments[Consensus::DEPLOYMENT_DRIVECHAINS].nTimeout = 1610695281; // January 15th, 2021.\n")])])]),n("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference Implementation {#reference_implementation}")]),e._v(" "),n("p",[e._v("See: "),n("a",{attrs:{href:"https://github.com/DriveNetTESTDRIVE/DriveNet",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/DriveNetTESTDRIVE/DriveNet"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Also, for interest, see an example sidechain here:\n"),n("a",{attrs:{href:"https://github.com/drivechain-project/bitcoin/tree/sidechainBMM",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/drivechain-project/bitcoin/tree/sidechainBMM"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://www.drivechain.info/literature/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.drivechain.info/literature/index.html"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://www.truthcoin.info/blog/blind-merged-mining/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.truthcoin.info/blog/blind-merged-mining/"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014789.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014789.html"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://www.truthcoin.info/images/bmm-outline.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.truthcoin.info/images/bmm-outline.txt"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"thanks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thanks"}},[e._v("#")]),e._v(" Thanks")]),e._v(" "),n("p",[e._v("Thanks to everyone who contributed to the discussion, especially:\nZmnSCPxj, Adam Back, Peter Todd, Dan Anderson, Sergio Demian Lerner,\nMatt Corallo, Sjors Provoost, Tier Nolan, Erik Aronesty, Jason\nDreyzehner, Joe Miyamoto, Chris Stewart, Ben Goldhaber.")]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This BIP is licensed under the BSD 2-clause license.")])])}),[],!1,null,null,null);t.default=a.exports}}]);