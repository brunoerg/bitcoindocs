(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{468:function(e,t,n){"use strict";n.r(t);var i=n(43),o=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_39"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_39"}},[e._v("#")]),e._v(" 39")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 39\n  Layer: Applications\n  Title: Mnemonic code for generating deterministic keys\n  Author: Marek Palatinus <slush@satoshilabs.com>\n          Pavol Rusnak <stick@satoshilabs.com>\n          Aaron Voisine <voisine@gmail.com>\n          Sean Bowe <ewillbefull@gmail.com>\n  Comments-Summary: Unanimously Discourage for implementation\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0039\n  Status: Proposed\n  Type: Standards Track\n  Created: 2013-09-10\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This BIP describes the implementation of a mnemonic code or mnemonic\nsentence -- a group of easy to remember words -- for the generation of\ndeterministic wallets.")]),e._v(" "),n("p",[e._v("It consists of two parts: generating the mnemonic and converting it into\na binary seed. This seed can be later used to generate deterministic\nwallets using BIP-0032 or similar methods.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("A mnemonic code or sentence is superior for human interaction compared\nto the handling of raw binary or hexadecimal representations of a wallet\nseed. The sentence could be written on paper or spoken over the\ntelephone.")]),e._v(" "),n("p",[e._v("This guide is meant to be a way to transport computer-generated\nrandomness with a human-readable transcription. It's not a way to\nprocess user-created sentences (also known as brainwallets) into a\nwallet seed.")]),e._v(" "),n("h2",{attrs:{id:"generating-the-mnemonic-generating-the-mnemonic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generating-the-mnemonic-generating-the-mnemonic"}},[e._v("#")]),e._v(" Generating the mnemonic {#generating_the_mnemonic}")]),e._v(" "),n("p",[e._v("The mnemonic must encode entropy in a multiple of 32 bits. With more\nentropy security is improved but the sentence length increases. We refer\nto the initial entropy length as ENT. The allowed size of ENT is 128-256\nbits.")]),e._v(" "),n("p",[e._v("First, an initial entropy of ENT bits is generated. A checksum is\ngenerated by taking the first")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ENT / 32\n")])])]),n("p",[e._v("bits of its SHA256 hash. This checksum is appended to the end of the\ninitial entropy. Next, these concatenated bits are split into groups of\n11 bits, each encoding a number from 0-2047, serving as an index into a\nwordlist. Finally, we convert these numbers into words and use the\njoined words as a mnemonic sentence.")]),e._v(" "),n("p",[e._v("The following table describes the relation between the initial entropy\nlength (ENT), the checksum length (CS), and the length of the generated\nmnemonic sentence (MS) in words.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("CS = ENT / 32\nMS = (ENT + CS) / 11\n\n|  ENT  | CS | ENT+CS |  MS  |\n+-------+----+--------+------+\n|  128  |  4 |   132  |  12  |\n|  160  |  5 |   165  |  15  |\n|  192  |  6 |   198  |  18  |\n|  224  |  7 |   231  |  21  |\n|  256  |  8 |   264  |  24  |\n")])])]),n("h2",{attrs:{id:"wordlist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wordlist"}},[e._v("#")]),e._v(" Wordlist")]),e._v(" "),n("p",[e._v("An ideal wordlist has the following characteristics:")]),e._v(" "),n("p",[e._v("a) smart selection of words")]),e._v(" "),n("p",[n("code",[e._v("- the wordlist is created in such a way that it's enough to type the first four")]),n("br"),e._v(" "),n("code",[e._v("letters to unambiguously identify the word")])]),e._v(" "),n("p",[e._v("b) similar words avoided")]),e._v(" "),n("p",[n("code",[e._v('- word pairs like "build" and "built", "woman" and "women", or "quick" and "quickly"')]),n("br"),e._v(" "),n("code",[e._v("not only make remembering the sentence difficult but are also more error")]),n("br"),e._v(" "),n("code",[e._v("prone and more difficult to guess")])]),e._v(" "),n("p",[e._v("c) sorted wordlists")]),e._v(" "),n("p",[n("code",[e._v("- the wordlist is sorted which allows for more efficient lookup of the code words")]),n("br"),e._v(" "),n("code",[e._v("(i.e. implementations can use binary search instead of linear search)")]),n("br"),e._v(" "),n("code",[e._v("- this also allows trie (a prefix tree) to be used, e.g. for better compression")])]),e._v(" "),n("p",[e._v("The wordlist can contain native characters, but they must be encoded in\nUTF-8 using Normalization Form Compatibility Decomposition (NFKD).")]),e._v(" "),n("h2",{attrs:{id:"from-mnemonic-to-seed-from-mnemonic-to-seed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#from-mnemonic-to-seed-from-mnemonic-to-seed"}},[e._v("#")]),e._v(" From mnemonic to seed {#from_mnemonic_to_seed}")]),e._v(" "),n("p",[e._v('A user may decide to protect their mnemonic with a passphrase. If a\npassphrase is not present, an empty string "" is used instead.')]),e._v(" "),n("p",[e._v('To create a binary seed from the mnemonic, we use the PBKDF2 function\nwith a mnemonic sentence (in UTF-8 NFKD) used as the password and the\nstring "mnemonic" + passphrase (again in UTF-8 NFKD) used as the salt.\nThe iteration count is set to 2048 and HMAC-SHA512 is used as the\npseudo-random function. The length of the derived key is 512 bits (= 64\nbytes).')]),e._v(" "),n("p",[e._v("This seed can be later used to generate deterministic wallets using\nBIP-0032 or similar methods.")]),e._v(" "),n("p",[e._v("The conversion of the mnemonic sentence to a binary seed is completely\nindependent from generating the sentence. This results in a rather\nsimple code; there are no constraints on sentence structure and clients\nare free to implement their own wordlists or even whole sentence\ngenerators, allowing for flexibility in wordlists for typo detection or\nother purposes.")]),e._v(" "),n("p",[e._v('Although using a mnemonic not generated by the algorithm described in\n"Generating the mnemonic" section is possible, this is not advised and\nsoftware must compute a checksum for the mnemonic sentence using a\nwordlist and issue a warning if it is invalid.')]),e._v(" "),n("p",[e._v("The described method also provides plausible deniability, because every\npassphrase generates a valid seed (and thus a deterministic wallet) but\nonly the correct one will make the desired wallet available.")]),e._v(" "),n("h2",{attrs:{id:"wordlists"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wordlists"}},[e._v("#")]),e._v(" Wordlists")]),e._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/bips/bip-0039/bip-0039-wordlists.html",title:"wikilink"}},[e._v("Moved to separate\ndocument")])],1)]),e._v(" "),n("h2",{attrs:{id:"test-vectors-test-vectors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#test-vectors-test-vectors"}},[e._v("#")]),e._v(" Test vectors {#test_vectors}")]),e._v(" "),n("p",[e._v('The test vectors include input entropy, mnemonic and seed. The\npassphrase "TREZOR" is used for all vectors.')]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/trezor/python-mnemonic/blob/master/vectors.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/trezor/python-mnemonic/blob/master/vectors.json"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Also see\n"),n("a",{attrs:{href:"https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("(Japanese wordlist test with heavily normalized symbols as passphrase)")]),e._v(" "),n("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference Implementation {#reference_implementation}")]),e._v(" "),n("p",[e._v("Reference implementation including wordlists is available from")]),e._v(" "),n("p",[n("a",{attrs:{href:"http://github.com/trezor/python-mnemonic",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://github.com/trezor/python-mnemonic"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"other-implementations-other-implementations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#other-implementations-other-implementations"}},[e._v("#")]),e._v(" Other Implementations {#other_implementations}")]),e._v(" "),n("p",[e._v("Go:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/tyler-smith/go-bip39",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/tyler-smith/go-bip39"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Elixir:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/aerosol/mnemo",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/aerosol/mnemo"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Objective-C:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/nybex/NYMnemonic",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/nybex/NYMnemonic"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Haskell:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/haskoin/haskoin",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/haskoin/haskoin"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v(".NET C# (PCL):")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/Thashiznets/BIP39.NET",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/Thashiznets/BIP39.NET"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v(".NET C# (PCL):")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/NicolasDorier/NBitcoin",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/NicolasDorier/NBitcoin"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("JavaScript:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/bitpay/bitcore-mnemonic",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitpay/bitcore-mnemonic"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/bitcoinjs/bip39",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoinjs/bip39"),n("OutboundLink")],1),e._v(" (used by\n"),n("a",{attrs:{href:"https://github.com/blockchain/My-Wallet-V3/blob/v3.8.0/src/hd-wallet.js#L121-L146",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("blockchain.info"),n("OutboundLink")],1),e._v(")")])]),e._v(" "),n("p",[e._v("Java:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/crypto/MnemonicCode.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/crypto/MnemonicCode.java"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Ruby:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/sreekanthgs/bip_mnemonic",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/sreekanthgs/bip_mnemonic"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Rust:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/maciejhirsz/tiny-bip39/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/maciejhirsz/tiny-bip39/"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Swift:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/CikeQiu/CKMnemonic",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/CikeQiu/CKMnemonic"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/yuzushioh/WalletKit",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/yuzushioh/WalletKit"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/pengpengliu/BIP39",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/pengpengliu/BIP39"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/matter-labs/web3swift/blob/develop/Sources/web3swift/KeystoreManager/BIP39.swift",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/matter-labs/web3swift/blob/develop/Sources/web3swift/KeystoreManager/BIP39.swift"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/zcash-hackworks/MnemonicSwift",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/zcash-hackworks/MnemonicSwift"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("C++:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/libbitcoin/libbitcoin-system/blob/master/include/bitcoin/system/wallet/mnemonic.hpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/libbitcoin/libbitcoin-system/blob/master/include/bitcoin/system/wallet/mnemonic.hpp"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("C (with Python/Java/Javascript bindings):")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/ElementsProject/libwally-core",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/ElementsProject/libwally-core"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=o.exports}}]);