(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{477:function(e,t,n){"use strict";n.r(t);var i=n(43),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_65"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_65"}},[e._v("#")]),e._v(" 65")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 65\n  Layer: Consensus (soft fork)\n  Title: OP_CHECKLOCKTIMEVERIFY\n  Author: Peter Todd <pete@petertodd.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0065\n  Status: Final\n  Type: Standards Track\n  Created: 2014-10-01\n  License: PD\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This BIP describes a new opcode (OP_CHECKLOCKTIMEVERIFY) for the Bitcoin\nscripting system that allows a transaction output to be made unspendable\nuntil some point in the future.")]),e._v(" "),n("h2",{attrs:{id:"summary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),n("p",[e._v("CHECKLOCKTIMEVERIFY redefines the existing NOP2 opcode. When executed,\nif any of the following conditions are true, the script interpreter will\nterminate with an error:")]),e._v(" "),n("ul",[n("li",[e._v("the stack is empty; or")]),e._v(" "),n("li",[e._v("the top item on the stack is less than 0; or")]),e._v(" "),n("li",[e._v("the lock-time type (height vs. timestamp) of the top stack item and\nthe nLockTime field are not the same; or")]),e._v(" "),n("li",[e._v("the top stack item is greater than the transaction's nLockTime\nfield; or")]),e._v(" "),n("li",[e._v("the nSequence field of the txin is 0xffffffff;")])]),e._v(" "),n("p",[e._v("Otherwise, script execution will continue as if a NOP had been executed.")]),e._v(" "),n("p",[e._v("The nLockTime field in a transaction prevents the transaction from being\nmined until either a certain block height, or block time, has been\nreached. By comparing the argument to CHECKLOCKTIMEVERIFY against the\nnLockTime field, we indirectly verify that the desired block height or\nblock time has been reached; until that block height or block time has\nbeen reached the transaction output remains unspendable.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("The nLockTime field in transactions can be used to prove that it is\n"),n("em",[e._v("possible")]),e._v(" to spend a transaction output in the future, by constructing\na valid transaction spending that output with the nLockTime field set.")]),e._v(" "),n("p",[e._v("However, the nLockTime field can't prove that it is "),n("em",[e._v("impossible")]),e._v(" to\nspend a transaction output until some time in the future, as there is no\nway to know if a valid signature for a different transaction spending\nthat output has been created.")]),e._v(" "),n("h3",{attrs:{id:"escrow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#escrow"}},[e._v("#")]),e._v(" Escrow")]),e._v(" "),n("p",[e._v('If Alice and Bob jointly operate a business they may want to ensure that\nall funds are kept in 2-of-2 multisig transaction outputs that require\nthe co-operation of both parties to spend. However, they recognise that\nin exceptional circumstances such as either party getting "hit by a\nbus" they need a backup plan to retrieve the funds. So they appoint\ntheir lawyer, Lenny, to act as a third-party.')]),e._v(" "),n("p",[e._v("With a standard 2-of-3 CHECKMULTISIG at any time Lenny could conspire\nwith either Alice or Bob to steal the funds illegitimately. Equally\nLenny may prefer not to have immediate access to the funds to discourage\nbad actors from attempting to get the secret keys from him by force.")]),e._v(" "),n("p",[e._v("However, with CHECKLOCKTIMEVERIFY the funds can be stored in\nscriptPubKeys of the form:")]),e._v(" "),n("p",[n("code",[e._v("IF")]),n("br"),e._v(" "),n("code",[e._v("<now + 3 months> CHECKLOCKTIMEVERIFY DROP")]),n("br"),e._v(" "),n("code",[e._v("<Lenny's pubkey> CHECKSIGVERIFY")]),n("br"),e._v(" "),n("code",[e._v("1")]),n("br"),e._v(" "),n("code",[e._v("ELSE")]),n("br"),e._v(" "),n("code",[e._v("2")]),n("br"),e._v(" "),n("code",[e._v("ENDIF")]),n("br"),e._v(" "),n("code",[e._v("<Alice's pubkey> <Bob's pubkey> 2 CHECKMULTISIG")])]),e._v(" "),n("p",[e._v("At any time the funds can be spent with the following scriptSig:")]),e._v(" "),n("p",[n("code",[e._v("0 <Alice's signature> <Bob's signature> 0")])]),e._v(" "),n("p",[e._v("After 3 months have passed Lenny and one of either Alice or Bob can\nspend the funds with the following scriptSig:")]),e._v(" "),n("p",[n("code",[e._v("0 <Alice/Bob's signature> <Lenny's signature> 1")])]),e._v(" "),n("h3",{attrs:{id:"non-interactive-time-locked-refunds-non-interactive-time-locked-refunds"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#non-interactive-time-locked-refunds-non-interactive-time-locked-refunds"}},[e._v("#")]),e._v(" Non-interactive time-locked refunds {#non_interactive_time_locked_refunds}")]),e._v(" "),n("p",[e._v("There exist a number of protocols where a transaction output is created\nthat requires the co-operation of both parties to spend the output. To\nensure the failure of one party does not result in the funds becoming\nlost, refund transactions are setup in advance using nLockTime. These\nrefund transactions need to be created interactively, and additionally,\nare currently vulnerable to transaction malleability.\nCHECKLOCKTIMEVERIFY can be used in these protocols, replacing the\ninteractive setup with a non-interactive setup, and additionally, making\ntransaction malleability a non-issue.")]),e._v(" "),n("h4",{attrs:{id:"two-factor-wallets-two-factor-wallets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#two-factor-wallets-two-factor-wallets"}},[e._v("#")]),e._v(" Two-factor wallets {#two_factor_wallets}")]),e._v(" "),n("p",[e._v("Services like GreenAddress store bitcoins with 2-of-2 multisig\nscriptPubKey's such that one keypair is controlled by the user, and the\nother keypair is controlled by the service. To spend funds the user uses\nlocally installed wallet software that generates one of the required\nsignatures, and then uses a 2nd-factor authentication method to\nauthorize the service to create the second SIGHASH_NONE signature that\nis locked until some time in the future and sends the user that\nsignature for storage. If the user needs to spend their funds and the\nservice is not available, they wait until the nLockTime expires.")]),e._v(" "),n("p",[e._v("The problem is there exist numerous occasions the user will not have a\nvalid signature for some or all of their transaction outputs. With\nCHECKLOCKTIMEVERIFY rather than creating refund signatures on demand\nscriptPubKeys of the following form are used instead:")]),e._v(" "),n("p",[n("code",[e._v("IF")]),n("br"),e._v(" "),n("code",[e._v("<service pubkey>")]),e._v(" "),n("code",[e._v("CHECKSIGVERIFY")]),n("br"),e._v(" "),n("code",[e._v("ELSE")]),n("br"),e._v(" "),n("code",[e._v("<expiry time>")]),e._v(" "),n("code",[e._v("CHECKLOCKTIMEVERIFY DROP")]),n("br"),e._v(" "),n("code",[e._v("ENDIF")]),n("br"),e._v(" "),n("code",[e._v("<user pubkey>")]),e._v(" "),n("code",[e._v("CHECKSIG")])]),e._v(" "),n("p",[e._v("Now the user is always able to spend their funds without the\nco-operation of the service by waiting for the expiry time to be\nreached.")]),e._v(" "),n("h4",{attrs:{id:"payment-channels-payment-channels"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#payment-channels-payment-channels"}},[e._v("#")]),e._v(" Payment Channels {#payment_channels}")]),e._v(" "),n("p",[e._v("Jeremy Spilman style payment channels first setup a deposit controlled\nby 2-of-2 multisig, tx1, and then adjust a second transaction, tx2, that\nspends the output of tx1 to payor and payee. Prior to publishing tx1 a\nrefund transaction is created, tx3, to ensure that should the payee\nvanish the payor can get their deposit back. The process by which the\nrefund transaction is created is currently vulnerable to transaction\nmalleability attacks, and additionally, requires the payor to store the\nrefund. Using the same scriptPubKey form as in the Two-factor wallets\nexample solves both these issues.")]),e._v(" "),n("h3",{attrs:{id:"trustless-payments-for-publishing-data-trustless-payments-for-publishing-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#trustless-payments-for-publishing-data-trustless-payments-for-publishing-data"}},[e._v("#")]),e._v(" Trustless Payments for Publishing Data {#trustless_payments_for_publishing_data}")]),e._v(" "),n("p",[e._v("The PayPub protocol makes it possible to pay for information in a\ntrustless way by first proving that an encrypted file contains the\ndesired data, and secondly crafting scriptPubKeys used for payment such\nthat spending them reveals the encryption keys to the data. However the\nexisting implementation has a significant flaw: the publisher can delay\nthe release of the keys indefinitely.")]),e._v(" "),n("p",[e._v("This problem can be solved interactively with the refund transaction\ntechnique; with CHECKLOCKTIMEVERIFY the problem can be non-interactively\nsolved using scriptPubKeys of the following form:")]),e._v(" "),n("p",[n("code",[e._v("IF")]),n("br"),e._v(" "),n("code",[e._v("HASH160 <Hash160(encryption key)> EQUALVERIFY")]),n("br"),e._v(" "),n("code",[e._v("<publisher pubkey>")]),e._v(" "),n("code",[e._v("CHECKSIG")]),n("br"),e._v(" "),n("code",[e._v("ELSE")]),n("br"),e._v(" "),n("code",[e._v("<expiry time>")]),e._v(" "),n("code",[e._v("CHECKLOCKTIMEVERIFY DROP")]),n("br"),e._v(" "),n("code",[e._v("<buyer pubkey>")]),e._v(" "),n("code",[e._v("CHECKSIG")]),n("br"),e._v(" "),n("code",[e._v("ENDIF")])]),e._v(" "),n("p",[e._v("The buyer of the data is now making a secure offer with an expiry time.\nIf the publisher fails to accept the offer before the expiry time is\nreached the buyer can cancel the offer by spending the output.")]),e._v(" "),n("h3",{attrs:{id:"proving-sacrifice-to-miners-fees-proving-sacrifice-to-miners-fees"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proving-sacrifice-to-miners-fees-proving-sacrifice-to-miners-fees"}},[e._v("#")]),e._v(" Proving sacrifice to miners' fees {#proving_sacrifice_to_miners_fees}")]),e._v(" "),n("p",[e._v("Proving the sacrifice of some limited resource is a common technique in\na variety of cryptographic protocols. Proving sacrifices of coins to\nmining fees has been proposed as a "),n("em",[e._v("universal public good")]),e._v(" to which the\nsacrifice could be directed, rather than simply destroying the coins.\nHowever doing so is non-trivial, and even the best existing technqiue -\nannounce-commit sacrifices - could encourage mining centralization.\nCHECKLOCKTIMEVERIFY can be used to create outputs that are provably\nspendable by anyone (thus to mining fees assuming miners behave\noptimally and rationally) but only at a time sufficiently far into the\nfuture that large miners can't profitably sell the sacrifices at a\ndiscount.")]),e._v(" "),n("h3",{attrs:{id:"freezing-funds-freezing-funds"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#freezing-funds-freezing-funds"}},[e._v("#")]),e._v(" Freezing Funds {#freezing_funds}")]),e._v(" "),n("p",[e._v("In addition to using cold storage, hardware wallets, and P2SH multisig\noutputs to control funds, now funds can be frozen in UTXOs directly on\nthe blockchain. With the following scriptPubKey, nobody will be able to\nspend the encumbered output until the provided expiry time. This ability\nto freeze funds reliably may be useful in scenarios where reducing\nduress or confiscation risk is desired.")]),e._v(" "),n("p",[n("code",[e._v("<expiry time>")]),e._v(" "),n("code",[e._v("CHECKLOCKTIMEVERIFY DROP DUP HASH160  <pubKeyHash>")]),e._v(" "),n("code",[e._v("EQUALVERIFY CHECKSIG")])]),e._v(" "),n("h3",{attrs:{id:"replacing-the-nlocktime-field-entirely-replacing-the-nlocktime-field-entirely"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replacing-the-nlocktime-field-entirely-replacing-the-nlocktime-field-entirely"}},[e._v("#")]),e._v(" Replacing the nLockTime field entirely {#replacing_the_nlocktime_field_entirely}")]),e._v(" "),n("p",[e._v("As an aside, note how if the SignatureHash() algorithm could optionally\ncover part of the scriptSig the signature could require that the\nscriptSig contain CHECKLOCKTIMEVERIFY opcodes, and additionally, require\nthat they be executed. (the CODESEPARATOR opcode came very close to\nmaking this possible in v0.1 of Bitcoin) This per-signature capability\ncould replace the per-transaction nLockTime field entirely as a valid\nsignature would now be the proof that a transaction output "),n("em",[e._v("can")]),e._v(" be\nspent.")]),e._v(" "),n("h2",{attrs:{id:"detailed-specification-detailed-specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#detailed-specification-detailed-specification"}},[e._v("#")]),e._v(" Detailed Specification {#detailed_specification}")]),e._v(" "),n("p",[e._v("Refer to the reference implementation, reproduced below, for the precise\nsemantics and detailed rationale for those semantics.")]),e._v(" "),n("p",[n("code",[e._v("case OP_NOP2:")]),n("br"),e._v(" "),n("code",[e._v("{")]),n("br"),e._v(" "),n("code",[e._v("// CHECKLOCKTIMEVERIFY")]),n("br"),e._v(" "),n("code",[e._v("//")]),n("br"),e._v(" "),n("code",[e._v("// (nLockTime -- nLockTime )")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY))")]),n("br"),e._v(" "),n("code",[e._v("break; // not enabled; treat as a NOP")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("if (stack.size() < 1)")]),n("br"),e._v(" "),n("code",[e._v("return false;")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("// Note that elsewhere numeric opcodes are limited to")]),n("br"),e._v(" "),n("code",[e._v("// operands in the range -2**31+1 to 2**31-1, however it is")]),n("br"),e._v(" "),n("code",[e._v("// legal for opcodes to produce results exceeding that")]),n("br"),e._v(" "),n("code",[e._v("// range. This limitation is implemented by CScriptNum's")]),n("br"),e._v(" "),n("code",[e._v("// default 4-byte limit.")]),n("br"),e._v(" "),n("code",[e._v("//")]),n("br"),e._v(" "),n("code",[e._v("// If we kept to that limit we'd have a year 2038 problem,")]),n("br"),e._v(" "),n("code",[e._v("// even though the nLockTime field in transactions")]),n("br"),e._v(" "),n("code",[e._v("// themselves is uint32 which only becomes meaningless")]),n("br"),e._v(" "),n("code",[e._v("// after the year 2106.")]),n("br"),e._v(" "),n("code",[e._v("//")]),n("br"),e._v(" "),n("code",[e._v("// Thus as a special case we tell CScriptNum to accept up")]),n("br"),e._v(" "),n("code",[e._v("// to 5-byte bignums, which are good until 2**32-1, the")]),n("br"),e._v(" "),n("code",[e._v("// same limit as the nLockTime field itself.")]),n("br"),e._v(" "),n("code",[e._v("const CScriptNum nLockTime(stacktop(-1), 5);")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("// In the rare event that the argument may be < 0 due to")]),n("br"),e._v(" "),n("code",[e._v("// some arithmetic being done first, you can always use")]),n("br"),e._v(" "),n("code",[e._v("// 0 MAX CHECKLOCKTIMEVERIFY.")]),n("br"),e._v(" "),n("code",[e._v("if (nLockTime < 0)")]),n("br"),e._v(" "),n("code",[e._v("return false;")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("// There are two types of nLockTime: lock-by-blockheight")]),n("br"),e._v(" "),n("code",[e._v("// and lock-by-blocktime, distinguished by whether")]),n("br"),e._v(" "),n("code",[e._v("// nLockTime < LOCKTIME_THRESHOLD.")]),n("br"),e._v(" "),n("code",[e._v("//")]),n("br"),e._v(" "),n("code",[e._v("// We want to compare apples to apples, so fail the script")]),n("br"),e._v(" "),n("code",[e._v("// unless the type of nLockTime being tested is the same as")]),n("br"),e._v(" "),n("code",[e._v("// the nLockTime in the transaction.")]),n("br"),e._v(" "),n("code",[e._v("if (!(")]),n("br"),e._v(" "),n("code",[e._v("(txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||")]),n("br"),e._v(" "),n("code",[e._v("(txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)")]),n("br"),e._v(" "),n("code",[e._v("))")]),n("br"),e._v(" "),n("code",[e._v("return false;")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("// Now that we know we're comparing apples-to-apples, the")]),n("br"),e._v(" "),n("code",[e._v("// comparison is a simple numeric one.")]),n("br"),e._v(" "),n("code",[e._v("if (nLockTime > (int64_t)txTo.nLockTime)")]),n("br"),e._v(" "),n("code",[e._v("return false;")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("// Finally the nLockTime feature can be disabled and thus")]),n("br"),e._v(" "),n("code",[e._v("// CHECKLOCKTIMEVERIFY bypassed if every txin has been")]),n("br"),e._v(" "),n("code",[e._v("// finalized by setting nSequence to maxint. The")]),n("br"),e._v(" "),n("code",[e._v("// transaction would be allowed into the blockchain, making")]),n("br"),e._v(" "),n("code",[e._v("// the opcode ineffective.")]),n("br"),e._v(" "),n("code",[e._v("//")]),n("br"),e._v(" "),n("code",[e._v("// Testing if this vin is not final is sufficient to")]),n("br"),e._v(" "),n("code",[e._v("// prevent this condition. Alternatively we could test all")]),n("br"),e._v(" "),n("code",[e._v("// inputs, but testing just this input minimizes the data")]),n("br"),e._v(" "),n("code",[e._v("// required to prove correct CHECKLOCKTIMEVERIFY execution.")]),n("br"),e._v(" "),n("code",[e._v("if (txTo.vin[nIn].IsFinal())")]),n("br"),e._v(" "),n("code",[e._v("return false;")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("break;")]),n("br"),e._v(" "),n("code"),n("br"),e._v(" "),n("code",[e._v("}")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/petertodd/bitcoin/commit/ab0f54f38e08ee1e50ff72f801680ee84d0f1bf4",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/petertodd/bitcoin/commit/ab0f54f38e08ee1e50ff72f801680ee84d0f1bf4"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"deployment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),n("p",[e._v("We reuse the double-threshold IsSuperMajority() switchover mechanism\nused in BIP66 with the same thresholds, but for nVersion = 4. The new\nrules are in effect for every block (at height H) with nVersion = 4 and\nat least 750 out of 1000 blocks preceding it (with heights H-1000..H-1)\nalso have nVersion >= 4. Furthermore, when 950 out of the 1000 blocks\npreceding a block do have nVersion >= 4, nVersion < 4 blocks become\ninvalid, and all further blocks enforce the new rules.")]),e._v(" "),n("p",[e._v("It should be noted that BIP9 involves permanently setting a high-order\nbit to 1 which results in nVersion >= all prior IsSuperMajority()\nsoft-forks and thus no bits in nVersion are permanently lost.")]),e._v(" "),n("h3",{attrs:{id:"spv-clients-spv-clients"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spv-clients-spv-clients"}},[e._v("#")]),e._v(" SPV Clients {#spv_clients}")]),e._v(" "),n("p",[e._v("While SPV clients are (currently) unable to validate blocks in general,\ntrusting miners to do validation for them, they are able to validate\nblock headers and thus can validate a subset of the deployment rules.\nSPV clients should reject nVersion < 4 blocks if 950 out of 1000\npreceding blocks have nVersion >= 4 to prevent false confirmations from\nthe remaining 5% of non-upgraded miners when the 95% threshold has been\nreached.")]),e._v(" "),n("h2",{attrs:{id:"credits"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#credits"}},[e._v("#")]),e._v(" Credits")]),e._v(" "),n("p",[e._v("Thanks goes to Gregory Maxwell for suggesting that the argument be\ncompared against the per-transaction nLockTime, rather than the current\nblock height and time.")]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("p",[e._v("PayPub")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/unsystem/paypub",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/unsystem/paypub"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Jeremy Spilman Payment Channels")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002433.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002433.html"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"implementations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#implementations"}},[e._v("#")]),e._v(" Implementations")]),e._v(" "),n("p",[e._v("Python / python-bitcoinlib")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/petertodd/checklocktimeverify-demos",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/petertodd/checklocktimeverify-demos"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("JavaScript / Node.js / bitcore")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/mruddy/bip65-demos",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/mruddy/bip65-demos"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This document is placed in the public domain.")])])}),[],!1,null,null,null);t.default=a.exports}}]);