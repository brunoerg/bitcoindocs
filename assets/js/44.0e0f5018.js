(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{418:function(e,t,i){"use strict";i.r(t);var n=i(43),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"_135"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_135"}},[e._v("#")]),e._v(" 135")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[e._v("  BIP: 135\n  Title: Generalized version bits voting\n  Author: Sancho Panza <sanch0panza@protonmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0135\n                https://bitco.in/forum/threads/bip9-generalized-version-bits-voting-bip-genvbvoting.1968/\n  Status: Rejected\n  Type: Informational\n  Created: 2017-03-29\n  License: CC0-1.0\n           GNU-All-Permissive\n  Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/013969.html\n  Replaces: 9\n")])])]),i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),i("p",[e._v("BIP9 introduced a mechanism for using the version bits to signal support\nfor backwards-compatible changes (soft-forks) using a tally over the\nprevious 2016 blocks computed at re-targeting intervals. It provided for\na fixed threshold and non-configurable lock-in interval applicable to\nall deployments on a chain.")]),e._v(" "),i("p",[e._v("This document describes a generalized signaling scheme which allows each\nsignaling bit to have its own configurable threshold, window size\n(number of blocks over which it is tallied) and a configurable lock-in\nperiod.")]),e._v(" "),i("p",[e._v("It extends the semantics of the signaling bits to cover arbitrary\nconsensus changes, referred to under the general term 'forks'. The\nsame range of version bits is used for signaling.")]),e._v(" "),i("p",[e._v("The states of the BIP9 state machine and its original parameters (name,\nbit, starttime, timeout) are retained. Some state transition conditions\nare extended by additional parameters ('threshold', 'windowsize',\n'minlockedblocks', 'minlockedtime') to provide for fine-tuning of\nthreshold and grace period.")]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("p",[e._v("The Bitcoin protocol requires a flexible scheme for finding consensus on\nprotocol changes, to ensure that it can adapt to the needs of the market\nand remain competitive as an electronic payment system.")]),e._v(" "),i("p",[e._v("While BIP9 has served the community well for previous deployments, there\nare some shortcomings in its approach:")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("it specifically applies only to backward-compatible changes")])]),e._v(" "),i("li",[i("p",[e._v("its fixed 95% threshold is not flexible enough to allow for a\n'spectrum of contentiousness' to be represented")])]),e._v(" "),i("li",[i("p",[e._v("small minorities can veto proposed changes, which can lead to\nundesirable stagnation")])])]),e._v(" "),i("p",[e._v("A generalized revision of the BIP9 specification can address these\nissues and satisfy the needs of the market for both soft and hard fork\nchanges as well as more flexible activation thresholds and upgrade\n(grace) periods.")]),e._v(" "),i("p",[e._v("The proposal should allow more freedom of choice in activation\nstrategies while remaining backward compatible with respect to existing\nBIP9-based deployments.")]),e._v(" "),i("h2",{attrs:{id:"terms-and-conventions-terms-and-conventions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#terms-and-conventions-terms-and-conventions"}},[e._v("#")]),e._v(" Terms and conventions {#terms_and_conventions}")]),e._v(" "),i("p",[e._v("The version bits used by this proposal for signaling deployment of forks\nare referred to as 'signaling bits' or shortened to 'bits' where\nunambiguous.")]),e._v(" "),i("p",[e._v("All times in this specification are in seconds since the epoch [1].\nDurations / time offsets are in seconds.")]),e._v(" "),i("p",[e._v("The term 'MTP' refers to the 'median time past' which is calculated\nas the median nTime of a block and its 10 predecessors. It is treated as\na monotonic clock defined by a chain, and evaluated on the ancestor of a\nblock, i.e.")]),e._v(" "),i("p",[e._v("MTP := "),i("strong",[e._v("GetMedianTimePast(block.parent)")])]),e._v(" "),i("p",[e._v('The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL\nNOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and\n"OPTIONAL" in this document are to be interpreted as described in RFC\n2119.')]),e._v(" "),i("h2",{attrs:{id:"specification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),i("h3",{attrs:{id:"backward-compatibility-backward-compatibility"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#backward-compatibility-backward-compatibility"}},[e._v("#")]),e._v(" Backward compatibility {#backward_compatibility}")]),e._v(" "),i("p",[e._v("This specification SHALL enable strict backward compatibility with\nexisting BIP9-based deployments through suitable parameter\nconfiguration. Any part of the specification preventing full backward\ncompatibility SHALL be considered as erroneous and amended.")]),e._v(" "),i("p",[e._v("As before, a set of configuration parameters SHALL exist for the version\nbits for each chain supported by an implementation. This permits each\nbit to be configured independently for each chain (mainnet, testnet,\netc.)")]),e._v(" "),i("h3",{attrs:{id:"signaling-bits-signaling-bits"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#signaling-bits-signaling-bits"}},[e._v("#")]),e._v(" Signaling bits {#signaling_bits}")]),e._v(" "),i("p",[e._v("The signaling bits SHALL comprise the 29 least significant bits of the\nnVersion block header field. nVersion is a 32-bit field which is treated\nas a little-endian integer.")]),e._v(" "),i("p",[e._v("Signaling bits SHALL be assigned numbers from 0..28 ranging from the\nleast significant (bit 0) to the most significant (bit 28) in the range.")]),e._v(" "),i("p",[e._v("The top 3 bits of nVersion MUST be set to 001 , yielding a range of\npossible nVersion values between [0x20000000...0x3FFFFFFF],\ninclusive.")]),e._v(" "),i("p",[e._v("If a block's nVersion does not have its top 3 bits set to 001, all its\nsignaling bits MUST be treated as if they are 0 (see also: 'Tallying'\nsection below).")]),e._v(" "),i("h3",{attrs:{id:"deployment-states-deployment-states"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#deployment-states-deployment-states"}},[e._v("#")]),e._v(" Deployment states {#deployment_states}")]),e._v(" "),i("p",[e._v("With each block and fork, we associate a deployment state. The possible\nstates are:")]),e._v(" "),i("ol",[i("li",[i("strong",[e._v("DEFINED")]),e._v(" is the first state that each fork starts out as. The\ngenesis block for any chain SHALL by definition be in this state for\neach deployment.")]),e._v(" "),i("li",[i("strong",[e._v("STARTED")]),e._v(" for blocks past the starttime.")]),e._v(" "),i("li",[i("strong",[e._v("LOCKED_IN")]),e._v(" after STARTED, if at least threshold out of windowsize\nblocks have the associated bit set in nVersion, measured at next\nheight that is evenly divisible by the windowsize.")]),e._v(" "),i("li",[i("strong",[e._v("ACTIVE")]),e._v(" for all blocks after the grace period conditions have\nbeen met.")]),e._v(" "),i("li",[i("strong",[e._v("FAILED")]),e._v(" if past the timeout time and LOCKED_IN was not reached.")])]),e._v(" "),i("p",[e._v("In accordance with BIP9, a block's state SHALL never depend on its own\nnVersion; only on that of its ancestors.")]),e._v(" "),i("h3",{attrs:{id:"fork-deployment-parameters-fork-deployment-parameters"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#fork-deployment-parameters-fork-deployment-parameters"}},[e._v("#")]),e._v(" Fork deployment parameters {#fork_deployment_parameters}")]),e._v(" "),i("p",[e._v("Each fork deployment is specified by the following per-chain parameters:")]),e._v(" "),i("ol",[i("li",[e._v("The "),i("strong",[e._v("name")]),e._v(' specifies a very brief description of the fork,\nreasonable for use as an identifier. For deployments described in a\nsingle BIP, it is recommended to use the name "bipN" where N is\nthe appropriate BIP number.')]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("bit")]),e._v(" determines which bit in the nVersion field of the block\nis to be used to signal the fork deployment. It is chosen from the\nset {0,1,2,...,28}.")]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("starttime")]),e._v(" specifies a minimum median time past (MTP) of a\nblock at which the bit gains its meaning.")]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("timeout")]),e._v(" specifies a time at which the deployment is\nconsidered failed. If the MTP of a block >= timeout and the fork\nhas not yet locked in (including this block's bit state), the\ndeployment is considered failed on all descendants of the block.")]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("windowsize")]),e._v(" specifies the number of past blocks (including\nthe block under consideration) to be taken into account for locking\nin a fork.")]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("threshold")]),e._v(" specifies a number of blocks, in the range of\n1..windowsize, which must signal for a fork in order to lock it in.\nThe support is measured when the chain height is evenly divisible by\nthe windowsize. If the windowsize is set to 2016 (as in BIP9) this\ncoincides with the 2016-block re-targeting intervals.")]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("minlockedblocks")]),e._v(" specifies a minimum number of blocks which a\nfork must remain in locked-in state before it can become active.\nBoth minlockedblocks and minlockedtime (see below) must be satisfied\nbefore a fork can become active.")]),e._v(" "),i("li",[e._v("The "),i("strong",[e._v("minlockedtime")]),e._v(" specifies a minimum grace time, an earliest\ntime after lock-in at which the fork can become active. If the MTP\nof a block >= (minlockedtime + median time of the block that locked\nin the fork), then the fork becomes activated. Both minlockedtime\nand minlockedblocks (see above) must be satisfied before a fork can\nbecome active.")])]),e._v(" "),i("h3",{attrs:{id:"tallying"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tallying"}},[e._v("#")]),e._v(" Tallying")]),e._v(" "),i("p",[e._v("If a block's nVersion does not have its top 3 bits set to 001, all its\nsignaling bits MUST be treated as if they are '0'.")]),e._v(" "),i("p",[e._v("A signaling bit value of '1' SHALL indicate support of a fork and\nSHALL count towards its tally on a chain.")]),e._v(" "),i("p",[e._v("A signaling bit value of '0' SHALL indicate absence of support of a\nfork and SHALL NOT count towards its tally on a chain.")]),e._v(" "),i("p",[e._v("The signaling bits SHALL be tallied whenever the head of the active\nchain changes (including after reorganizations).")]),e._v(" "),i("h3",{attrs:{id:"state-transitions-state-transitions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#state-transitions-state-transitions"}},[e._v("#")]),e._v(" State transitions {#state_transitions}")]),e._v(" "),i("p",[e._v("The following diagram illustrates the generalized state machine:")]),e._v(" "),i("p",[i("code",[e._v('<img src="bip-0135/bip-0135-states-small.png" align="middle">')]),e._v(" "),i("code",[e._v("</img>")]),e._v(" "),i("br"),e._v(" "),i("strong",[e._v("NOTES:")])]),e._v(" "),i("p",[e._v("The genesis block of any chain SHALL have the state DEFINED for each\ndeployment.")]),e._v(" "),i("p",[e._v("A given deployment SHALL remain in the DEFINED state until it either\npasses the starttime (and becomes STARTED) or the timeout time (and\nbecomes FAILED).")]),e._v(" "),i("p",[e._v("Once a deployment has STARTED, the signal for that deployment SHALL be\ntallied over the the past windowsize blocks whenever a new block is\nreceived on that chain.")]),e._v(" "),i("p",[e._v("A transition from the STARTED state to the LOCKED_IN state SHALL only\noccur when all of these are true:")]),e._v(" "),i("ul",[i("li",[e._v("the height of the received block is an integer multiple of the\nwindow size")]),e._v(" "),i("li",[e._v("the MTP is below the timeout time")]),e._v(" "),i("li",[e._v("at least threshold out of windowsize blocks have signaled support")])]),e._v(" "),i("p",[e._v("A similar height synchronization precondition SHALL exist for the\ntransition from LOCKED_IN to ACTIVE. These synchronization conditions\nare expressed by the \"mod(height, windowsize) = 0\" clauses in the\ndiagram, and have been been added so that backward compatibility with\nBIP9's use of the 2016-block re-targeting periods can be configured for\nexisting deployments (see above 'Optional full backward compatibility'\nsection).")]),e._v(" "),i("p",[e._v("A transition from LOCKED_IN to ACTIVE state SHALL only occur if the\nheight synchronization criterion is met and two configurable 'grace\nperiod' conditions are fulfilled:")]),e._v(" "),i("ol",[i("li",[e._v("current height MUST be at least minlockedblocks above LOCKED_IN\nheight")]),e._v(" "),i("li",[e._v("MTP must exceed LOCKED_IN time by at least minlockedtime seconds")])]),e._v(" "),i("p",[e._v("NOTE: If minlockedtime and minlockedblocks are both set to 0, then the\nfork will proceed directly to ACTIVE state once the chain height reaches\na multiple of the windowsize.")]),e._v(" "),i("p",[e._v("The ACTIVE and FAILED states are terminal; a deployment stays in these\nstates once they are reached.")]),e._v(" "),i("p",[e._v("Deployment states are maintained along block chain branches. They need\nre-computation when a reorganization happens.")]),e._v(" "),i("h3",{attrs:{id:"new-consensus-rules-new-consensus-rules"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#new-consensus-rules-new-consensus-rules"}},[e._v("#")]),e._v(" New consensus rules {#new_consensus_rules}")]),e._v(" "),i("p",[e._v("New consensus rules deployed by a fork SHALL be enforced for each block\nthat has ACTIVE state.")]),e._v(" "),i("h3",{attrs:{id:"optional-operator-notifications-optional-operator-notifications"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#optional-operator-notifications-optional-operator-notifications"}},[e._v("#")]),e._v(" Optional operator notifications {#optional_operator_notifications}")]),e._v(" "),i("p",[e._v("An implementation SHOULD notify the operator when a deployment\ntransitions to STARTED, LOCKED_IN, ACTIVE or FAILED states.")]),e._v(" "),i("p",[e._v("It is RECOMMENDED that an implementation provide finer-grained\nnotifications to the operator which allow him/her to track the measured\nsupport level for defined deployments.")]),e._v(" "),i("p",[e._v("An implementation SHOULD warn the operator if the configured (emitted)\nnVersion has been overridden to contain bits set to '1' in\ncontravention of the above non-signaling recommendations for DEFINED\nforks.")]),e._v(" "),i("p",[e._v("It is RECOMMENDED that an implementation warn the operator if no signal\nhas been received for a given deployment during a full windowsize period\nafter the deployment has STARTED. This could indicate that something may\nbe wrong with the operator's configuration that is causing them not to\nreceive the signal correctly.")]),e._v(" "),i("p",[e._v("For undefined signals, it is RECOMMENDED that implementation track these\nand alert their operators with supportive upgrade notifications, e.g.")]),e._v(" "),i("ul",[i("li",[e._v('"warning: signaling started on unknown feature on version bit X"')]),e._v(" "),i("li",[e._v('"warning: signaling on unknown feature reached X% (over last N\nblocks)"')]),e._v(" "),i("li",[e._v('"info: signaling ceased on unknown feature (over last M blocks)"')])]),e._v(" "),i("p",[e._v("Since parameters of these deployments are unknown, it is RECOMMENDED\nthat implementations allow the user to configure the emission of such\nnotifications (e.g. suitable N and M parameters in the messages above,\ne.g. a best-guess window of 100 blocks).")]),e._v(" "),i("h3",{attrs:{id:"getblocktemplate-changes-getblocktemplate-changes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#getblocktemplate-changes-getblocktemplate-changes"}},[e._v("#")]),e._v(" getblocktemplate changes {#getblocktemplate_changes}")]),e._v(" "),i("p",[e._v("The getblocktemplate features introduced in BIP9 remain in effect\nunmodified.")]),e._v(" "),i("h2",{attrs:{id:"rationale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),i("p",[e._v("The timeout into FAILED state allows eventual reuse of bits if a fork\nwas not successfully activated.")]),e._v(" "),i("p",[e._v("A fallow period at the conclusion of a fork attempt allows some\ndetection of buggy clients, and allows time for warnings and software\nupgrades for successful forks. The duration of a fallow period is not\nspecified by this proposal, although a conventional fallow period of 3\nmonths is RECOMMENDED.")]),e._v(" "),i("p",[e._v("Due to the constraints set by BIP 34, BIP 66 and BIP 65, there are only\n0x7FFFFFFB possible nVersion values available. This limits to at most 30\nindependent deployments. By restricting the top 3 bits to 001 we we are\nleft with 29 out of those for the purposes of this proposal, and support\ntwo future upgrades for different mechanisms (top bits 010 and 011).")]),e._v(" "),i("h2",{attrs:{id:"guidelines"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#guidelines"}},[e._v("#")]),e._v(" Guidelines")]),e._v(" "),i("h3",{attrs:{id:"parameter-selection-guidelines-parameter-selection-guidelines"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#parameter-selection-guidelines-parameter-selection-guidelines"}},[e._v("#")]),e._v(" Parameter selection guidelines {#parameter_selection_guidelines}")]),e._v(" "),i("p",[e._v("The following guidelines are suggested for selecting the parameters for\na fork:")]),e._v(" "),i("ol",[i("li",[i("strong",[e._v("name")]),e._v(" SHOULD be selected such that no two forks, concurrent or\notherwise, ever use the same name.")]),e._v(" "),i("li",[i("strong",[e._v("bit")]),e._v(" SHOULD be selected such that no two concurrent forks use the\nsame bit. Implementors should make an effort to consult resources\nsuch as [2] to establish whether the bit they wish to use can\nreasonably be assumed to be unclaimed by a concurrent fork, and to\nannounce their use ('claim') of a bit for a fork purpose on\nvarious project mailing lists, to reduce chance of collisions.")]),e._v(" "),i("li",[i("strong",[e._v("starttime")]),e._v(" SHOULD be set to some date in the future,\napproximately one month after a software release date which includes\nthe fork signaling. This allows for some release delays, while\npreventing triggers as a result of parties running pre-release\nsoftware.")]),e._v(" "),i("li",[i("strong",[e._v("timeout")]),e._v(" is RECOMMENDED to be 1 year (31536000 seconds) after\nstarttime.")]),e._v(" "),i("li",[i("strong",[e._v("windowsize")]),e._v(" SHOULD be set large enough to allow reception of an\nadequately precise signal. A good high-resolution value would be\n2016 blocks as used in BIP9. It is NOT RECOMMENDED to use a\nwindowsize less than 100 blocks.")]),e._v(" "),i("li",[i("strong",[e._v("threshold")]),e._v(" SHOULD be set as high as possible to ensure a smooth\nactivation based on the estimated support and the nature of the\nproposed changes. It is strongly RECOMMENDED that threshold >=\nwindowsize / 2 (rounded up) to ensure that a proposal is only\nactivated by majority support.")]),e._v(" "),i("li",[i("strong",[e._v("minlockedblocks")]),e._v(" is RECOMMENDED to be set >= windowsize, to\nensure that a full window passes in LOCKED_IN state. Lower values\nwill be ineffective as the transition from LOCKED_IN to ACTIVE is\nguarded by a synchronization based on the window size.")]),e._v(" "),i("li",[i("strong",[e._v("minlockedtime")]),e._v(" SHOULD only be set > 0 if a minimum LOCKED_IN\ntime period needs be strictly enforced. It is permissible to set\nminlockedblocks to 0 and only specify minlockedtime, however the\nsynchronization condition means the grace period can only expire\nonce the time has passed AND the chain height is a multiple of the\nwindowsize.")])]),e._v(" "),i("p",[e._v("NOTE: If minlockedtime and minlockedblocks are both set to 0, then the\nfork will proceed to ACTIVE state when the chain height reaches a\nmultiple of the windowsize.")]),e._v(" "),i("p",[e._v("A later deployment using the same bit is possible as long as the\nstarttime is after the previous fork's timeout or activation, but it is\ndiscouraged until necessary, and even then recommended to have a pause\nin between to detect buggy software.")]),e._v(" "),i("h3",{attrs:{id:"signaling-guidelines-signaling-guidelines"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#signaling-guidelines-signaling-guidelines"}},[e._v("#")]),e._v(" Signaling guidelines {#signaling_guidelines}")]),e._v(" "),i("p",[e._v("An implementation SHOULD signal '0' on a bit if one of the following\nholds true:")]),e._v(" "),i("ul",[i("li",[e._v("the deployment parameters are not DEFINED (not configured or\nexplicitly undefined)")]),e._v(" "),i("li",[e._v("the deployment is DEFINED and has not yet reached the STARTED state")]),e._v(" "),i("li",[e._v("the deployment has succeeded (it has become ACTIVE)")]),e._v(" "),i("li",[e._v("the deployment has FAILED")])]),e._v(" "),i("p",[e._v("An implementation SHOULD enable the operator to choose (override)\nwhether to signal '0' or '1' on a bit, once its deployment has at\nleast reached the STARTED state.")]),e._v(" "),i("p",[e._v("An implementation SHOULD warn the operator if the configured (emitted)\nnVersion has been overridden to contain bits set to '1' in\ncontravention of the above non-signaling recommendations.")]),e._v(" "),i("p",[e._v("A supporting miner SHOULD signal '1' on a bit for which the deployment\nis LOCKED_IN state so that uptake is visible. However, this has no\neffect on consensus rules. Once LOCKED_IN, a deployment proceeds to\nACTIVE solely based on the configured grace period parameters (see\n'Fork deployment parameters' above).")]),e._v(" "),i("p",[e._v("A miner SHOULD signal '0' on a bit if they wish to suspend signaling\nof support for a fork that is DEFINED in their software.")]),e._v(" "),i("p",[e._v("It is NOT RECOMMENDED to signal '1' for bits where the meaning is\nundefined (i.e. bits which are unclaimed by proposals).")]),e._v(" "),i("h3",{attrs:{id:"settings-for-bip9-compatibility-settings-for-bip9-compatibility"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#settings-for-bip9-compatibility-settings-for-bip9-compatibility"}},[e._v("#")]),e._v(" Settings for BIP9 compatibility {#settings_for_bip9_compatibility}")]),e._v(" "),i("p",[e._v("This section lists parameter values which can be used to effect\ncompatibility with the existing BIP9 versionbits state machine.")]),e._v(" "),i("p",[e._v("The following table describes mainnet compatibility options (95%, 2016\nblocks):")]),e._v(" "),i("hr"),e._v(" "),i("h2",{attrs:{id:"parameternamebitstarttimetimeoutwindowsizethresholdminlockedblocksminlockedtime"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#parameternamebitstarttimetimeoutwindowsizethresholdminlockedblocksminlockedtime"}},[e._v("#")]),e._v(" Parameter\nname\nbit\nstarttime\ntimeout\nwindowsize\nthreshold\nminlockedblocks\nminlockedtime")]),e._v(" "),i("p",[e._v("The following table describes testnet compatibility options (75%, 2016\nblocks):")]),e._v(" "),i("hr"),e._v(" "),i("h2",{attrs:{id:"parameternamebitstarttimetimeoutwindowsizethresholdminlockedblocksminlockedtime-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#parameternamebitstarttimetimeoutwindowsizethresholdminlockedblocksminlockedtime-2"}},[e._v("#")]),e._v(" Parameter\nname\nbit\nstarttime\ntimeout\nwindowsize\nthreshold\nminlockedblocks\nminlockedtime")]),e._v(" "),i("h2",{attrs:{id:"deployment"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),i("p",[e._v("As this BIP is not itself consensus-relevant (Information like BIP9), it\ncan be rolled out without the use of a BIP9 fork bit.")]),e._v(" "),i("p",[e._v("Backward compatibility through judicious fork configuration parameters\nshould ensure that it does not interfere with existing known\ndeployments.")]),e._v(" "),i("p",[e._v("By way of design it does not interfere with unknown (undefined)\ndeployments.")]),e._v(" "),i("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),i("p",[e._v("A working reference implementation, including tests, can be found in\nthese Pull Requests:")]),e._v(" "),i("ul",[i("li",[i("p",[i("a",{attrs:{href:"https://github.com/BitcoinUnlimited/BitcoinUnlimited/pull/458",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/BitcoinUnlimited/BitcoinUnlimited/pull/458"),i("OutboundLink")],1)])]),e._v(" "),i("li",[i("p",[i("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/pull/10437",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/pull/10437"),i("OutboundLink")],1)])])]),e._v(" "),i("p",[e._v("Existing unit tests and regression tests have been left active to\ndemonstrate backward compatibility of the default settings with BIP9.")]),e._v(" "),i("h2",{attrs:{id:"references"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),i("p",[e._v("[1]\n"),i("a",{attrs:{href:"http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16"),i("OutboundLink")],1)]),e._v(" "),i("p",[e._v("[2] "),i("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0009/assignments.mediawiki",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("List of existing BIP9 deployment\nproposals"),i("OutboundLink")],1)]),e._v(" "),i("h2",{attrs:{id:"copyright"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),i("p",[e._v("This BIP is dual-licensed under the Creative Commons CC0 1.0 Universal\nand GNU All-Permissive licenses.")])])}),[],!1,null,null,null);t.default=o.exports}}]);