(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{448:function(e,t,o){"use strict";o.r(t);var i=o(43),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"_180"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_180"}},[e._v("#")]),e._v(" 180")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[e._v("  BIP: 180\n  Layer: Peer Services\n  Title: Block size/weight fraud proof\n  Author: Luke Dashjr <luke+bip@dashjr.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0180\n  Status: Rejected\n  Type: Standards Track\n  Created: 2017-03-17\n  License: BSD-2-Clause\n")])])]),o("h2",{attrs:{id:"abstract"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),o("p",[e._v("A fraud proof that enables light clients to detect oversized (or\noverweight) blocks.")]),e._v(" "),o("h2",{attrs:{id:"copyright"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),o("p",[e._v("This BIP is licensed under the BSD 2-clause license.")]),e._v(" "),o("h2",{attrs:{id:"definitions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),o("p",[e._v("full tx size proof : SHA2 midstate and tail data proving the size of the full transaction data being hashed."),o("br"),e._v("\nsize component : Either a merkle link and height in the merkle tree thereof, or a full tx size proof."),o("br"),e._v("\nfull-size proof : The set of size components proving the lower-bound size of the block."),o("br"),e._v("\nstripped-size proof : The set of size components proving the lower-bound size of the block when stripped of segwit witness data.")]),e._v(" "),o("h2",{attrs:{id:"specification"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),o("h3",{attrs:{id:"proof-format-proof-format"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proof-format-proof-format"}},[e._v("#")]),e._v(" Proof format {#proof_format}")]),e._v(" "),o("ul",[o("li",[e._v("varint: ceil(log2(number of transactions in block))")]),e._v(" "),o("li",[e._v("varint: number of size components in stripped-size proof")]),e._v(" "),o("li",[e._v("foreach:\n"),o("ul",[o("li",[e._v("varint: ceil(log2(number of transactions represented by this\nsize-component)) + 1")]),e._v(" "),o("li",[e._v("if zero:\n"),o("ul",[o("li",[e._v("(this indicates a full tx size proof)")]),e._v(" "),o("li",[e._v("256-bit: SHA2 midstate up until just before the final SHA2\nchunk")]),e._v(" "),o("li",[e._v("varint: total size of tx")]),e._v(" "),o("li",[e._v("uint8: size of final SHA2 chunk (0-55)")]),e._v(" "),o("li",[e._v("0-55 bytes: final SHA2 chunk")])])]),e._v(" "),o("li",[e._v("if one or more:\n"),o("ul",[o("li",[e._v("(this indicates default tx size counting)")]),e._v(" "),o("li",[e._v("256-bit: SHA2 hash of merkle link")])])])])]),e._v(" "),o("li",[e._v("varint: number of size components in full-size proof (zero in case\nof a size-exceeded proof; non-zero for a weight-exceeded proof)")]),e._v(" "),o("li",[e._v("foreach: (same as with stripped-size proof)")])]),e._v(" "),o("h3",{attrs:{id:"proof-verification-proof-verification"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proof-verification-proof-verification"}},[e._v("#")]),e._v(" Proof verification {#proof_verification}")]),e._v(" "),o("p",[e._v("To verify an individual size proof:")]),e._v(" "),o("ol",[o("li",[e._v("Check that at least one size component is a full tx size proof. (At\nleast one size component MUST be a full tx size proof.)")]),e._v(" "),o("li",[e._v("Determine the lower-bound number of transactions in the block\n(lowTxCount). It is either "),o("code",[e._v("pow(ceil(log2(txcount)) - 1, 2)")]),e._v(", or the\nposition of the last full tx proof (plus one, if using 0-based\npositions). Note that the last full tx proof from *either* of the\nsize proofs (stripped-size and full-size) should be used here.")]),e._v(" "),o("li",[e._v("Calculate the lower-bound transaction-data size as the default\nsize * lowTxCount.")]),e._v(" "),o("li",[e._v("For each full tx size proof:\n"),o("ol",[o("li",[e._v("Subtract the default size it was presumed to consume, and add\nthe claimed total size of tx.")]),e._v(" "),o("li",[e._v("Take the SHA2 midstate, and update it with the final SHA2 chunk\n(which needs to be padded, including with the total tx size).\nThe final SHA2 hash is the transaction id (stripped-size proof)\nor hash (full-size proof).")])])]),e._v(" "),o("li",[e._v("For the full-size proof, replace the 60 byte default with any larger\nsizes proven from the stripped-size proof.")]),e._v(" "),o("li",[e._v("Build the merkle root, and compare it to the block header\n(stripped-size proof) or witness commitment (full-size proof).\nEnsure when building the merkle root, that there are no duplicate\nmerkle links, and each merkle link claims to represent the correct\nnumber of represented transactions.")]),e._v(" "),o("li",[e._v("Add 80 bytes, plus the size of the tx-count varint, to the\ncalculated lower-bound size.")]),e._v(" "),o("li",[e._v("The calculated size is returned as the lower-bound possible size of\nthe block.")])]),e._v(" "),o("p",[e._v("For the stripped-size proof, the default size of transactions is 60\nbytes. For the full-size proof, it is the size established by the\nstripped-size proof.")]),e._v(" "),o("p",[e._v("To verify the complete weight proof:")]),e._v(" "),o("ol",[o("li",[e._v("Verify the stripped-size proof. Save the resulting lower-bound size\n(call it lowStrippedSize).")]),e._v(" "),o("li",[e._v("Verify the full-size proof. Save the resulting lower-bound size\n(call it lowFullSize).")]),e._v(" "),o("li",[e._v("Calculate minFullSize + (minStrippedSize * 3). This is the\nlower-bound block weight.")]),e._v(" "),o("li",[e._v("Compare the lower-bound block weight to the applicable block weight\nlimit.")])]),e._v(" "),o("h3",{attrs:{id:"network-protocol-network-protocol"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#network-protocol-network-protocol"}},[e._v("#")]),e._v(" Network protocol {#network_protocol}")]),e._v(" "),o("p",[e._v("If a light client detects that one or more of its peers do not consider\nthe block it knows to have the most work as their best block, it should\ninquire with all those peers for a fraud proof by sending a new message\n"),o("code",[e._v("getfraud")]),e._v(", with a block locator (between the last common block, and the\npresumed best tip) as the sole parameter (extra parameters should be\nignored).")]),e._v(" "),o("p",[e._v("Compatible nodes will respond with a (new) "),o("code",[e._v("fraud")]),e._v(" message, which has\n2-3 parameters:")]),e._v(" "),o("ul",[o("li",[e._v("uint256: The hash of the most recent block in the locator (or a\nparent thereof) that it has checked. In the event of an invalid\nblock, this should be the exact invalid block's hash (post-invalid\nblocks should be treated as unchecked, even if the node has\nindependently checked them for some reason).")]),e._v(" "),o("li",[e._v("varint: Fraud proof type code\n"),o("ul",[o("li",[e._v("0 = Block is valid")]),e._v(" "),o("li",[e._v("1 = No fraud proof available")]),e._v(" "),o("li",[e._v("2 = Size/weight exceeded")])])]),e._v(" "),o("li",[e._v("(For type 2) the fraud proof")])]),e._v(" "),o("p",[e._v("If none of the blocks in the locator are recognised, compatible nodes\nshould send a "),o("code",[e._v("fraud")]),e._v(" message with no parameters. (To avoid this\noutcome, clients may include a known-common block in the locator.)")]),e._v(" "),o("p",[e._v("In the event that the peer claims a block earlier than the client's tip\nis valid, the light client should prepare a new locator between that\nblock and its tip, and rerequest "),o("code",[e._v("getfraud")]),e._v(" until it has determined\nwhich block the peer rejects and why.")]),e._v(" "),o("p",[e._v("Once a block is proven to be invalid, the light client should never\nconsider any blockchain including it as a candidate for the best chain.\nIt should not recheck blocks known to be invalid, nor continue proving\nit from other nodes. (To avoid doubt: the user MAY be given the\nopportunity to override any rejections, but should be warned of the\nimplications of doing so.)")]),e._v(" "),o("p",[e._v("If an invalid fraud proof is provided, the client SHOULD CONSIDER\ndisconnecting and possibly banning the node providing it. However, if\nany change has been made to the size/weight limits, that should be taken\ninto consideration (eg, if the limit increases, an innocent node may\nprove a size smaller than the limit).")]),e._v(" "),o("h2",{attrs:{id:"information"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#information"}},[e._v("#")]),e._v(" Information")]),e._v(" "),o("h3",{attrs:{id:"creation-of-proofs-creation-of-proofs"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#creation-of-proofs-creation-of-proofs"}},[e._v("#")]),e._v(" Creation of proofs {#creation_of_proofs}")]),e._v(" "),o("p",[e._v("Proofs should ideally use the smallest amount of data required to prove\nexcess of the limit. The most obvious mechanism in doing so, would be to\ninclude full tx size proofs for the largest transactions until the limit\nis exceeded. However, in some cases, a smaller size may be accomplished\nby collapsing more merkle links.")]),e._v(" "),o("p",[e._v("Because optimisation of proof size may be complicated, nodes are not\nrequired to implement it in any particular manner, so long as the proofs\nmeet the requirements given above in "),o("a",{attrs:{href:"#proof-verification",title:"wikilink"}},[e._v("Proof\nverification")]),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"motivation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),o("p",[e._v('Recently, there have been proposals for hardforks to increase the block\nsize limit. While no consensus has been reached, proponents of these\nideas often threaten and attempt to have miners force them through\nanyway. As things presently are, light clients cannot detect invalid\nblocks at all, and could be fooled into accepting an invalid chain\ncreated in such a manner. By supporting block size fraud proofs, light\nclients can protect their users from this form of unconsensual\n"hardfork" attempt.')]),e._v(" "),o("h2",{attrs:{id:"rationale"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),o("p",[e._v("Why must a full tx size proof be included?")]),e._v(" "),o("ul",[o("li",[e._v("This is necessary to establish that the claimed block transaction\ncount is not inflated. Otherwise, a prover could claim any number of\nrepresented transactions for merkle links, and rely on the default\nsize alone to exceed the limit.")])]),e._v(" "),o("p",[e._v("How does the full tx size proof actually prove the size?")]),e._v(" "),o("ul",[o("li",[e._v("The first step of SHA2 hashing is to transform the input data into\nchunks (per "),o("a",{attrs:{href:"https://tools.ietf.org/html/rfc4634#section-4.1",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC\n4634"),o("OutboundLink")],1),e._v("). The final\nchunk is required to include the absolute length of the input data\nat the end of the final chunk. Therefore, by committing to the\nmidstate prior to the final chunk, and replaying only the final\nchunk, we can confirm that the claimed size matches the full\ntransaction data being hashed.")])]),e._v(" "),o("p",[e._v("How does this prove the block weight?")]),e._v(" "),o("ul",[o("li",[e._v("The block weight defined by "),o("a",{attrs:{href:"bip-0141.mediawiki",title:"wikilink"}},[e._v("BIP 141")]),e._v("\nis the size of the block stripped of its segwit signatures times 3,\nplus the full size of the block. By proving lower-bound sizes of\nboth the stripped block and the full block, a lower-bound weight can\nalso be calculated.")])]),e._v(" "),o("p",[e._v("Why is the number of transactions in the block represented as a log2?")]),e._v(" "),o("ul",[o("li",[e._v("To avoid attacks that rely on fooling clients by claiming an amount\nthey cannot verify.")])]),e._v(" "),o("p",[e._v("Why does it matter if a full tx size proof is on the right side of a\nduplicate merkle link?")]),e._v(" "),o("ul",[o("li",[e._v("We assume full tx size proofs show the number of transactions in the\nblock. This assumption doesn't hold if the proof is provided on the\nright-hand side of duplicate links.")])]),e._v(" "),o("p",[e._v("Why a fraud proof only for oversized/overweight blocks?")]),e._v(" "),o("ul",[o("li",[e._v("While it is currently believed to be impossible to prove all invalid\n(or rather, won't-be-part-of-the-main-chain) blocks, there are\nregularly active proposals of miners attacking with simply oversized\nblocks in an attempt to force a hardfork. This specific attack can\nbe proven, and reliably so, since the proof cannot be broken without\nalso breaking the attempted hardfork at the same time.")])]),e._v(" "),o("h2",{attrs:{id:"backwards-compatibility-backwards-compatibility"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility-backwards-compatibility"}},[e._v("#")]),e._v(" Backwards compatibility {#backwards_compatibility}")]),e._v(" "),o("p",[e._v("These fraud proofs protect only clients which use them. In non-attack\nscenarios, they are unnecessary and clients supporting them will\notherwise behave as any other.")]),e._v(" "),o("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),o("p",[e._v("TODO")])])}),[],!1,null,null,null);t.default=n.exports}}]);