(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{493:function(e,t,a){"use strict";a.r(t);var n=a(43),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_85"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_85"}},[e._v("#")]),e._v(" 85")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("  BIP: 85\n  Layer: Applications\n  Title: Deterministic Entropy From BIP32 Keychains\n  Author: Ethan Kosakovsky <ethankosakovsky@protonmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0085\n  Status: Draft\n  Type: Informational\n  Created: 2020-03-20\n  License: BSD-2-Clause\n           OPL\n")])])]),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[a("em",[e._v('"One Seed to rule them all,')]),e._v(" "),a("em",[e._v("One Key to find them,")]),e._v(" "),a("em",[e._v("One Path to\nbring them all,")]),e._v(" "),a("em",[e._v('And in cryptography bind them."')])]),e._v(" "),a("p",[e._v("It is not possible to maintain one single (mnemonic) seed backup for all\nkeychains used across various wallets because there are a variety of\nincompatible standards. Sharing of seeds across multiple wallets is not\ndesirable for security reasons. Physical storage of multiple seeds is\ndifficult depending on the security and redundancy required.")]),e._v(" "),a("p",[e._v("As HD keychains are essentially derived from initial entropy, this\nproposal provides a way to derive entropy from the keychain which can be\nfed into whatever method a wallet uses to derive the initial mnemonic\nseed or root key.")]),e._v(" "),a("h2",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),a("p",[e._v("The terminology related to keychains used in the wild varies widely, for\nexample `seed` has various different meanings. In this document we\ndefine the terms")]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("BIP32 root key")]),e._v(" is the root extended private key that is\nrepresented as the top root of the keychain in BIP32.")]),e._v(" "),a("li",[a("strong",[e._v("BIP39 mnemonic")]),e._v(" is the mnemonic phrase that is calculated from\nthe entropy used before hashing of the mnemonic in BIP39.")]),e._v(" "),a("li",[a("strong",[e._v("BIP39 seed")]),e._v(" is the result of hashing the BIP39 mnemonic seed.")])]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v('Most wallets implement BIP32 which defines how a BIP32 root key can be\nused to derive keychains. As a consequence, a backup of just the BIP32\nroot key is sufficient to include all keys derived from it. BIP32 does\nnot have a human friendly serialization of the BIP32 root key (or BIP32\nextended keys in general) which makes paper backups or manually\nrestoring the key more error-prone. BIP39 was designed solve this\nproblem but rather than serialize the BIP32 root key, it takes some\nentropy, encoded to a "seed mnemonic", which is then hashed to derive\nthe BIP39 seed which can be turned into the BIP32 root key. Saving the\nBIP39 mnemonic is enough to reconstruct the entire BIP32 keychain, but a\nBIP32 root key cannot be reversed back to the BIP39 mnemonic.')]),e._v(" "),a("p",[e._v("Most wallets implement BIP39, so on initialization or restoration, the\nuser must interact with a BIP39 mnemonic. Most wallets do not support of\nBIP32 extended private keys so each wallet must either share the same\nBIP39 mnemonic, or have a separate BIP39 mnemonic entirely. Neither\nscenarios are particularly satisfactory for security reasons. For\nexample, some wallets may be inherently less secure like hot wallets on\nsmartphones, Join Market servers, Lightning Network nodes. Having\nmultiple seeds is far from desirable especially for those who rely on\nsplit key or redundancy backups in different geological locations.\nAdding is necessarily difficult and may result in users being more lazy\nwith subsequent keys, such that compromises security or leads to key\nloss.")]),e._v(" "),a("p",[e._v("There is added complication with wallets that implement other standards,\nor no standards at all. Bitcoin Core wallet uses a WIF as the "),a("em",[e._v("hdseed")]),e._v(",\nand yet other wallets use different mnemonic schemes like Electrum to\nderive the BIP32 root key. Other cryptocurrencies like Monero also use a\ndifferent mnemonic scheme entirely.")]),e._v(" "),a("p",[e._v('Ultimately, all of the mnemonic/seed schemes start with some "initial\nentropy" to derive a mnemonic/seed, and then process the mnemonic into\na BIP32 key, or private key. We can use BIP32 itself to derive the\n"initial entropy" to then recreate the same mnemonic or seed according\nthe specific application standard of the target wallet. We can use a\nBIP44 like categorization to ensure unitform derivation according to the\ntarget application type.')]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("We assume a single BIP32 master root key. This specification is not\nconcerned with how this was derived (e.g. directly or via a mnemonic\nscheme such as BIP39).")]),e._v(" "),a("p",[e._v('For each application that requires its own wallet, a unique private key\nis derived from the BIP32 master root key using fully hardened\nderivation path. The resulting private key (k) is then processed with\nHMAC-SHA512, where the key is "bip-entropy-from-k", and the message\npayload is the private key k:\n'),a("code",[e._v('HMAC-SHA512(key="bip-entropy-from-k", msg=k)')]),e._v(". The result produces 512\nbits of entropy. Each application SHOULD use up to the required number\nof bits necessary for their operation truncating the rest")]),e._v(" "),a("p",[e._v("The HMAC-SHA512 function is specified in "),a("a",{attrs:{href:"http://tools.ietf.org/html/rfc4231",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC\n4231"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"test-vectors-test-vectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-vectors-test-vectors"}},[e._v("#")]),e._v(" Test vectors {#test_vectors}")]),e._v(" "),a("h4",{attrs:{id:"test-case-1-test-case-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-case-1-test-case-1"}},[e._v("#")]),e._v(" Test case 1 {#test_case_1}")]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/0'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT:")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED\nKEY=cca20ccb0e9a90feb0912870c3323b24874b0ca3d8018c4b96d0b97c0e82ded0")]),e._v(" "),a("li",[e._v("DERIVED\nENTROPY=efecfbccffea313214232d29e71563d941229afb4338c21f9517c41aaa0d16f00b83d2a09ef747e7a64e8e2bd5a14869e693da66ce94ac2da570ab7ee48618f7")])]),e._v(" "),a("h4",{attrs:{id:"test-case-2-test-case-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-case-2-test-case-2"}},[e._v("#")]),e._v(" Test case 2 {#test_case_2}")]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/0'/1'")])]),e._v(" "),a("p",[e._v("OUTPUT")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED\nKEY=503776919131758bb7de7beb6c0ae24894f4ec042c26032890c29359216e21ba")]),e._v(" "),a("li",[e._v("DERIVED\nENTROPY=70c6e3e8ebee8dc4c0dbba66076819bb8c09672527c4277ca8729532ad711872218f826919f6b67218adde99018a6df9095ab2b58d803b5b93ec9802085a690e")])]),e._v(" "),a("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference Implementation {#reference_implementation}")]),e._v(" "),a("p",[e._v("Python library implementation:\n"),a("a",{attrs:{href:"https://github.com/ethankosakovsky/bipentropy",target:"_blank",rel:"noopener noreferrer"}},[e._v("python-bipentropy"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"other-implementations-other-implementations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-implementations-other-implementations"}},[e._v("#")]),e._v(" Other Implementations {#other_implementations}")]),e._v(" "),a("p",[e._v("Coldcard Firmware: "),a("a",{attrs:{href:"https://github.com/Coldcard/firmware/pull/39",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"applications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applications"}},[e._v("#")]),e._v(" Applications")]),e._v(" "),a("p",[e._v("Application number define how entropy will be used post processing. Some\nbasic examples follow:")]),e._v(" "),a("p",[e._v("Derivation path uses the format "),a("code",[e._v("m/83696968/' + /app_no' + /index'")]),e._v("\nwhere "),a("em",[e._v("app_no")]),e._v(" path for the application, and `index` in the index.")]),e._v(" "),a("h3",{attrs:{id:"bip39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bip39"}},[e._v("#")]),e._v(" BIP39")]),e._v(" "),a("p",[e._v("Application number: 39'")]),e._v(" "),a("p",[e._v("Truncate trailing (least significant) bytes of the entropy to the number\nof bits required to map to the relevant word length 128 bits for 12\nwords, 256 bits for 24 words.")]),e._v(" "),a("p",[e._v("The derivation path format is:\n"),a("code",[e._v("m/83696968'/39'/{language}'/{words}'/{index}'")])]),e._v(" "),a("p",[e._v("Example a BIP39 mnemonic with 12 English words (first index) would have\nthe path "),a("code",[e._v("m/83696968'/39'/0'/12'/0'")]),e._v(" the next key would be\n"),a("code",[e._v("m/83696968'/39'/0'/12'/1'")]),e._v(" etc.")]),e._v(" "),a("p",[e._v("Language Table")]),e._v(" "),a("p",[e._v("Wordlist                Code")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("English                 0'\nJapanese                1'\nKorean                  2'\nSpanish                 3'\nChinese (Simplified)    4'\nChinese (Traditional)   5'\nFrench                  6'\nItalian                 7'\nCzech                   8'")]),e._v(" "),a("p",[e._v("Words Table")]),e._v(" "),a("p",[e._v("Words      Entropy    Code")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("12 words   128 bits   12'\n18 words   192 bits   18'\n24 words   256 bits   24'")]),e._v(" "),a("h4",{attrs:{id:"_12-english-words-english-words"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-english-words-english-words"}},[e._v("#")]),e._v(" 12 English words {#english_words}")]),e._v(" "),a("p",[e._v("BIP39 English 12 word mnemonic seed")]),e._v(" "),a("p",[e._v("128 bits of entropy as input to BIP39 to derive 12 word mnemonic")]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/39'/0'/12'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT:")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED ENTROPY=6250b68daf746d12a24d58b4787a714b")]),e._v(" "),a("li",[e._v("DERIVED BIP39 MNEMONIC=girl mad pet galaxy egg matter matrix prison\nrefuse sense ordinary nose")])]),e._v(" "),a("h4",{attrs:{id:"_18-english-words-english-words-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-english-words-english-words-1"}},[e._v("#")]),e._v(" 18 English words {#english_words_1}")]),e._v(" "),a("p",[e._v("BIP39 English 18 word mnemonic seed")]),e._v(" "),a("p",[e._v("196 bits of entropy as input to BIP39 to derive 18 word mnemonic")]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/39'/0'/18'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT:")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED ENTROPY=938033ed8b12698449d4bbca3c853c66b293ea1b1ce9d9dc")]),e._v(" "),a("li",[e._v("DERIVED BIP39 MNEMONIC=near account window bike charge season chef\nnumber sketch tomorrow excuse sniff circle vital hockey outdoor\nsupply token")])]),e._v(" "),a("h4",{attrs:{id:"_24-english-words-english-words-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-english-words-english-words-2"}},[e._v("#")]),e._v(" 24 English words {#english_words_2}")]),e._v(" "),a("p",[e._v("Derives 24 word BIP39 mnemonic seed")]),e._v(" "),a("p",[e._v("256 bits of entropy as input to BIP39 to derive 24 word mnemonic")]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/39'/0'/24'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT:")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED\nENTROPY=ae131e2312cdc61331542efe0d1077bac5ea803adf24b313a4f0e48e9c51f37f")]),e._v(" "),a("li",[e._v("DERIVED BIP39 MNEMONIC=puppy ocean match cereal symbol another shed\nmagic wrap hammer bulb intact gadget divorce twin tonight reason\noutdoor destroy simple truth cigar social volcano")])]),e._v(" "),a("h3",{attrs:{id:"hd-seed-wif-hd-seed-wif"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hd-seed-wif-hd-seed-wif"}},[e._v("#")]),e._v(" HD-Seed WIF {#hd_seed_wif}")]),e._v(" "),a("p",[e._v("Application number: 2'")]),e._v(" "),a("p",[e._v("Uses 256 bits[1] of entropy as the secret exponent to derive a private\nkey and encode as a compressed WIF which will be used as the hdseed for\nBitcoin Core wallets.")]),e._v(" "),a("p",[e._v("Path format is "),a("code",[e._v("m/83696968'/2'/{index}'")])]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/2'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED\nENTROPY=7040bb53104f27367f317558e78a994ada7296c6fde36a364e5baf206e502bb1")]),e._v(" "),a("li",[e._v("DERIVED WIF=Kzyv4uF39d4Jrw2W7UryTHwZr1zQVNk4dAFyqE6BuMrMh1Za7uhp")])]),e._v(" "),a("h3",{attrs:{id:"xprv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xprv"}},[e._v("#")]),e._v(" XPRV")]),e._v(" "),a("p",[e._v("Application number: 32'")]),e._v(" "),a("p",[e._v("Taking 64 bytes of the HMAC digest, the first 32 bytes are the chain\ncode, and second 32 bytes[1] are the private key for BIP32 XPRV value.\nChild number, depth, and parent fingerprint are forced to zero.")]),e._v(" "),a("p",[e._v("Path format is "),a("code",[e._v("m/83696968'/32'/{index}'")])]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/32'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED\nENTROPY=ead0b33988a616cf6a497f1c169d9e92562604e38305ccd3fc96f2252c177682")]),e._v(" "),a("li",[e._v("DERIVED\nWIF=xprv9s21ZrQH143K2srSbCSg4m4kLvPMzcWydgmKEnMmoZUurYuBuYG46c6P71UGXMzmriLzCCBvKQWBUv3vPB3m1SATMhp3uEjXHJ42jFg7myX")])]),e._v(" "),a("h3",{attrs:{id:"hex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hex"}},[e._v("#")]),e._v(" HEX")]),e._v(" "),a("p",[e._v("Application number: 128169'")]),e._v(" "),a("p",[e._v("The derivation path format is:\n"),a("code",[e._v("m/83696968'/128169'/{num_bytes}'/{index}'")])]),e._v(" "),a("p",[e._v("`16 <= num_bytes <= 64`")]),e._v(" "),a("p",[e._v("Truncate trailing (least significant) bytes of the entropy after\n`num_bytes`.")]),e._v(" "),a("p",[e._v("INPUT:")]),e._v(" "),a("ul",[a("li",[e._v("MASTER BIP32 ROOT KEY:\nxprv9s21ZrQH143K2LBWUUQRFXhucrQqBpKdRRxNVq2zBqsx8HVqFk2uYo8kmbaLLHRdqtQpUm98uKfu3vca1LqdGhUtyoFnCNkfmXRyPXLjbKb")]),e._v(" "),a("li",[e._v("PATH: m/83696968'/128169'/64'/0'")])]),e._v(" "),a("p",[e._v("OUTPUT")]),e._v(" "),a("ul",[a("li",[e._v("DERIVED\nENTROPY=492db4698cf3b73a5a24998aa3e9d7fa96275d85724a91e71aa2d645442f878555d078fd1f1f67e368976f04137b1f7a0d19232136ca50c44614af72b5582a5c")])]),e._v(" "),a("h2",{attrs:{id:"backwards-compatibility-backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility-backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility {#backwards_compatibility}")]),e._v(" "),a("p",[e._v("This specification is not backwards compatible with any other existing\nspecification.")]),e._v(" "),a("p",[e._v("This specification relies on BIP32 but is agnostic to how the BIP32 root\nkey is derived, as such this standard is allows it to derive wallets\nwith initialization schemes like BIP39 or Electrum wallet style\nmnemonics.")]),e._v(" "),a("h2",{attrs:{id:"discussion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#discussion"}},[e._v("#")]),e._v(" Discussion")]),e._v(" "),a("p",[e._v("The reason for running the derived key through HMAC-SHA512 and\ntruncating the result as necessary is to prevent leakage of the parent\ntree should the derived key (k) be compromized. While the specification\nrequires the use of hardended key derivation which would prevent this,\nwe cannot enforce hardened derivation, so this method ensures the\nderived entropy is hardened. Also from a semantic point of view, since\nthe purpose is to derive entropy and not a private key, we are required\nto transform the child key. This acts in an abundance of caution to ward\noff unwanted side effects should k be used for a dual purpose, including\nas a nonce hash(k), where undesirable and unforeseen interactions could\noccur.")]),e._v(" "),a("h2",{attrs:{id:"acknowledgements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[e._v("#")]),e._v(" Acknowledgements")]),e._v(" "),a("p",[e._v("Many thanks to Peter Gray and Christopher Allen for their input, and to\nPeter for suggesting extra application use cases.")]),e._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("p",[e._v("BIP32, BIP39")]),e._v(" "),a("h2",{attrs:{id:"footnotes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#footnotes"}},[e._v("#")]),e._v(" Footnotes")]),e._v(" "),a("p",[e._v("[1] There is a very small chance that you'll make an invalid key that\nis zero or bigger than the order of the curve. If this occurs, software\nshould hard fail (forcing users should iterate to the next index).")]),e._v(" "),a("p",[e._v("From BIP32: > In case parse~256~(I~L~) is 0 or ≥ n, the resulting key\nis invalid, and one should proceed with the next value for i. (Note:\nthis has probability lower than 1 in 2^127^.)")]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("This BIP is dual-licensed under the Open Publication License and BSD\n2-clause license.")])])}),[],!1,null,null,null);t.default=s.exports}}]);