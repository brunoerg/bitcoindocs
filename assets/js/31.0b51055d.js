(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{409:function(e,t,n){"use strict";n.r(t);var a=n(43),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_120"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_120"}},[e._v("#")]),e._v(" 120")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 120\n  Layer: Applications\n  Title: Proof of Payment\n  Author: Kalle Rosenbaum <kalle@rosenbaum.se>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0120\n  Status: Withdrawn\n  Type: Standards Track\n  Created: 2015-07-28\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This BIP describes a system called Proof of Payment, PoP. It is used to\nprove that a wallet has the credentials that were used to sign a\npreviously generated transaction. Or simply put, it lets you prove that\nyou have made a payment.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("There are several scenarios in which it would be useful to prove that\nyou have paid for something. For example:")]),e._v(" "),n("ul",[n("li",[e._v("A pre-paid hotel room where your PoP functions as a key to the door.")]),e._v(" "),n("li",[e._v("An online video rental service where you pay for a video and watch\nit on any device.")]),e._v(" "),n("li",[e._v("An ad-sign where you pay in advance for e.g. 2 weeks exclusivity.\nDuring this period you can upload new content to the sign whenever\nyou like using PoP.")]),e._v(" "),n("li",[e._v("Log in to a pay site using a PoP.")]),e._v(" "),n("li",[e._v("A parking lot you pay for monthly and the car authenticates itself\nusing PoP.")]),e._v(" "),n("li",[e._v("A lottery where all participants pay to the same address, and the\nwinner is selected among the transactions to that address. You\nexchange the prize for a PoP for the winning transaction.")])]),e._v(" "),n("p",[e._v("With Proof of Payment, these use cases can be achieved without any\npersonal information (user name, password, e-mail address, etc) being\ninvolved.")]),e._v(" "),n("h2",{attrs:{id:"rationale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),n("p",[e._v("Desirable properties:")]),e._v(" "),n("ol",[n("li",[e._v("A PoP should be generated on demand.")]),e._v(" "),n("li",[e._v("It should only be usable once to avoid issues due to theft.")]),e._v(" "),n("li",[e._v("It should be able to create a PoP for any payment, regardless of\nscript type (P2SH, P2PKH, etc.).")]),e._v(" "),n("li",[e._v("It should prove that you have enough credentials to unlock all the\ninputs of the proven transaction.")]),e._v(" "),n("li",[e._v("It should be easy to implement by wallets and servers to ease\nadoption.")])]),e._v(" "),n("p",[e._v("Current methods of proving a payment:")]),e._v(" "),n("ul",[n("li",[e._v("In BIP0070, the PaymentRequest together with the transactions\nfulfilling the request makes some sort of proof. However, it does\nnot meet 1, 2 or 4 and it obviously only meets 3 if the payment is\nmade through BIP0070. Also, there's no standard way to\nrequest/provide the proof. If standardized it would probably meet 5.")]),e._v(" "),n("li",[e._v("Signing messages, chosen by the server, with the private keys used\nto sign the transaction. This could meet 1 and 2 but probably not 3.\nThis is not standardized either. 4 Could be met if designed so.")])]),e._v(" "),n("p",[e._v("If an input script type is P2SH, any satisfying script should do, just\nas if it was a payment. For M-of-N multisig scripts, that would mean\nthat any set of M keys should be sufficient, not necessarily the same\nset of M keys that signed the transaction. This is important because\nstrictly demanding the same set of M keys would defeat the purpose of a\nmultisig address.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("h3",{attrs:{id:"data-structure-data-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data-structure-data-structure"}},[e._v("#")]),e._v(" Data structure {#data_structure}")]),e._v(" "),n("p",[e._v("A proof of payment for a transaction T, here called PoP(T), is used to\nprove that one has ownership of the credentials needed to unlock all the\ninputs of T. It has the exact same structure as a bitcoin transaction\nwith the same inputs as T and in the same order as in T, but with each\nsequence number set to 0. There is exactly one output, here called the\npop output, with value 0. The pop output must have the following format:")]),e._v(" "),n("p",[n("code",[e._v("OP_RETURNÂ  <version>")]),e._v(" "),n("code",[e._v("<txid>")]),e._v(" "),n("code",[e._v("<nonce>")])]),e._v(" "),n("p",[e._v("Field         Size [B]   Description")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("<version>   2            Version, little endian, currently 0x01 0x00\n<txid>      32           The transaction to prove\n<nonce>     6            Random data")]),e._v(" "),n("p",[e._v("The lock_time of the PoP must be set to 499999999 to prevent the PoP\nfrom being included in a block, should it appear on the bitcoin p2p\nnetwork. This is also the reason for setting the sequence numbers to 0,\nsince sequence number of ffffffff would make lock_time ineffective. This\nspecification demands that all input sequence numbers are 0, not just\none of them, which would be sufficient to make lock_time effective. This\nis for simplicity reasons.")]),e._v(" "),n("p",[e._v("An illustration of the PoP data structure and its original payment is\nshown below.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  T\n +------------------------------------------------+\n |inputs                | outputs                 |\n |       Value,Sequence | Value,Script            |\n +------------------------------------------------+\n |input0 1,ffffffff     | 0,pay to A              |\n |input1 3,ffffffff     | 2,OP_RETURN <some data> |\n |input2 4,ffffffff     | 1,pay to B              |\n |                      | 4,pay to C              |\n +------------------------------------------------+\n \n  PoP(T)\n +-------------------------------------------------------------+\n | inputs               | outputs                              |\n |       Value,Sequence | Value,Script                         |\n +-------------------------------------------------------------+\n |input0 1,00000000     | 0,OP_RETURN <version> <txid> <nonce> |\n |input1 3,00000000     |                                      |\n |input2 4,00000000     |                                      |\n +-------------------------------------------------------------+\n | lock_time=499999999                                         |\n +-------------------------------------------------------------+\n")])])]),n("p",[e._v("The PoP is signed using the same signing process that is used for\nbitcoin transactions.")]),e._v(" "),n("p",[e._v("The purpose of the nonce is to make it harder to use a stolen PoP; Once\nthe PoP has reached the server, that PoP is useless since the server\nwill generate a new nonce for every PoP request.")]),e._v(" "),n("h3",{attrs:{id:"process"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process"}},[e._v("#")]),e._v(" Process")]),e._v(" "),n("ol",[n("li",[e._v("A proof of payment request is sent from the server to the wallet.\nThe PoP request contains:\n"),n("ol",[n("li",[e._v("a random nonce")]),e._v(" "),n("li",[e._v("a destination where to send the PoP, for example a https URL")]),e._v(" "),n("li",[e._v("data hinting the wallet which transaction to create a proof for.\nFor example:\n"),n("ul",[n("li",[e._v("txid, if known by the server")]),e._v(" "),n("li",[e._v("PaymentRequest.PaymentDetails.merchant_data (in case of a\nBIP0070 payment)")]),e._v(" "),n("li",[e._v("amount, label, message or other information from a BIP0021\nURI")])])])])]),e._v(" "),n("li",[e._v("The wallet identifies a transaction T, if possible. Otherwise it\nasks the user to select among the ones that match the hints in\n1.iii.")]),e._v(" "),n("li",[e._v("The wallet creates an unsigned PoP (UPoP) for T, and asks the user\nto sign it.")]),e._v(" "),n("li",[e._v("The user confirms")]),e._v(" "),n("li",[e._v("The UPoP(T) is signed by the wallet, creating PoP(T).")]),e._v(" "),n("li",[e._v("The PoP is sent to the destination in 1.ii.")]),e._v(" "),n("li",[e._v('The server receiving the PoP validates it and responds with "valid"\nor "invalid".')]),e._v(" "),n("li",[e._v("The wallet displays the response in some way to the user.")])]),e._v(" "),n("p",[n("strong",[e._v("Remarks:")])]),e._v(" "),n("ul",[n("li",[e._v("The method of transferring the PoP request at step 1 is not\nspecified here. Instead that is specified in separate\nspecifications, see BIP0121.")]),e._v(" "),n("li",[e._v("The nonce must be randomly generated by the server for every new PoP\nrequest.")])]),e._v(" "),n("h3",{attrs:{id:"validating-a-pop-validating-a-pop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#validating-a-pop-validating-a-pop"}},[e._v("#")]),e._v(" Validating a PoP {#validating_a_pop}")]),e._v(" "),n("p",[e._v('The server needs to validate the PoP and reply with "valid" or\n"invalid". That process is outlined below. If any step fails, the\nvalidation is aborted and "invalid" is returned:')]),e._v(" "),n("ol",[n("li",[e._v("Check the format of the PoP. It must pass normal transaction checks,\nexcept that the inputs may already be spent.")]),e._v(" "),n("li",[e._v("Check that lock_time is 499999999.")]),e._v(" "),n("li",[e._v("Check that there is exactly one output. This output must have value\n0 and conform to the OP_RETURN output format outlined above.")]),e._v(" "),n("li",[e._v("Check that the nonce is the same as the one requested.")]),e._v(" "),n("li",[e._v("Check that the inputs of the PoP are exactly the same as in\ntransaction T, except that the sequence numbers must all be 0. The\nordering of the inputs must also be the same as in T.")]),e._v(" "),n("li",[e._v("Run the scripts of all the inputs. All scripts must return true.")]),e._v(" "),n("li",[e._v("Check that the txid in the PoP output is the transaction you\nactually want proof for. If you don't know exactly what transaction\nyou want proof for, check that the transaction actually pays for the\nproduct/service you deliver.")]),e._v(" "),n("li",[e._v('Return "valid".')])]),e._v(" "),n("h2",{attrs:{id:"security-considerations-security-considerations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations-security-considerations"}},[e._v("#")]),e._v(" Security considerations {#security_considerations}")]),e._v(" "),n("ul",[n("li",[e._v("Someone can intercept the PoP-request and change any parameter in\nit. These can be mitigated by using secure connections. Examples of\ntampered parameters:\n"),n("ul",[n("li",[e._v("Pop destination - Stealing your PoP.")]),e._v(" "),n("li",[e._v("label - Trick you to sign an unintended pop or set a label that\nyour wallet doesn't have any record for, resulting in a broken\nservice. Always check the PoP before signing.")]),e._v(" "),n("li",[e._v("nonce - Your pop will not validate on server.")])])]),e._v(" "),n("li",[e._v("Someone can steal a PoP, for example by tampering with the PoP\nrequest, and try to use the service hoping to get a matching nonce.\nProbability per try: 1/(2^48). The server should have a mechanism\nfor detecting a brute force attack of this kind, or at least slow\ndown the process by delaying the PoP request by some 100 ms or so.")]),e._v(" "),n("li",[e._v("Even if a wallet has no funds it might still be valuable as a\ngenerator for PoPs. This makes it important to keep the security of\nthe wallet after it has been emptied.")]),e._v(" "),n("li",[e._v("Transaction malleability may cause the server to have a different\ntransaction id for a payment than the client's wallet. In that case\nthe wallet will not be able to prove the transaction to the server.\nWallets should not rely on the transaction id of the outgoing\ntransaction. Instead it should listen for the transaction on the\nnetwork and put that in its list of transactions.")])]),e._v(" "),n("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/kallerosenbaum/poppoc",target:"_blank",rel:"noopener noreferrer"}},[e._v("PoP Demo server on GitHub"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/kallerosenbaum/wallet",target:"_blank",rel:"noopener noreferrer"}},[e._v("PoP-enabled Mycelium fork on\nGitHub"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP0021"),n("OutboundLink")],1),e._v(":\nURI Scheme")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP0070"),n("OutboundLink")],1),e._v(":\nPayment Protocol")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0121.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP0121"),n("OutboundLink")],1),e._v(":\nProof of Payment URI scheme")])])}),[],!1,null,null,null);t.default=o.exports}}]);