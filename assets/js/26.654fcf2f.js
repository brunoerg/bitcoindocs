(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{400:function(e,t,i){"use strict";i.r(t);var n=i(43),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"_115"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_115"}},[e._v("#")]),e._v(" 115")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[e._v("  BIP: 115\n  Layer: Consensus (soft fork)\n  Title: Generic anti-replay protection using Script\n  Author: Luke Dashjr <luke+bip@dashjr.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0115\n  Status: Rejected\n  Type: Standards Track\n  Created: 2016-09-23\n  License: BSD-2-Clause\n")])])]),i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),i("p",[e._v("This BIP describes a new opcode ("),i("code",[e._v("OP_CHECKBLOCKATHEIGHT")]),e._v(") for the\nBitcoin scripting system that allows construction of transactions which\nare valid only on specific blockchains.")]),e._v(" "),i("h2",{attrs:{id:"copyright"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),i("p",[e._v("This BIP is licensed under the BSD 2-clause license.")]),e._v(" "),i("h2",{attrs:{id:"specification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),i("p",[i("code",[e._v("OP_CHECKBLOCKATHEIGHT")]),e._v(" redefines the existing "),i("code",[e._v("OP_NOP5")]),e._v(" opcode.")]),e._v(" "),i("p",[e._v("When this opcode is executed:")]),e._v(" "),i("ul",[i("li",[e._v("If the stack has fewer than 2 elements, the script fails.")]),e._v(" "),i("li",[e._v("If the top item on the stack cannot be interpreted as a\nminimal-length 32-bit CScriptNum, the script fails.")]),e._v(" "),i("li",[e._v("The top item on the stack is interpreted as a block height\n(ParamHeight).")]),e._v(" "),i("li",[e._v("If the blockchain (in the context of the execution) does not have\nParamHeight blocks prior to the one including this transaction, the\nscript fails (this failure must not be cached across blocks; it is\nequivalent to non-final status).")]),e._v(" "),i("li",[e._v("If ParamHeight specifies a block deeper than 52596 blocks in the\nchain (including negative values), the opcode completes successfully\nand script continues as normal.")]),e._v(" "),i("li",[e._v("The second-to-top item on the stack is interpreted as a block hash\n(ParamBlockHash).")]),e._v(" "),i("li",[e._v("If ParamBlockHash is longer than 28 bytes, the script fails.")]),e._v(" "),i("li",[e._v("If ParamBlockHash does not match the equivalent ending bytes of the\nblock hash specified by ParamHeight, the script fails.")])]),e._v(" "),i("p",[e._v("Otherwise, script execution will continue as if a NOP had been executed.")]),e._v(" "),i("h3",{attrs:{id:"deployment"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),i("p",[e._v('This BIP will be deployed by "version bits"\n'),i("a",{attrs:{href:"bip-0009.mediawiki",title:"wikilink"}},[e._v("BIP9")]),e._v(" with the "),i("strong",[e._v("name")]),e._v(' "cbah" and\nusing '),i("strong",[e._v("bit")]),e._v(" TBD.")]),e._v(" "),i("p",[e._v("For Bitcoin "),i("strong",[e._v("mainnet")]),e._v(", the BIP9 "),i("strong",[e._v("starttime")]),e._v(" will be TBD (Epoch\ntimestamp TBD) and BIP9 "),i("strong",[e._v("timeout")]),e._v(" will be TBD (Epoch timestamp TBD).")]),e._v(" "),i("p",[e._v("For Bitcoin "),i("strong",[e._v("mainnet")]),e._v(", the BIP9 "),i("strong",[e._v("starttime")]),e._v(" will be TBD (Epoch\ntimestamp TBD) and BIP9 "),i("strong",[e._v("timeout")]),e._v(" will be TBD (Epoch timestamp TBD).")]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("h3",{attrs:{id:"securely-recovering-from-double-spends-securely-recovering-from-double-spends"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#securely-recovering-from-double-spends-securely-recovering-from-double-spends"}},[e._v("#")]),e._v(" Securely recovering from double spends {#securely_recovering_from_double_spends}")]),e._v(" "),i("p",[e._v("In some circumstances, users may wish to spend received bitcoins before\nthey have confirmed on the blockchain (Tx B1). However, if the\ntransaction sending them those bitcoins (Tx A1) is double-spent, the\nwallet must re-issue their own transaction spending them (Tx B2). So\nlong as the double-spend of the incoming transaction (Tx A2) also pays\nthe wallet, this can be managed by simply updating the outgoing\ntransaction with the new outpoint and resigning. However, if the\ndouble-spend does not pay the wallet, the situation is presently\nirrecoverable: it must spend different, non-conflicting TXOs in Tx B2,\nwhich allows an attacker to then reorganise the chain (reversing the\nincoming transaction's double-spend) and confirm both of his\ntransactions Tx B1 and Tx B2.")]),e._v(" "),i("p",[e._v("By adding "),i("code",[e._v("OP_CHECKBLOCKATHEIGHT")]),e._v(", the wallet can issue Tx B2 with a\ncondition that the block confirming Tx A2 is in the history, thus\neliminating this risk.")]),e._v(" "),i("h3",{attrs:{id:"replay-protection-in-the-event-of-a-persistent-blockchain-split-replay-protection-in-the-event-of-a-persistent-blockchain-split"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#replay-protection-in-the-event-of-a-persistent-blockchain-split-replay-protection-in-the-event-of-a-persistent-blockchain-split"}},[e._v("#")]),e._v(" Replay protection in the event of a persistent blockchain split {#replay_protection_in_the_event_of_a_persistent_blockchain_split}")]),e._v(" "),i("p",[e._v("In the event of a persistent blockchain split, some mechanism is desired\nby which the UTXOs valid in either chain may be spent without the\ntransaction being validly replayable on the other chain.")]),e._v(" "),i("p",[e._v("This can be guaranteed by choosing a block which exists only on either\nside of the split, and pinning (using "),i("code",[e._v("OP_CHECKBLOCKATHEIGHT")]),e._v(") common\nUTXOs to be spent only on chains based on that block.")]),e._v(" "),i("h2",{attrs:{id:"best-practices-for-wallets-best-practices-for-wallets"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#best-practices-for-wallets-best-practices-for-wallets"}},[e._v("#")]),e._v(" Best practices for wallets {#best_practices_for_wallets}")]),e._v(" "),i("p",[e._v("To avoid unnecessary conflicts when a chain is reorganized, wallets\nshould always avoid specifying the last 100 blocks when practical.\nWallets that use recent blocks when unavoidable SHOULD actively monitor\nthe network and re-create transactions that are reorganised out with\nupdated block hashes. Unless it conflicts with local/user security\npolicies, wallets SHOULD retain the private key in memory to re-sign\nsuch transactions until the pinned block is at least 100 blocks deep\ninto the chain.")]),e._v(" "),i("p",[e._v("For ordinary usage, wallets SHOULD specify the ParamBlockHash as 16\nbytes.")]),e._v(" "),i("h2",{attrs:{id:"rationale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),i("p",[e._v("How is this different from the transaction's lock-time?")]),e._v(" "),i("ul",[i("li",[e._v("The lock-time specifies a time or block height before a transaction\nbecomes valid. "),i("code",[e._v("OP_CHECKBLOCKATHEIGHT")]),e._v(", on the other hand, specifies\na specific block's hash.")])]),e._v(" "),i("p",[e._v("Why are block heights required to be absolute, rather than relative?")]),e._v(" "),i("ul",[i("li",[e._v("A relative block height would allow for creation of transactions\nwhich are valid at block N, but not N+1. This is carefully avoided\nby Bitcoin to ensure that if any given block is reorganised out,\nnon-malicious transactions can be simply re-confirmed in a later\nblock.")])]),e._v(" "),i("p",[e._v("Why are blocks older than 52596 deep in the chain not verified?")]),e._v(" "),i("ul",[i("li",[e._v("This is to avoid creating an infinite storage requirement from all\nfull nodes which would be necessary to maintain all the block\nheaders indefinitely. 52596 block headers requires a fixed size of\napproximately 4 MB.")]),e._v(" "),i("li",[e._v("In any case where you might want to specify a deeper block, you can\nalso just as well specify a more recent one that descends from it.")]),e._v(" "),i("li",[e._v("It is assumed that 1 year is sufficient time to double-spend any\ncommon UTXOs on all blockchains of interest.")]),e._v(" "),i("li",[e._v("If a deeper check is needed, it can be softforked in. Making the\ncheck more shallow, on the other hand, is a hardfork.")])]),e._v(" "),i("p",[e._v("Why is ParamBlockHash allowed to match less than the full block hash?")]),e._v(" "),i("ul",[i("li",[e._v("In a chain split, it is sufficient to check only a few bytes to\navoid replay.")]),e._v(" "),i("li",[e._v("In all scenarios, it is likely sufficient to check only a minority\nof the full hash to avoid any realistic chance of replay.")]),e._v(" "),i("li",[e._v("Allowing less than the full hash to be specified saves space in\ntransaction data.")]),e._v(" "),i("li",[e._v("Using a single byte can be combined with other opcodes (such as\n"),i("code",[e._v("OP_LESSTHAN")]),e._v(") to enable on-chain gambling logic.")])]),e._v(" "),i("p",[e._v("What if ParamBlockHash has leading zeros? Should this be prevented?")]),e._v(" "),i("ul",[i("li",[e._v("If leading zeros are included, they should be compared to the actual\nblock hash. (If they were truncated, fewer bytes would be compared.)")]),e._v(" "),i("li",[e._v("It is unlikely that the leading zeros will ever be necessary for\nsufficient precision, so the additional space is not a concern.")]),e._v(" "),i("li",[e._v("Since all block hashes are in principle shorter than than 29 bytes,\nParamBlockHash may not be larger than 28 bytes.")])]),e._v(" "),i("p",[e._v("Why is it safe to allow checking blocks as recently as the immediate\nprevious block?")]),e._v(" "),i("ul",[i("li",[e._v("This should only be used when necessary (ie, the deeper block is not\nsufficient), and when the wallet can actively issue updates should\nthe blockchain reorganise.")]),e._v(" "),i("li",[e._v("While this allows intentionally creating a transaction which may be\ninvalid in a reorganization, the same can already be accomplished by\ncreating double spends.")])]),e._v(" "),i("h2",{attrs:{id:"backwards-compatibility-backwards-compatibility"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility-backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility {#backwards_compatibility}")]),e._v(" "),i("p",[i("code",[e._v("OP_NOP5")]),e._v(" ought to be forbidden by policy by all miners for future\nextensions such as this, so old miners will under no circumstances\nproduce blocks which would now be considered invalid under the new\nrules. However, miners must still upgrade to avoid accepting and\nbuilding on top of such a possible invalid block as part of an attack.")]),e._v(" "),i("p",[e._v("Old nodes will likely also not relay transactions using this opcode for\nthe same extensibility reasons, but this is not important since the rule\ncannot be verified deterministically outside the context of a block.")]),e._v(" "),i("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference Implementation {#reference_implementation}")]),e._v(" "),i("p",[i("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/compare/master",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/compare/master"),i("OutboundLink")],1),e._v("...luke-jr:cbah")])])}),[],!1,null,null,null);t.default=a.exports}}]);