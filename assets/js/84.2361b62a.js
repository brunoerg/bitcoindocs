(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{459:function(e,t,n){"use strict";n.r(t);var i=n(43),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_325"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_325"}},[e._v("#")]),e._v(" 325")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 325\n  Layer: Applications\n  Title: Signet\n  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n          Anthony Towns <aj@erisian.com.au>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0325\n  Status: Proposed\n  Type: Standards Track\n  Created: 2019-03-20\n  License: CC0-1.0\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("A new type of test network where signatures are used in addition to\nproof of work for block progress, enabling much better coordination and\nrobustness (be reliably unreliable), for persistent, longer-term testing\nscenarios involving multiple independent parties.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("Testnet is a great place to try out new things without risking real\nmoney, but it is notoriously unreliable. Huge block reorgs, long gaps in\nbetween blocks being mined or sudden bursts of blocks in rapid\nsuccession mean that realistic testing of software, especially involving\nmultiple independent parties running software over an extended period of\ntime, becomes infeasible in practice.")]),e._v(" "),n("p",[e._v("A new type of test network would be more suitable for integration\ntesting by organizations such as exchanges, or testing of next\ngeneration Layer-2 protocols like Eltoo or sidechain pegs. The goal is\nnot to be perfectly reliable but rather to have a predictable amount of\nunreliability. You want a test network to behave like mainnet (i.e. no\nthousands of block reorgs) while also making it easier to trigger\nexpected but rare events like a 6-block reorg. Regtest is not suitable\nfor longer-term scenarios involving multiple independent parties because\ncreating blocks costs nothing, so any party can completely control the\ntest network.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("p",[e._v('A new type of network ("signet"), which takes an additional consensus\nparameter called the challenge (scriptPubKey). The challenge can be a\nsimple pubkey (P2PKH style), or a k-of-n multisig, or any other script\nyou would want.')]),e._v(" "),n("p",[e._v("Signet requires all blocks to have a BIP 141 commitment in the coinbase\ntransaction. In order to provide a non-empty solution to the block\nchallenge the block's BIP 141 commitment's optional data must include\nan additional commitment of the signature/solution for the block:")]),e._v(" "),n("p",[n("code",[e._v("1-5 bytes - Push the following (4 + x + y) bytes")]),n("br"),e._v(" "),n("code",[e._v("4 bytes - Signet header (0xecc7daa2)")]),n("br"),e._v(" "),n("code",[e._v("x bytes - scriptSig")]),n("br"),e._v(" "),n("code",[e._v("y bytes - scriptWitness")])]),e._v(" "),n("p",[e._v("In the special case where an empty solution is valid (ie scriptSig and\nscriptWitness are both empty) this additional commitment can optionally\nbe left out. This special case is to allow non-signet-aware block\ngeneration code to be used to test a custom signet chain where the\nchallenge is trivially true.")]),e._v(" "),n("p",[e._v("The scriptSig is serialized by first encoding its length as CompactSize.\nThe scriptWitness stack is serialized as described in BIP 141.")]),e._v(" "),n("p",[e._v("Any push operations that do not start with the 4 byte Signet header are\nignored. Multiple push operations with the 4 byte Signet header are\nignored except for the first instance of the header.")]),e._v(" "),n("p",[e._v("To sign the block or verify a block signature, two virtual transactions,\neach with a single input and output are constructed from the block as\nfollows.")]),e._v(" "),n("p",[e._v('The "to_spend" transaction is:')]),e._v(" "),n("p",[n("code",[e._v("nVersion = 0")]),n("br"),e._v(" "),n("code",[e._v("nLockTime = 0")]),n("br"),e._v(" "),n("code",[e._v("vin[0].prevout.hash = 0000...000")]),n("br"),e._v(" "),n("code",[e._v("vin[0].prevout.n = 0xFFFFFFFF")]),n("br"),e._v(" "),n("code",[e._v("vin[0].nSequence = 0")]),n("br"),e._v(" "),n("code",[e._v("vin[0].scriptSig = OP_0 PUSH72[ block_data ]")]),n("br"),e._v(" "),n("code",[e._v("vin[0].scriptWitness = []")]),n("br"),e._v(" "),n("code",[e._v("vout[0].nValue = 0")]),n("br"),e._v(" "),n("code",[e._v("vout[0].scriptPubKey = signet_challenge")])]),e._v(" "),n("p",[e._v("where block_data is the serialization of the block's nVersion,\nhashPrevBlock, signet_merkle_root, and nTime. The "),n("code",[e._v("signet_merkle_root")]),e._v("\nis obtained by generating the merkle root of the block transactions,\nafter modifying the coinbase witness commitment by replacing the signet\nsolution with an empty solution (that is, the witness commitment\nincludes a four byte push of the Signet header with no additional\nsolution data, and no prior pushes beginning with the Signet header).\nThis means the merkle root of the block is different from the merkle\nroot in the signet commitment. This is needed, because the signature can\nnever be included in the very message (in this case, a block) that is\nbeing signed.")]),e._v(" "),n("p",[e._v('The "to_sign" transaction is:')]),e._v(" "),n("p",[n("code",[e._v("nVersion = 0")]),n("br"),e._v(" "),n("code",[e._v("nLockTime = 0")]),n("br"),e._v(" "),n("code",[e._v("vin[0].prevout.hash = to_spend.txid")]),n("br"),e._v(" "),n("code",[e._v("vin[0].prevout.n = 0")]),n("br"),e._v(" "),n("code",[e._v("vin[0].nSequence = 0")]),n("br"),e._v(" "),n("code",[e._v("vin[0].sigScript = [ signet_solution sigScript (x bytes), if any ]")]),n("br"),e._v(" "),n("code",[e._v("vin[0].scriptWitness = [ signet_solution scriptWitness (y bytes), if any ]")]),n("br"),e._v(" "),n("code",[e._v("vout[0].nValue = 0")]),n("br"),e._v(" "),n("code",[e._v("vout[0].scriptPubKey = OP_RETURN")])]),e._v(" "),n("p",[e._v("The scriptSig and/or scriptWitness for "),n("code",[e._v("vin[0]")]),e._v(" are filled in from the\nSignet header push above.")]),e._v(" "),n("p",[e._v("To simplify block generation (mining), the signature also does not\ncommit to the block nonce value, so that rolling the nonce to generate\nproof-of-work does not also require regenerating signatures. When\ngrinding proof of work, the extended nonce cannot be used as it would\ninvalidate the signature. Instead, simply resigning the same (or an\nupdated) block will give a new search space.")]),e._v(" "),n("p",[e._v("A block is considered fully validated only if the to_sign transaction is\na valid spend of the to_spend transaction. It is recommended that this\nverification is done directly before or after the witness commitment\nverification, as the data required to do both is approximately the same.")]),e._v(" "),n("p",[e._v("There is one other acceptable special case: if a block's challenge is\ne.g. `OP_TRUE` (`0x51`), where an empty solution would result in\nsuccess, the block is also considered valid if the signet commitment is\nabsent.")]),e._v(" "),n("h2",{attrs:{id:"genesis-block-and-message-start-genesis-block-and-message-start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#genesis-block-and-message-start-genesis-block-and-message-start"}},[e._v("#")]),e._v(" Genesis Block and Message Start {#genesis_block_and_message_start}")]),e._v(" "),n("p",[e._v("The genesis block is the same for all signet networks, whereas the\nmessage start is defined as the first four bytes of the sha256d of the\nchallenge script as a single data push (see below).")]),e._v(" "),n("h3",{attrs:{id:"genesis-block-genesis-block"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#genesis-block-genesis-block"}},[e._v("#")]),e._v(" Genesis Block {#genesis_block}")]),e._v(" "),n("ul",[n("li",[e._v("Time stamp: 1598918400")]),e._v(" "),n("li",[e._v("Nonce: 52613770")]),e._v(" "),n("li",[e._v("Difficulty: 0x1e0377ae")]),e._v(" "),n("li",[e._v("Version: 1")])]),e._v(" "),n("p",[e._v("The resulting genesis block hash is\n00000008819873e925422c1ff0f99f7cc9bbb232af63a077a480a3633bee1ef6, and\nthe block hex is\n0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a008f4d5fae77031e8ad222030101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000.")]),e._v(" "),n("h3",{attrs:{id:"message-start-message-start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#message-start-message-start"}},[e._v("#")]),e._v(" Message Start {#message_start}")]),e._v(" "),n("p",[e._v("The message start is defined as the first four bytes of the sha256d of\nthe challenge script, as a single push (i.e. prefixed with the challenge\nscript length). Example:")]),e._v(" "),n("ul",[n("li",[e._v("Challenge script =\n512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be43051ae")]),e._v(" "),n("li",[e._v("Sha256d(len || challenge script) = sha256d(25512103ad...51ae) =\n7ec653a59b1912f9db10da2c461ed827d48f9404d5ef0346a6c94aadd4203646")]),e._v(" "),n("li",[e._v("First four bytes = the message start = 7ec653a5")])]),e._v(" "),n("h2",{attrs:{id:"compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" Compatibility")]),e._v(" "),n("p",[e._v("This specification is backwards compatible in the sense that existing\nsoftware can use Signet out of the box.")]),e._v(" "),n("p",[e._v('Simply by adding the network parameters for signet (magic number, etc),\na client can connect to and use any signet network without further\nmodifications. The block headers have valid proof of work, so clients\ncan trivially check that blocks are "probably" valid.')]),e._v(" "),n("p",[e._v("However, anyone can mine blocks that are accepted by the client for any\ngiven signet network. These blocks do not contain the required\nsignatures, however, so any fully validating node will promptly reject\nthem. As such, clients need to either validate the block signature\ninside the coinbase transaction, or connect to trusted peers.")]),e._v(" "),n("p",[e._v("Other software need not add block signature validation code that they\nwill not use in production. This is adequate for non-production test\npurposes where the goal is to have a network behave as much like mainnet\nas possible.")]),e._v(" "),n("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),n("p",[e._v("Pull request at "),n("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/pull/18267",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/pull/18267"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"acknowledgements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[e._v("#")]),e._v(" Acknowledgements")]),e._v(" "),n("p",[e._v("TODO")]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("ol",[n("li",[e._v("Original mailing list thread:\n"),n("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Bitcoin Wiki entry: "),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Signet",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://en.bitcoin.it/wiki/Signet"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This document is licensed under the Creative Commons CC0 1.0 Universal\nlicense.")])])}),[],!1,null,null,null);t.default=a.exports}}]);