(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{489:function(e,t,n){"use strict";n.r(t);var a=n(43),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8"}},[e._v("#")]),e._v(" 8")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 8\n  Title: Version bits with lock-in by height\n  Author: Shaolin Fry <shaolinfry@protonmail.ch>\n        Luke Dashjr <luke+bip@dashjr.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0008\n  Status: Draft\n  Type: Informational\n  Created: 2017-02-01\n  License: BSD-3-Clause\n        CC0-1.0\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This document specifies an alternative to\n"),n("a",{attrs:{href:"bip-0009.mediawiki",title:"wikilink"}},[e._v("BIP9")]),e._v(' that corrects for a number of\nperceived mistakes. Block heights are used for start and timeout rather\nthan POSIX timestamps. It additionally introduces an additional\nactivation parameter to guarantee activation of backward-compatible\nchanges (further called "soft forks").')]),e._v(" "),n("p",[e._v('The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL\nNOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and\n"OPTIONAL" in this document are to be interpreted as described in RFC\n2119.')]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("BIP9 introduced a mechanism for doing parallel soft forking deployments\nbased on repurposing the block nVersion field. Activation is dependent\non near unanimous hashrate signalling which may be impractical and\nresult in veto by a small minority of non-signalling hashrate. Super\nmajority hashrate based activation triggers allow for accelerated\nactivation where the majority hash power enforces the new rules in lieu\nof full nodes upgrading. Since all consensus rules are ultimately\nenforced by full nodes, eventually any new soft fork will be enforced by\nthe economy. This proposal combines these two aspects to provide\neventual flag day activation after a reasonable time (recommended a\nyear), as well as for accelerated activation by majority of hash rate\nbefore the flag date.")]),e._v(" "),n("p",[e._v("Due to using timestamps rather than block heights, it was found to be a\nrisk that a sudden loss of significant hashrate could interfere with a\nlate activation.")]),e._v(" "),n("p",[e._v("Block time is somewhat unreliable and may be intentionally or\nunintentionally inaccurate, so thresholds based on block time are not\nideal. Secondly, BIP9 specified triggers based on the first retarget\nafter a given time, which is non-intuitive. Since each new block must\nincrease the height by one, thresholds based on block height are much\nmore reliable and intuitive and can be calculated exactly for difficulty\nretarget.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("h3",{attrs:{id:"parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),n("p",[e._v("Each soft fork deployment is specified by the following per-chain\nparameters (further elaborated below):")]),e._v(" "),n("ol",[n("li",[e._v("The "),n("strong",[e._v("name")]),e._v(' specifies a very brief description of the soft fork,\nreasonable for use as an identifier. For deployments described in a\nsingle BIP, it is recommended to use the name "bipN" where N is\nthe appropriate BIP number.')]),e._v(" "),n("li",[e._v("The "),n("strong",[e._v("bit")]),e._v(" determines which bit in the nVersion field of the block\nis to be used to signal the soft fork lock-in and activation. It is\nchosen from the set {0,1,2,...,28}.")]),e._v(" "),n("li",[e._v("The "),n("strong",[e._v("startheight")]),e._v(" specifies the height of the first block at which\nthe bit gains its meaning.")]),e._v(" "),n("li",[e._v("The "),n("strong",[e._v("timeoutheight")]),e._v(" specifies a block height at which the miner\nsignalling ends. Once this height has been reached, if the soft fork\nhas not yet locked in (excluding this block's bit state), the\ndeployment is considered failed on all descendants of the block.")]),e._v(" "),n("li",[e._v("The "),n("strong",[e._v("lockinontimeout")]),e._v(" boolean if set to true, blocks are required\nto signal in the final period, ensuring the soft fork has locked in\nby timeoutheight.")])]),e._v(" "),n("h3",{attrs:{id:"selection-guidelines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#selection-guidelines"}},[e._v("#")]),e._v(" Selection guidelines")]),e._v(" "),n("p",[e._v("The following guidelines are suggested for selecting these parameters\nfor a soft fork:")]),e._v(" "),n("ol",[n("li",[n("strong",[e._v("name")]),e._v(" should be selected such that no two softforks, concurrent\nor otherwise, ever use the same name.")]),e._v(" "),n("li",[n("strong",[e._v("bit")]),e._v(" should be selected such that no two concurrent softforks use\nthe same bit.")]),e._v(" "),n("li",[n("strong",[e._v("startheight")]),e._v(" should be set to some block height in the future,\napproximately 30 days (or 4320 blocks) after a software release date\nincluding the soft fork. This allows for some release delays, while\npreventing triggers as a result of parties running pre-release\nsoftware, and ensures a reasonable number of full nodes have\nupgraded prior to activation. It should be rounded up to the next\nheight which begins a retarget period for simplicity.")]),e._v(" "),n("li",[n("strong",[e._v("timeoutheight")]),e._v(" should be 1 year, or 52416 blocks (26 retarget\nintervals) after "),n("strong",[e._v("startheight")]),e._v(".")]),e._v(" "),n("li",[n("strong",[e._v("lockinontimeout")]),e._v(" should be set to true for any softfork that is\nexpected or found to have political opposition from a non-negligible\npercent of miners. (It can be set after the initial deployment, but\ncannot be cleared once set.)")])]),e._v(" "),n("p",[e._v("A later deployment using the same bit is possible as long as the\nstartheight is after the previous one's timeoutheight or activation,\nbut it is discouraged until necessary, and even then recommended to have\na pause in between to detect buggy software.")]),e._v(" "),n("p",[n("strong",[e._v("startheight")]),e._v(" and "),n("strong",[e._v("timeoutheight")]),e._v(" must be an exact multiple of 2016\n(ie, at a retarget boundary), and "),n("strong",[e._v("timeoutheight")]),e._v(" must be at least\n4096 blocks (2 retarget intervals) after "),n("strong",[e._v("startheight")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"states"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#states"}},[e._v("#")]),e._v(" States")]),e._v(" "),n("p",[e._v("With each block and soft fork, we associate a deployment state. The\npossible states are:")]),e._v(" "),n("ol",[n("li",[n("strong",[e._v("DEFINED")]),e._v(" is the first state that each soft fork starts out as.\nThe genesis block is by definition in this state for each\ndeployment.")]),e._v(" "),n("li",[n("strong",[e._v("STARTED")]),e._v(" for blocks at or beyond the startheight.")]),e._v(" "),n("li",[n("strong",[e._v("MUST_SIGNAL")]),e._v(" for one retarget period prior to the timeout, if\nLOCKED_IN was not reached and "),n("strong",[e._v("lockinontimeout")]),e._v(" is true.")]),e._v(" "),n("li",[n("strong",[e._v("LOCKED_IN")]),e._v(" for one retarget period after the first retarget\nperiod with STARTED (or MUST_SIGNAL) blocks of which at least\nthreshold have the associated bit set in nVersion.")]),e._v(" "),n("li",[n("strong",[e._v("ACTIVE")]),e._v(" for all blocks after the LOCKED_IN retarget period.")]),e._v(" "),n("li",[n("strong",[e._v("FAILED")]),e._v(" for all blocks after the timeoutheight if LOCKED_IN is\nnot reached.")])]),e._v(" "),n("h3",{attrs:{id:"bit-flags"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bit-flags"}},[e._v("#")]),e._v(" Bit flags")]),e._v(" "),n("p",[e._v("The nVersion block header field is to be interpreted as a 32-bit\nlittle-endian integer (as present), and bits are selected within this\ninteger as values (1 << N) where N is the bit number.")]),e._v(" "),n("p",[e._v("Blocks in the STARTED state get an nVersion whose bit position bit is\nset to 1. The top 3 bits of such blocks must be 001, so the range of\nactually possible nVersion values is [0x20000000...0x3FFFFFFF],\ninclusive.")]),e._v(" "),n("p",[e._v("Due to the constraints set by BIP 34, BIP 66 and BIP 65, we only have\n0x7FFFFFFB possible nVersion values available. This restricts us to at\nmost 30 independent deployments. By restricting the top 3 bits to 001 we\nget 29 out of those for the purposes of this proposal, and support two\nfuture upgrades for different mechanisms (top bits 010 and 011). When a\nblock nVersion does not have top bits 001, it is treated as if all bits\nare 0 for the purposes of deployments.")]),e._v(" "),n("h3",{attrs:{id:"new-consensus-rules-new-consensus-rules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-consensus-rules-new-consensus-rules"}},[e._v("#")]),e._v(" New consensus rules {#new_consensus_rules}")]),e._v(" "),n("p",[e._v("The new consensus rules for each soft fork are enforced for each block\nthat has ACTIVE state.")]),e._v(" "),n("p",[e._v("During the MUST_SIGNAL and LOCKED_IN phases, blocks that fail to signal\nare invalid. For flexibility, during the LOCKED_IN phase only, this rule\ndoes NOT require the top 3 bits to be set any particular way.")]),e._v(" "),n("h3",{attrs:{id:"state-transitions-state-transitions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#state-transitions-state-transitions"}},[e._v("#")]),e._v(" State transitions {#state_transitions}")]),e._v(" "),n("p",[n("img",{attrs:{src:"bip-0008/states.png",align:"middle"}})]),e._v(" "),n("p",[e._v("Note that when "),n("strong",[e._v("lockinontimeout")]),e._v(" is true, the LOCKED_IN state will be\nreached no later than at a height of "),n("strong",[e._v("timeoutheight")]),e._v(", and ACTIVE will\nbe reached no later than at a height of "),n("strong",[e._v("timeoutheight + 2016")]),e._v(".")]),e._v(" "),n("p",[e._v("The genesis block has state DEFINED for each deployment, by definition.")]),e._v(" "),n("p",[n("code",[e._v("State GetStateForBlock(block) {")]),n("br"),e._v(" "),n("code",[e._v("if (block.height == 0) {")]),n("br"),e._v(" "),n("code",[e._v("return DEFINED;")]),n("br"),e._v(" "),n("code",[e._v("}")])]),e._v(" "),n("p",[e._v("All blocks within a retarget period have the same state. This means that\nif floor(block1.height / 2016) = floor(block2.height / 2016), they are\nguaranteed to have the same state for every deployment.")]),e._v(" "),n("p",[n("code",[e._v("if ((block.height % 2016) != 0) {")]),n("br"),e._v(" "),n("code",[e._v("return GetStateForBlock(block.parent);")]),n("br"),e._v(" "),n("code",[e._v("}")])]),e._v(" "),n("p",[e._v("Otherwise, the next state depends on the previous state:")]),e._v(" "),n("p",[n("code",[e._v("switch (GetStateForBlock(GetAncestorAtHeight(block, block.height - 2016))) {")])]),e._v(" "),n("p",[e._v("We remain in the initial state until we reach the start block height.")]),e._v(" "),n("p",[n("code",[e._v("case DEFINED:")]),n("br"),e._v(" "),n("code",[e._v("if (block.height >= startheight) {")]),n("br"),e._v(" "),n("code",[e._v("return STARTED;")]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("return DEFINED;")])]),e._v(" "),n("p",[e._v("After a period in the STARTED state, we tally the bits set, and\ntransition to LOCKED_IN if a sufficient number of blocks in the past\nperiod set the deployment bit in their version numbers. The threshold is\n≥1916 blocks (95% of 2016), or ≥1512 for testnet (75% of 2016). If the\nthreshold hasn't been met, lockinontimeout is true, and we are at the\nlast period before the timeout, then we transition to MUST_SIGNAL. If\nthe threshold hasn't been met and we reach the timeout, we transition\ndirectly to FAILED.")]),e._v(" "),n("p",[e._v("Note that a block's state never depends on its own nVersion; only on\nthat of its ancestors.")]),e._v(" "),n("p",[n("code",[e._v("case STARTED:")]),n("br"),e._v(" "),n("code",[e._v("int count = 0;")]),n("br"),e._v(" "),n("code",[e._v("walk = block;")]),n("br"),e._v(" "),n("code",[e._v("for (i = 0; i < 2016; i++) {")]),n("br"),e._v(" "),n("code",[e._v("walk = walk.parent;")]),n("br"),e._v(" "),n("code",[e._v("if (walk.nVersion & 0xE0000000 == 0x20000000 && (walk.nVersion >> bit) & 1 == 1) {")]),n("br"),e._v(" "),n("code",[e._v("++count;")]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("if (count >= threshold) {")]),n("br"),e._v(" "),n("code",[e._v("return LOCKED_IN;")]),n("br"),e._v(" "),n("code",[e._v("} else if (lockinontimeout && block.height + 2016 >= timeoutheight) {")]),n("br"),e._v(" "),n("code",[e._v("return MUST_SIGNAL;")]),n("br"),e._v(" "),n("code",[e._v("} else if (block.height >= timeoutheight) {")]),n("br"),e._v(" "),n("code",[e._v("return FAILED;")]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("return STARTED;")])]),e._v(" "),n("p",[e._v("If we have finished a period of MUST_SIGNAL, we transition directly to\nLOCKED_IN.")]),e._v(" "),n("p",[n("code",[e._v("case MUST_SIGNAL:")]),n("br"),e._v(" "),n("code",[e._v("return LOCKED_IN;")])]),e._v(" "),n("p",[e._v("After a retarget period of LOCKED_IN, we automatically transition to\nACTIVE.")]),e._v(" "),n("p",[n("code",[e._v("case LOCKED_IN:")]),n("br"),e._v(" "),n("code",[e._v("return ACTIVE;")])]),e._v(" "),n("p",[e._v("And ACTIVE and FAILED are terminal states, which a deployment stays in\nonce they're reached.")]),e._v(" "),n("p",[n("code",[e._v("case ACTIVE:")]),n("br"),e._v(" "),n("code",[e._v("return ACTIVE;")])]),e._v(" "),n("p",[n("code",[e._v("case FAILED:")]),n("br"),e._v(" "),n("code",[e._v("return FAILED;")]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("}")])]),e._v(" "),n("p",[n("strong",[e._v("Implementation")]),e._v(" It should be noted that the states are maintained\nalong block chain branches, but may need recomputation when a\nreorganization happens.")]),e._v(" "),n("p",[e._v("Given that the state for a specific block/deployment combination is\ncompletely determined by its ancestry before the current retarget period\n(i.e. up to and including its ancestor with height block.height - 1 -\n(block.height % 2016)), it is possible to implement the mechanism above\nefficiently and safely by caching the resulting state of every\nmultiple-of-2016 block, indexed by its parent.")]),e._v(" "),n("h3",{attrs:{id:"mandatory-signalling-mandatory-signalling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mandatory-signalling-mandatory-signalling"}},[e._v("#")]),e._v(" Mandatory signalling {#mandatory_signalling}")]),e._v(" "),n("p",[e._v("Blocks received while in the MUST_SIGNAL and LOCKED_IN phases must be\nchecked to ensure that they signal. For example:")]),e._v(" "),n("p",[n("code",[e._v("if (GetStateForBlock(block) == MUST_SIGNAL) {")]),n("br"),e._v(" "),n("code",[e._v("if ((block.nVersion & 0xE0000000) != 0x20000000 || ((block.nVersion >> bit) & 1) != 1) {")]),n("br"),e._v(" "),n("code",[e._v('return state.Invalid(BlockValidationResult::RECENT_CONSENSUS_CHANGE, "bad-version-bip8-must-signal");')]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("if (GetStateForBlock(block) == LOCKED_IN) {")]),n("br"),e._v(" "),n("code",[e._v("if (((block.nVersion >> bit) & 1) != 1) {")]),n("br"),e._v(" "),n("code",[e._v('return state.Invalid(BlockValidationResult::RECENT_CONSENSUS_CHANGE, "bad-version-bip8-locked-in");')]),n("br"),e._v(" "),n("code",[e._v("}")]),n("br"),e._v(" "),n("code",[e._v("}")])]),e._v(" "),n("p",[e._v("Implementations should be careful not to ban peers that send blocks that\nare invalid due to not signalling (or blocks that build on those\nblocks), as that would allow an incompatible chain that is only briefly\nlonger than the compliant chain to cause a split of the p2p network. If\nthat occurred, nodes that have not set "),n("em",[e._v("lockinontimeout")]),e._v(" may not see new\nblocks in the compliant chain, and thus not reorg to it at the point\nwhen it has more work, and would thus not be following the valid chain\nwith the most work.")]),e._v(" "),n("p",[e._v("Implementations with "),n("em",[e._v("lockinontimeout")]),e._v(" set to true may potentially\nfollow a lower work chain than nodes with "),n("em",[e._v("lockinontimeout")]),e._v(" set to false\nfor an extended period. In order for this not to result in a net split\nnodes with "),n("em",[e._v("lockinontimeout")]),e._v(" set to true, those nodes may need to\npreferentially connect to each other. Deployments proposing that\nimplementations set "),n("em",[e._v("lockinontimeout")]),e._v(" to true should either use\nparameters that do not risk there being a higher work alternative chain,\nor specify a mechanism for implementations that support the deployment\nto preferentially peer with each other.")]),e._v(" "),n("h3",{attrs:{id:"warning-mechanism-warning-mechanism"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#warning-mechanism-warning-mechanism"}},[e._v("#")]),e._v(" Warning mechanism {#warning_mechanism}")]),e._v(" "),n("p",[e._v('To support upgrade warnings, an extra "unknown upgrade" is tracked,\nusing the "implicit bit" mask = (block.nVersion & ~expectedVersion)\n!= 0. Mask will be non-zero whenever an unexpected bit is set in\nnVersion. Whenever LOCKED_IN for the unknown upgrade is detected, the\nsoftware should warn loudly about the upcoming soft fork. It should warn\neven more loudly after the next retarget period (when the unknown\nupgrade is in the ACTIVE state).')]),e._v(" "),n("h3",{attrs:{id:"getblocktemplate-changes-getblocktemplate-changes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getblocktemplate-changes-getblocktemplate-changes"}},[e._v("#")]),e._v(" getblocktemplate changes {#getblocktemplate_changes}")]),e._v(" "),n("p",[e._v("The template request Object is extended to include a new item:")]),e._v(" "),n("h2",{attrs:{id:"template-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#template-request"}},[e._v("#")]),e._v(" template request")]),e._v(" "),n("p",[e._v("Key\nrules")]),e._v(" "),n("p",[e._v("The template Object is also extended:")]),e._v(" "),n("h2",{attrs:{id:"template"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#template"}},[e._v("#")]),e._v(" template")]),e._v(" "),n("p",[e._v("Key\nrules\nvbavailable\nvbrequired")]),e._v(" "),n("p",[e._v('The "version" key of the template is retained, and used to indicate\nthe server\'s preference of deployments. If versionbits is being used,\n"version" MUST be within the versionbits range of\n[0x20000000...0x3FFFFFFF]. Miners MAY clear or set bits in the block\nversion WITHOUT any special "mutable" key, provided they are listed\namong the template\'s "vbavailable" and (when clearing is desired) NOT\nincluded as a bit in "vbrequired". Servers MUST set bits in\n"vbrequired" for deployments in MUST_SIGNAL and LOCKED_IN states, to\nensure blocks produced are valid.')]),e._v(" "),n("p",[e._v("Softfork deployment names listed in \"rules\" or as keys in\n\"vbavailable\" may be prefixed by a '!' character. Without this\nprefix, GBT clients may assume the rule will not impact usage of the\ntemplate as-is; typical examples of this would be when previously valid\ntransactions cease to be valid, such as BIPs 16, 65, 66, 68, 112, and\n113. If a client does not understand a rule without the prefix, it may\nuse it unmodified for mining. On the other hand, when this prefix is\nused, it indicates a more subtle change to the block structure or\ngeneration transaction; examples of this would be BIP 34 (because it\nmodifies coinbase construction) and 141 (since it modifies the txid\nhashing and adds a commitment to the generation transaction). A client\nthat does not understand a rule prefixed by '!' must not attempt to\nprocess the template, and must not attempt to use it for mining even\nunmodified.")]),e._v(" "),n("h3",{attrs:{id:"reference-implementation-reference-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/compare/master",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/compare/master"),n("OutboundLink")],1),e._v("...luke-jr:bip8")]),e._v(" "),n("h2",{attrs:{id:"contrasted-with-bip-9-contrasted-with-bip-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contrasted-with-bip-9-contrasted-with-bip-9"}},[e._v("#")]),e._v(" Contrasted with BIP 9 {#contrasted_with_bip_9}")]),e._v(" "),n("ul",[n("li",[e._v("The "),n("strong",[e._v("lockinontimeout")]),e._v(" flag is added, providing a way to guarantee\ntransition to LOCKED_IN.")]),e._v(" "),n("li",[e._v("Block heights are used for the deployment monotonic clock, rather\nthan median-time-past.")])]),e._v(" "),n("h2",{attrs:{id:"backwards-compatibility-backwards-compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility-backwards-compatibility"}},[e._v("#")]),e._v(" Backwards compatibility {#backwards_compatibility}")]),e._v(" "),n("p",[e._v("BIP8 and BIP9 deployments should not share concurrent active deployment\nbits. Nodes that only implement BIP9 will not activate a BIP8 soft fork\nif hashpower threshold is not reached by "),n("strong",[e._v("timeoutheight")]),e._v(", however,\nthose nodes will still accept the blocks generated by activated nodes.")]),e._v(" "),n("h2",{attrs:{id:"deployments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deployments"}},[e._v("#")]),e._v(" Deployments")]),e._v(" "),n("p",[e._v("A living list of deployment proposals can be found\n"),n("a",{attrs:{href:"bip-0008/assignments.mediawiki",title:"wikilink"}},[e._v("here")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("p",[n("a",{attrs:{href:"bip-0009.mediawiki",title:"wikilink"}},[e._v("BIP9")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013643.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mailing list\ndiscussion"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This document is dual licensed as BSD 3-clause, and Creative Commons CC0\n1.0 Universal.")])])}),[],!1,null,null,null);t.default=i.exports}}]);