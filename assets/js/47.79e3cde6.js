(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{421:function(e,t,n){"use strict";n.r(t);var i=n(43),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_140"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_140"}},[e._v("#")]),e._v(" 140")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 140\n  Layer: Consensus (soft fork)\n  Title: Normalized TXID\n  Author: Christian Decker <decker.christian@gmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0140\n  Status: Rejected\n  Type: Standards Track\n  Created: 2015-10-14\n  License: PD\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This BIP describes the use of normalized transaction IDs (NTXIDs) in\norder to eliminate transaction malleability, both in the third-party\nmodification scenario as well as the participant modification scenario.\nThe transaction ID is normalized by removing the signature scripts from\ntransactions before computing its hash. The normalized transaction\nhashes are then used during the signature creation and signature\nverification of dependent transactions.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("Transaction malleability refers to the fact that transactions can be\nmodified, either by one of the signers by re-signing the transaction or\na third-party by modifying the signature representation. This is a\nproblem since any modification to the serialized representation also\nchanges the hash of the transaction, which is used by spending\ntransaction to reference the funds that are being transferred. If a\ntransaction is modified and later confirmed by ending up in the\nblockchain all transactions that depended on the original transaction\nare no longer valid, and thus orphaned.")]),e._v(" "),n("p",[e._v("BIPs 62[^1] and 66[^2] alleviate the problem of third-party modification\nby defining a canonical representation of the signatures. However,\nchecking the canonical representation is complex and may not eliminate\nall sources of third-party malleability. Furthermore, these BIPs do not\naddress modifications by one of the signers, i.e., re-signing the\ntransaction, because signers can produce any number of signatures due to\nthe random parameter in ECDSA.")]),e._v(" "),n("p",[e._v("This proposal eliminates malleability by removing the malleable\nsignatures from the hash used to reference the outputs spent by a\ntransaction. The new hash used to reference an output is called the\n"),n("em",[e._v("normalized transaction ID")]),e._v(". The integrity of all data that is used to\nreference the output is guaranteed by the signature itself, and any\nmodification that would change the normalized transaction ID would also\ninvalidate the signature itself.")]),e._v(" "),n("p",[e._v("Besides eliminating transaction malleability as a source of problems it\nalso allows the use of transaction templates. Transaction templates\nsimplify higher level protocols and allows new uses. They allow an\nunsigned template transaction to be used as a basis for a sequence of\ntransaction and only once the sequence matches the signers'\nexpectations they provide the necessary signatures for the template to\nbecome valid, thus opting in to the sequence.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("p",[e._v("The use of normalized transaction IDs is introduced as a softfork. The\nspecification is divided into three parts:")]),e._v(" "),n("ul",[n("li",[e._v("Computation of the normalized transaction ID")]),e._v(" "),n("li",[e._v("Introduction of a new extensible signature verification opcode to\nenable softfork deployment")]),e._v(" "),n("li",[e._v("Changes to the UTXO tracking to enable normalized transaction ID\nlookup")])]),e._v(" "),n("h3",{attrs:{id:"normalized-transaction-id-computation-normalized-transaction-id-computation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#normalized-transaction-id-computation-normalized-transaction-id-computation"}},[e._v("#")]),e._v(" Normalized Transaction ID computation {#normalized_transaction_id_computation}")]),e._v(" "),n("p",[e._v("In order to calculate the normalized transaction ID, the signature\nscript is stripped from each input of the transaction of non-coinbase\ntransactions and each input is normalized. Stripping the signature\nscript is achieved by setting the script's length to 0 and removing the\n"),n("code",[e._v("uchar[]")]),e._v(" array from the "),n("code",[e._v("TxIn")]),e._v(".[^3] Inputs are then normalized by\nreplacing the hash of each previous transaction with its normalized\nversion if available, i.e., the normalized hash of the previous\ntransaction that created the output being spent in the current\ntransaction. Version 1 transactions do not have a normalized transaction\nID hence the non-normalized transaction ID is used for input\nnormalization.")]),e._v(" "),n("p",[e._v("The normalized transaction ID is then computed as the double "),n("code",[e._v("SHA 256")]),e._v("\nhash of the normalized transaction matching the existing transaction ID\ncomputation. The normalized transaction ID remains unchanged even if the\nsignatures of the transaction are replaced/malleated and describe a\nclass of semantically identical transactions. In the following we use\n"),n("em",[e._v("transaction instance ID")]),e._v(" to refer to the transaction ID computed on the\ntransaction including signatures. Normalized transaction IDs for\ncoinbase transactions are computed with the signature script in the\ncoinbase input, in order to avoid hash collisions.")]),e._v(" "),n("h3",{attrs:{id:"op-checksigex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#op-checksigex"}},[e._v("#")]),e._v(" OP_CHECKSIGEX")]),e._v(" "),n("p",[e._v("This BIP introduces a new opcode "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" which replaces\n"),n("code",[e._v("OP_NOP4")]),e._v(". "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" subsumes "),n("code",[e._v("OP_CHECKSIGVERIFY")]),e._v(" and\n"),n("code",[e._v("OP_CHECKMULTISIGVERIFY")]),e._v(", and extends them by accepting a new "),n("code",[e._v("VERSION")]),e._v("\nparameter. The version parameter is a single integer pushed onto the\nstack before invoking "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" and is used to group and evolve\nfuture versions of signature checking opcodes.")]),e._v(" "),n("p",[e._v("When executed "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" pops the version from the stack and then\nperforms the signature check according to the specified version. If the\nverifying client does not support the specified version, i.e., the\nversion was defined after the release of the client, the client must\ntreat the "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" as an "),n("code",[e._v("OP_NOP")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"version-1-version-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#version-1-version-1"}},[e._v("#")]),e._v(" Version 1 {#version_1}")]),e._v(" "),n("p",[e._v("The first version of "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" ("),n("code",[e._v("VERSION=1")]),e._v(") implements normalized\ntransaction IDs and uses Schnorr signatures instead of the current ECDSA\nsignatures.")]),e._v(" "),n("p",[e._v("Version 1 introduces the following new standard script format:")]),e._v(" "),n("p",[n("code",[e._v("m {pubkey}...{pubkey} n v OP_CHECKSIGEX")])]),e._v(" "),n("p",[e._v("with matching scriptSig format:")]),e._v(" "),n("p",[n("code",[e._v("{signature}...{signature}")])]),e._v(" "),n("p",[e._v("This is the standard "),n("em",[e._v("m-of-n")]),e._v(" script defined in "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP\n11"),n("OutboundLink")],1),e._v(" with\nan additional version parameter "),n("code",[e._v("v")]),e._v(" and the new opcode. Singlesig\ntransactions are encoded as "),n("em",[e._v("1-of-1")]),e._v(" transactions.")]),e._v(" "),n("p",[e._v("The existing "),n("code",[e._v("OP_CHECKMULTISIG")]),e._v(" and "),n("code",[e._v("OP_CHECKMULTISIGVERIFY")]),e._v(" have a\nbug[^4] that pops one argument too many from the stack. This bug is not\nreproduced in the implementation of OP_CHECKSIGEX, so the canonical\nsolution of pushing a dummy value onto the stack is not necessary.")]),e._v(" "),n("p",[e._v("The normalization is achieved by normalizing the transaction before\ncomputing the signaturehash, i.e., the hash that is signed. The\ntransaction must be normalized by replacing all transaction IDs in the\ninputs by their normalized variants and stripping the signature scripts.\nThe normalized transction IDs are computed as described in the previous\nsection. This normalization step is performed both when creating the\nsignatures as well as when checking the signatures.")]),e._v(" "),n("h3",{attrs:{id:"tracking-normalized-transaction-ids-tracking-normalized-transaction-ids"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tracking-normalized-transaction-ids-tracking-normalized-transaction-ids"}},[e._v("#")]),e._v(" Tracking Normalized Transaction IDs {#tracking_normalized_transaction_ids}")]),e._v(" "),n("p",[e._v("The transaction version is bumped to 2. The new version signals to\nclients receiving the transaction that they should track the normalized\ntransaction ID along with the transaction instance ID in the unspent\ntransaction output (UTXO) set. Upon receiving a version 2 transaction\nthe client computes the normalized transaction ID, annotates the outputs\nwith it, and adds them into the UTXO set indexed by the transaction\ninstance ID as before. Transactions continue using the transaction\ninstance ID to reference the outputs, but while checking the signature\nthey may get normalized. All network messages continue to use the\ntransaction instance ID to reference the transaction, specifically\n"),n("code",[e._v("inv")]),e._v(", "),n("code",[e._v("getdata")]),e._v(", "),n("code",[e._v("tx")]),e._v(" and "),n("code",[e._v("block")]),e._v(" messages still use transaction\ninstance IDs, not the normalized transaction IDs.")]),e._v(" "),n("p",[e._v("Outputs created by version 1 transactions are not annotated with the\nnormalized transaction ID, and when normalizing the hashes in\ntransaction inputs referencing version 1 outputs are not modified.")]),e._v(" "),n("h2",{attrs:{id:"rationale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),n("h3",{attrs:{id:"normalization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#normalization"}},[e._v("#")]),e._v(" Normalization")]),e._v(" "),n("p",[e._v("Normalized transaction IDs are provably non-malleable since no data is\nincluded in the signaturehash whose integrity is not also proven in the\nsignature, thus any modification causing the hash to change will also\ninvalidate the signature. Normalized transactions are secure as they\nstill use cryptographic hashes over all the semantic information of the\ntransaction, i.e., the inputs, outputs and metadata, thus it is still\ncomputationally infeasible to cause a hash collision between\ntransactions.")]),e._v(" "),n("p",[e._v("There are a number of advantages to using normalized transaction IDs:")]),e._v(" "),n("ul",[n("li",[e._v("Like BIP 62 and BIP 66 it solves the problem of third-parties\npicking transactions out of the network, modifying them and\nreinjecting them.")]),e._v(" "),n("li",[n("em",[e._v("m-of-n")]),e._v(" multisig outputs are often used in higher level\nprotocols[^5]"),n("code",[e._v("<ref>")]),e._v(" [["),n("a",{attrs:{href:"http://lightning.network/lightning-network-paper.pdf%7CThe",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://lightning.network/lightning-network-paper.pdf|The"),n("OutboundLink")],1),e._v("\nBitcoin Lightning Network:")])]),e._v(" "),n("p",[e._v("Scalable Off-Chain Instant Payments]]"),n("code",[e._v("</ref>")]),e._v("  in which several\nparties sign a transaction. Without normalized transaction IDs it is\ntrivial for one party to re-sign a transaction, hence changing the\ntransaction hash and invalidating any transaction built on top of its\noutputs. Normalized transaction IDs force the ID not to change, even if\na party replaces its signature.")]),e._v(" "),n("ul",[n("li",[e._v("Many higher level protocols build structures of transactions on top\nof multisig outputs that are not completely signed. This is\ncurrently not possible without one party holding a fully signed\ntransaction and then calculating the ID. It is desirable to be able\nto build successive transactions without one party collecting all\nsignatures, and thus possibly lock in funds unilaterally. Normalized\ntransaction IDs allow the use of transaction templates, i.e.,\ncompletely unsigned transactions upon which further transactions can\nbe built, and only once every party is assured the structure matches\nits expectations it signs the template, thus validating the\ntemplate.")])]),e._v(" "),n("p",[e._v("The only occurrence in which transactions can still be modified\nunilaterally is in the case "),n("code",[e._v("SIGHASH_NONE")]),e._v(", "),n("code",[e._v("SIGHASH_SINGLE")]),e._v(" or\n"),n("code",[e._v("SIGHASH_ANYONECANPAY")]),e._v(" is used. This however is not problematic since in\nthese cases the creator of the transaction explicitly allows\nmodification.")]),e._v(" "),n("p",[e._v("In case of a transaction becoming invalid due to one of the inputs being\nmalleated it is necessary to modify the spending transaction to\nreference the modified transaction ID. However, the signatures, which\nonly use the normalized IDs, remain valid as long as the semantics of\nthe funding transaction remain unchanged. An observer in the network may\nfix the transaction and reinject a corrected version.")]),e._v(" "),n("p",[e._v("Using version 2 for transactions is an explicit opt-in to the normalized\nID tracking and a simple upgrade for existing clients. It avoids having\nto reprocess the entire blockchain and computing the normalized\ntransaction IDs for existing outputs in the UTXO. This would be further\ncomplicated by having to recursively compute normalized transaction IDs\ndown to the coinbase transactions which created the coins.")]),e._v(" "),n("p",[e._v("Tracking the normalized transaction IDs in the UTXO requires the storage\nof an additional hash per transaction whose outputs are not completely\nspent, which at 7,000,000 transactions with unspent outputs amounts to\n224MB additional storage on disk.")]),e._v(" "),n("p",[e._v("The coinbase transactions have been checked for hash-collisions and no\ncollisions were found except for the coinbase transactions in blocks at\nheights 91842 and 91880, which are known to be identical[^6], and\nmotivated the introduction of BIP 34.[^7] Since coinbase transactions\nare invalid if transmitted outside of a block it is not possible to\nmodify them on the fly and since they only mature after being included\nfor a long time in the blockchain they are considered safe.")]),e._v(" "),n("h3",{attrs:{id:"op-checksigex-op-checksigex-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#op-checksigex-op-checksigex-1"}},[e._v("#")]),e._v(" OP_CHECKSIGEX {#op_checksigex_1}")]),e._v(" "),n("p",[e._v("The new opcode "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" was introduced in order to allow the use\nof normalized transaction IDs as a softfork and in order to keep the\nnumber of "),n("code",[e._v("OP_NOP")]),e._v("s needed to a bare minimum, while enabling future\nsoft-fork updates to the signing algorithms.")]),e._v(" "),n("p",[e._v("The additional argument containing the version can be pushed on the\nstack using a single byte up to version 16 ("),n("code",[e._v("OP_1")]),e._v(" - "),n("code",[e._v("OP_16")]),e._v("), resulting\nin one byte overhead for this script type. Using the standard multisig\nformat also for 1-of-1 transactions add an additional 2 bytes, however\nit also removes the bug requiring a dummy push, resulting in a single\nbyte overhead. Furthermore, using Schnorr signatures instead of ECDSA\nbrings a number of improvements that reduce the size of transactions\n("),n("em",[e._v("m-of-m")]),e._v(" is the same size as "),n("em",[e._v("1-of-1")]),e._v(") and increase verification speed\n(batch signature validation by summing up keys and signatures). The code\nis already in bitcoin/secp256k1 and can be merged in. We limited the\ndescription of this BIP to re-using BIP 11 style "),n("em",[e._v("m-of-n")]),e._v(" scripts to\nkeep it short, however Schnorr also allows a number of more complex\napplications which we defer to future BIPs.")]),e._v(" "),n("p",[e._v("Version 0 was intentionally skipped in order to guarantee that the\ntop-most element before "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(" is non-zero. This is necessary\nto guarantee that non-upgraded clients, which interpret "),n("code",[e._v("OP_CHECKSIGEX")]),e._v("\nas "),n("code",[e._v("OP_NOP4")]),e._v(", do not end up with a zero value on top of the stack after\nexecution, which would be interpreted as script failure.")]),e._v(" "),n("h3",{attrs:{id:"impact"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#impact"}},[e._v("#")]),e._v(" Impact")]),e._v(" "),n("p",[e._v("This is a softfork which replaces "),n("code",[e._v("OP_NOP4")]),e._v(" with the new implementation\nof "),n("code",[e._v("OP_CHECKSIGEX")]),e._v(", as such the impact on the network is minimal.\nWallets that do not implement this opcode will not be able to verify the\nvalidity of the scripts, however if transactions using "),n("code",[e._v("OP_CHECKSIGEX")]),e._v("\nare included in blocks they will accept them and track the inputs\ncorrectly. This is guaranteed since the transaction inputs still use the\nnon-normalized transaction ID to reference the outputs to be claimed,\nhence non-upgraded wallets can still lookup the outputs and mark them as\nspent. Furthermore, clients that do not implement this BIP are unable to\nidentify outputs using this script as their own, however upgrading and\nrescanning the blockchain will make them available.")]),e._v(" "),n("h2",{attrs:{id:"see-also-see-also"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#see-also-see-also"}},[e._v("#")]),e._v(" See also {#see_also}")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"bip-0062.mediawiki",title:"wikilink"}},[e._v("BIP 62: Dealing with malleability")])]),e._v(" "),n("li",[n("a",{attrs:{href:"bip-0066.mediawiki",title:"wikilink"}},[e._v("BIP 66: Strict DER Signatures")])])]),e._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This document is placed in the public domain.")]),e._v(" "),n("p",[e._v("[^1]: "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP 62 - Dealing with\nmalleability"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^2]: "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP 66 - Strict DER\nsignatures"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^3]: "),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Protocol_Specification#tx",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Protocol Specification:\nTX"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^4]: "),n("a",{attrs:{href:"https://bitcoin.org/en/developer-guide#multisig",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Developer Documentation -\nMultisig"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^5]: "),n("a",{attrs:{href:"http://www.tik.ee.ethz.ch/file/716b955c130e6c703fac336ea17b1670/duplex-micropayment-channels.pdf",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Fast and Scalable Payment Network with Bitcoin Duplex\nMicropayment Channels\n"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^6]: "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP 30 - Duplicate\ntransactions"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[^7]: "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Block v2, Height in\nCoinbase"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);