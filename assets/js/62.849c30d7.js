(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{437:function(e,n,t){"use strict";t.r(n);var a=t(43),i=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_156"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_156"}},[e._v("#")]),e._v(" 156")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  BIP: 156\n  Layer: Peer Services\n  Title: Dandelion - Privacy Enhancing Routing\n  Author: Brad Denby <bdenby@cmu.edu>\n          Andrew Miller <soc1024@illinois.edu>\n          Giulia Fanti <gfanti@andrew.cmu.edu>\n          Surya Bakshi <sbakshi3@illinois.edu>\n          Shaileshh Bojja Venkatakrishnan <shaileshh.bv@gmail.com>\n          Pramod Viswanath <pramodv@illinois.edu>\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0156\n  Status: Rejected\n  Type: Standards Track\n  Created: 2017-06-09\n  License: CC0-1.0\n")])])]),t("h2",{attrs:{id:"abstract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),t("p",[e._v("Bitcoin's transaction spreading protocol is vulnerable to\ndeanonymization attacks. Dandelion is a transaction routing mechanism\nthat provides formal anonymity guarantees against these attacks. When a\nnode generates a transaction without Dandelion, it transmits that\ntransaction to its peers with independent, exponential delays. This\napproach, known as diffusion in academia, allows network adversaries to\nlink transactions to IP addresses.")]),e._v(" "),t("p",[e._v('Dandelion mitigates this class of attacks by sending transactions over a\nrandomly selected path before diffusion. Transactions travel along this\npath during the "stem phase" and are then diffused during the "fluff\nphase" (hence Dandelion). We have shown that this routing protocol\nprovides near-optimal anonymity guarantees among schemes that do not\nintroduce additional encryption mechanisms.')]),e._v(" "),t("h2",{attrs:{id:"motivation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),t("p",[e._v('Transaction diffusion in Bitcoin is vulnerable to deanonymization\nattacks. Because transactions are sent to peers with independent,\nexponential delays, messages spread through the network in a\nstatistically symmetric manner. This pattern allows colluding spy nodes\nto infer the transaction source. Breaking this symmetry prevents the\nattack. However, we have shown that an adversary with knowledge of the\nnetwork topology can launch a much more effective "fingerprint" attack\nif the symmetry breaking is not done properly.')]),e._v(" "),t("p",[e._v("Consider a botnet-style adversary with access to the P2P graph. Botnets\nof size comparable to the Bitcoin P2P network are common and cheap, and\nthese adversaries can learn the network structure with probe messages.\nWe have shown that such an adversary can achieve total deanonymization\nof the entire network after observing less than ten transactions per\nnode.")]),e._v(" "),t("p",[e._v("Dandelion is a practical, lightweight privacy solution that provides the\nBitcoin network formal anonymity guarantees. While other privacy\nsolutions aim to protect individual users, Dandelion protects anonymity\nby limiting the capability of adversaries to deanonymize the entire\nnetwork.")]),e._v(" "),t("h2",{attrs:{id:"how-dandelion-works-how-dandelion-works"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-dandelion-works-how-dandelion-works"}},[e._v("#")]),e._v(" How Dandelion Works {#how_dandelion_works}")]),e._v(" "),t("p",[e._v("Dandelion enhances user privacy by sending transactions through an\nanonymity phase before diffusing them throughout the network. At a high\nlevel, Dandelion enhances privacy by (i) breaking the symmetry of\ndiffusion and (ii) mixing transactions by forwarding messages from\ndifferent sources along the same path.")]),e._v(" "),t("p",[e._v('Dandelion routing can be conceptualized in three phases. First, a\nprivacy graph is constructed. In practice, this privacy graph is\nconstructed in a fully decentralized manner and is a subgraph of the\nexisting Bitcoin P2P network. Next, transactions are forwarded along\nthis privacy graph during the "stem phase." Finally, messages are\nbroadcast to the network during the "fluff phase" using the typical\nmethod of diffusion.')]),e._v(" "),t("p",[e._v('[framed|center|alt=An illustration of Dandelion routing|Figure\n1](File:bip-0156/1-dandelion.png "wikilink") Figure 1')]),e._v(" "),t("p",[e._v("In order to select the privacy graph in a decentralized manner, each\nnode selects a subset of its outbound peers to be Dandelion\ndestinations. Dandelion transactions (transactions in their stem phase)\nthat arrive at this node via inbound connections are forwarded to these\nDandelion destinations.")]),e._v(" "),t("p",[e._v("In an ideal setting, we have found that a Hamiltonian circuit provides\nnear-optimal privacy guarantees. However, constructing a Hamiltonian\ncircuit through the Bitcoin P2P network in a decentralized, trustless\nmanner is not feasible. Thus, we recommend that each node select two\nDandelion destinations uniformly at random without replacement from its\nlist of outbound peers. Our tests have shown that this method provides\ncomparable privacy with increased robustness.")]),e._v(" "),t("p",[e._v("During stem phase routing, there is a question of how to route messages\nin order to protect privacy. For example, if two Dandelion transactions\narrive at a node from different inbound peers, to which Dandelion\ndestination(s) should these transactions be sent? We have found that\nsome choices are much better than others.")]),e._v(" "),t("p",[e._v("Consider the case in which each Dandelion transaction is forwarded to a\nDandelion destination selected uniformly at random. This approach\nresults in a fingerprint attack allowing network-level botnet\nadversaries to achieve total deanonymization of the P2P network after\nobserving less than ten transactions per node.")]),e._v(" "),t("p",[e._v('[framed|center|alt=An illustration of a fingerprint attack|Figure\n2](File:bip-0156/2-attack.png "wikilink") Figure 2')]),e._v(" "),t("p",[e._v("During a fingerprint attack, a botnet-style adversary with knowledge of\nthe graph structure first simulates transaction propagation. This\noffline step lets the adversary generate fingerprints for each network\nnode. During the online attack, the adversary collects transactions at\nits spy nodes and matches these observations to the simulated\nfingerprints. Our simulations have shown that this attack results in\ndevastating, network-wide deanonymization.")]),e._v(" "),t("p",[e._v('[framed|center|alt=A plot illustrating total deanonymization|Figure\n3](File:bip-0156/3-attack-plot.png "wikilink") Figure 3')]),e._v(" "),t("p",[e._v('To avoid this issue, we suggest "per-inbound-edge" routing. Each\ninbound peer is assigned a particular Dandelion destination. Each\nDandelion transaction that arrives via this peer is forwarded to the\nsame Dandelion destination. Per-inbound-edge routing breaks the\ndescribed attack by blocking an adversary\'s ability to construct useful\nfingerprints. Fingerprints arise when routing decisions are made\nindependently per transaction at each node. In this case, two\ntransactions from the same node generally take different paths through\nthe network. Crucially, this results in multiple, unique data points\nthat are aggregated to match with a fingerprint.')]),e._v(" "),t("p",[e._v("Dandelion ensures that two transactions from the same node take the same\nnetwork path, limiting adversaries to the far-left of the graph in\nFigure 3. In other words, adversary knowledge is limited to the case of\none observed message rather than a rich profile of multiple transaction\npaths. Dandelion also breaks the symmetry of diffusion, making the\nsource of the transaction difficult to infer.")]),e._v(" "),t("p",[e._v('[framed|center|alt=A plot illustrating limited deanonymization|Figure\n4](File:bip-0156/4-dandelion-plot.png "wikilink") Figure 4')]),e._v(" "),t("p",[e._v("After a transaction has traveled along a Dandelion stem for a random\nnumber of hops, it transitions into the fluff phase of routing. The\ntransaction is shared with the network through the existing process of\ndiffusion. In practice, this fluff mechanism is enforced by a weighted\ncoin flip at each node. If the random value is below some threshold, the\nDandelion transaction is transformed into a typical transaction. In our\ntesting, we have chosen a probability of ten percent that a given\nDandelion transaction enters fluff phase when leaving a given node. This\nvalue strikes a good balance between stem path length and transaction\nspreading latency.")]),e._v(" "),t("p",[e._v("Note that Dandelion's expected precision guarantees are a\npopulation-level metric, whereas the expected recall guarantees can be\ninterpreted as an individual-level metric. Expected recall is equivalent\nto the probability that an adversary associates a single transaction\nwith a given source. These guarantees are probabilistic. They do not\naddress scenarios in which a node has been eclipsed by other nodes, or\nwhen a node is specifically targeted by an ISP-like adversary.\nIndividuals who are concerned about targeted deanonymization should\nstill use Tor.")]),e._v(" "),t("p",[e._v('At a high level, Dandelion is like an "anonymity inoculation" for the\npublic at large - including users who are not aware of Bitcoin\'s\nprivacy issues. Higher adoption leads to greater benefits, even for\nusers who do not use Tor. Early adopters of Dandelion still receive\nprivacy benefits. In the worst case when no neighbors support Dandelion,\ntransactions make at least one hop before diffusing. Note that any\nsolution based only on routing cannot be perfectly anonymous due to the\nfundamental lower bounds on precision and recall shown in the original\nDandelion paper. Dandelion provides near-optimal anonymity guarantees\namong such solutions.')]),e._v(" "),t("h2",{attrs:{id:"specification"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),t("p",[e._v("Dandelion can be specified with a handful of features: Dandelion\ntransaction support, Dandelion routing data and logic, periodic\nDandelion route shuffling, memory pool logic, the fluff mechanism,\ntransaction embargoes, and Dandelion transaction logic. Specification\ndetails are summarized below.")]),e._v(" "),t("h3",{attrs:{id:"dandelion-transaction-support-dandelion-transaction-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dandelion-transaction-support-dandelion-transaction-support"}},[e._v("#")]),e._v(" Dandelion transaction support {#dandelion_transaction_support}")]),e._v(" "),t("p",[e._v('During the stem phase, transactions are "Dandelion transactions." When\na Dandelion transaction enters fluff phase, it becomes a typical Bitcoin\ntransaction. Dandelion transactions and typical transactions differ only\nin their '),t("code",[e._v("NetMsgType")]),e._v(".")]),e._v(" "),t("p",[e._v("Dandelion (stem phase) transactions MUST be differentiable from typical\nBitcoin transactions.")]),e._v(" "),t("h3",{attrs:{id:"dandelion-routing-data-and-logic-dandelion-routing-data-and-logic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dandelion-routing-data-and-logic-dandelion-routing-data-and-logic"}},[e._v("#")]),e._v(" Dandelion routing data and logic {#dandelion_routing_data_and_logic}")]),e._v(" "),t("p",[e._v("Dandelion routing during the stem phase requires notions of inbound\npeers, outbound peers, Dandelion destinations, and Dandelion routes.\nInbound peers consist of all currently connected peers that initiated\nthe peer connection. Outbound peers consist of all currently connected\npeers that were connected to by this node. Dandelion destinations are a\nsubset of outbound peers. The number of Dandelion destinations is\nlimited by the "),t("code",[e._v("DANDELION_MAX_DESTINATIONS")]),e._v(" parameter. In the reference\nimplementation, this parameter is set to two. Our tests have shown that\nthis value provides both privacy and robustness (see the reference paper\nfor more details on the parameter tradeoffs). Dandelion routes are a map\nof inbound peers to Dandelion destinations. Every inbound peer is mapped\nto a Dandelion destination.")]),e._v(" "),t("p",[e._v("Note that a Dandelion node may choose a different\n"),t("code",[e._v("DANDELION_MAX_DESTINATIONS")]),e._v(" parameter without splitting from the\nprivacy graph. When mapping inbound connections to outbound connections\nfor Dandelion routes, we implement the following routing logic. First,\nselect a set of Dandelion destinations from the set of outbound peers.\nThis set of Dandelion destinations is of size less than or equal to\n"),t("code",[e._v("DANDELION_MAX_DESTINATIONS")]),e._v(". For each inbound connection, first\nidentify the subset of Dandelion destinations with the least number of\nroutes. For example, some subset of Dandelion destinations may be\naffiliated with zero routes while all other Dandelion destinations are\naffiliated with one or more routes. From this subset, select one\nDandelion destination uniformly at random. Establish a Dandelion route\nfrom the inbound connection to this Dandelion destination.")]),e._v(" "),t("p",[e._v("For a given Dandelion routing epoch, two distinct Dandelion destinations\nSHOULD be selected uniformly at random from the set of outbound\nconnections. All Dandelion transactions that arrive via a given inbound\nconnection MUST be transmitted to the same Dandelion destination. When\nchoosing a Dandelion destination for a given inbound connection, the\ndestination MUST be selected uniformly at random from the set of\nDandelion destinations with the least number of inbound connections\nmapped to them.")]),e._v(" "),t("h3",{attrs:{id:"periodic-dandelion-route-shuffling-periodic-dandelion-route-shuffling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#periodic-dandelion-route-shuffling-periodic-dandelion-route-shuffling"}},[e._v("#")]),e._v(" Periodic Dandelion route shuffling {#periodic_dandelion_route_shuffling}")]),e._v(" "),t("p",[e._v("The map of Dandelion routes is cleared and reconstructed every ten\nminutes on average. We have chosen the value of ten minutes\nheuristically in order to make privacy graph learning difficult for\nadversaries. Note that a Dandelion node may choose a different average\nshuffle time without splitting from the privacy graph.")]),e._v(" "),t("p",[e._v("Dandelion routes MUST be cleared and reconstructed at random intervals.\nDandelion routes SHOULD be cleared and reconstructed every ten minutes\non average.")]),e._v(" "),t("h3",{attrs:{id:"memory-pool-logic-memory-pool-logic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-pool-logic-memory-pool-logic"}},[e._v("#")]),e._v(" Memory pool logic {#memory_pool_logic}")]),e._v(" "),t("p",[e._v("Dandelion transactions are segregated from typical transactions. The\n"),t("code",[e._v("mempool")]),e._v(" remains unchanged. Another instance of the "),t("code",[e._v("CTxMemPool")]),e._v(" class,\ncalled the "),t("code",[e._v("stempool")]),e._v(", is used for Dandelion transactions. Information\nflows from "),t("code",[e._v("mempool")]),e._v(" to "),t("code",[e._v("stempool")]),e._v(" in order to ensure proper transaction\npropagation. Information does not flow from "),t("code",[e._v("stempool")]),e._v(" to "),t("code",[e._v("mempool")]),e._v(",\nexcept when a Dandelion transaction fluffs into a typical transaction.")]),e._v(" "),t("p",[e._v("When a Dandelion transaction arrives, the transaction MUST be added to\nthe stempool and MUST NOT be added to the mempool. When a typical\nBitcoin transaction arrives, the transaction MUST be added to the\nmempool and MUST be added to the stempool. When a Dandelion transaction\nfluffs, the transaction MUST be added to the mempool.")]),e._v(" "),t("h3",{attrs:{id:"the-fluff-mechanism-the-fluff-mechanism"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-fluff-mechanism-the-fluff-mechanism"}},[e._v("#")]),e._v(" The fluff mechanism {#the_fluff_mechanism}")]),e._v(" "),t("p",[e._v("When relaying a Dandelion transaction along a Dandelion route, there is\na 10% chance that the Dandelion transaction becomes a typical Bitcoin\ntransaction and is therefore relayed via diffusion. In our testing, this\nvalue strikes a good balance between stem path length and transaction\nspreading latency. Note that a Dandelion node may choose a different\nchance of fluffing without splitting from the privacy graph.")]),e._v(" "),t("p",[e._v('When a node prepares to transmit a Dandelion transaction, the node MUST\nflip a biased coin. If the outcome is "Dandelion transaction," then\nthe node MUST transmit the transaction to the appropriate Dandelion\ndestination. Otherwise, the node MUST convert the Dandelion transaction\ninto a typical Bitcoin transaction. A Dandelion transaction SHOULD fluff\ninto a typical Bitcoin transaction with a 10% probability.')]),e._v(" "),t("h3",{attrs:{id:"transaction-embargoes-transaction-embargoes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transaction-embargoes-transaction-embargoes"}},[e._v("#")]),e._v(" Transaction embargoes {#transaction_embargoes}")]),e._v(" "),t("p",[e._v("During the stem phase, transactions are relayed along a single path. If\nany node in this path were to receive the Dandelion transaction and go\noffline, then the transaction would cease to propagate. To increase\nrobustness, every node that forwards a Dandelion transaction initializes\na timer at the time of reception. If the Dandelion transaction does not\nappear in the memory pool by the time the timer expires, then the\ntransaction enters fluff phase and is forwarded via diffusion.")]),e._v(" "),t("p",[e._v("When a Dandelion transaction arrives, the node MUST set an embargo timer\nfor a random time in the future. If the Dandelion transaction arrives as\na typical Bitcoin transaction, the node MUST cancel the timer. If the\ntimer expires before the Dandelion transaction is observed as a typical\nBitcoin transaction, then the node MUST fluff the Dandelion transaction.")]),e._v(" "),t("h3",{attrs:{id:"dandelion-transaction-logic-dandelion-transaction-logic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dandelion-transaction-logic-dandelion-transaction-logic"}},[e._v("#")]),e._v(" Dandelion transaction logic {#dandelion_transaction_logic}")]),e._v(" "),t("p",[e._v("The following cases define a node's behavior when receiving network\npackets referencing Dandelion transactions.")]),e._v(" "),t("ul",[t("li",[e._v("Receive INV for Dandelion TX: If the peer is inbound and the\nDandelion transaction has not been received from this peer, then\nreply with GETDATA.")]),e._v(" "),t("li",[e._v("Receive GETDATA for Dandelion TX: If the peer is not inbound and the\nDandelion transaction has been advertised to this peer, then reply\nwith the Dandelion transaction.")]),e._v(" "),t("li",[e._v("Receive Dandelion TX: If the peer is inbound, then relay the\nDandelion TX to the appropriate Dandelion destination.")])]),e._v(" "),t("h2",{attrs:{id:"implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),t("p",[e._v("A reference implementation is available at the following URL:\n"),t("a",{attrs:{href:"https://github.com/dandelion-org/bitcoin/tree/dandelion-feature-commits",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/dandelion-org/bitcoin/tree/dandelion-feature-commits"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("All features have been compressed into a single commit at the following\nURL: "),t("a",{attrs:{href:"https://github.com/dandelion-org/bitcoin/tree/dandelion",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/dandelion-org/bitcoin/tree/dandelion"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"compatibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" Compatibility")]),e._v(" "),t("p",[e._v("Dandelion does not conflict with existing versions of Bitcoin. A Bitcoin\nnode that supports Dandelion appears no differently to Bitcoin nodes\nrunning older software versions. Bitcoin nodes that support Dandelion\ncan identify feature support through a probe message. Obviously, older\nnodes are not capable of Dandelion routing. If a Bitcoin node supporting\nDandelion has no peers that also support Dandelion, then its behavior\nnaturally decays to that of a Bitcoin node without Dandelion support due\nto the Dandelion transaction embargoes.")]),e._v(" "),t("h2",{attrs:{id:"acknowledgements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[e._v("#")]),e._v(" Acknowledgements")]),e._v(" "),t("p",[e._v('We would like to thank the Bitcoin Core developers and Gregory Maxwell\nin particular for their insightful comments, which helped to inform this\nimplementation and some of the follow-up work we conducted. We would\nalso like to thank the Mimblewimble development community for coining\nthe term "stempool," which we happily adopted for this implementation.')]),e._v(" "),t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),t("ol",[t("li",[e._v("An Analysis of Anonymity in Bitcoin Using P2P Network Traffic\n"),t("a",{attrs:{href:"http://fc14.ifca.ai/papers/fc14_submission_71.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://fc14.ifca.ai/papers/fc14_submission_71.pdf"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Deanonymisation of clients in Bitcoin P2P network\n"),t("a",{attrs:{href:"https://arxiv.org/abs/1405.7418",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://arxiv.org/abs/1405.7418"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Discovering Bitcoin's Public Topology and Influential Nodes\n"),t("a",{attrs:{href:"https://cs.umd.edu/projects/coinscope/coinscope.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://cs.umd.edu/projects/coinscope/coinscope.pdf"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("(Sigmetrics 2017) Dandelion: Redesigning the Bitcoin Network for\nAnonymity "),t("a",{attrs:{href:"https://arxiv.org/abs/1701.04439",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://arxiv.org/abs/1701.04439"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("(Sigmetrics 2018) Dandelion++: Lightweight Cryptocurrency Networking\nwith Formal Anonymity Guarantees\n"),t("a",{attrs:{href:"https://arxiv.org/pdf/1805.11060.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://arxiv.org/pdf/1805.11060.pdf"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"copyright"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),t("p",[e._v("To the extent possible under law, the author(s) have dedicated all\ncopyright and related and neighboring rights to this work to the public\ndomain worldwide. This work is distributed without any warranty.")]),e._v(" "),t("p",[e._v("You should have received a copy of the CC0 Public Domain Dedication with\nthis work. If not, see\n"),t("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://creativecommons.org/publicdomain/zero/1.0/"),t("OutboundLink")],1),e._v(" .")])])}),[],!1,null,null,null);n.default=i.exports}}]);