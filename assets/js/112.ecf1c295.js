(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{487:function(e,t,n){"use strict";n.r(t);var i=n(43),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_78"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_78"}},[e._v("#")]),e._v(" 78")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 78\n  Layer: Applications\n  Title: A Simple Payjoin Proposal\n  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n  Replaces: 79\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n  Status: Draft\n  Type: Standards Track\n  Created: 2019-05-01\n  License: BSD-2-Clause\n")])])]),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),n("h3",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This document proposes a protocol for two parties to negotiate a\ncoinjoin transaction during a payment between them.")]),e._v(" "),n("h3",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This BIP is licensed under the 2-clause BSD license.")]),e._v(" "),n("h3",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("When two parties (later referred to as sender and receiver) want to\ntransact, most of the time, the sender creates a transaction spending\ntheir own Unspent Transaction Outputs (UTXOs), signs it and broadcasts\nit on the network.")]),e._v(" "),n("p",[e._v("This simple model gave birth to several heuristics impacting the privacy\nof the parties and of the network as a whole.")]),e._v(" "),n("ul",[n("li",[e._v("Common input ownership heuristic: In most transactions, all the\ninputs belong to the same party.")]),e._v(" "),n("li",[e._v("Change identification from scriptPubKey type: If all inputs are\nspending UTXOs of a certain scriptPubKey type, then the change\noutput is likely to have the same scriptPubKey type, too.")]),e._v(" "),n("li",[e._v("Change identification from round amount: If an output in the\ntransaction has a round amount, it is likely an output belonging to\nthe receiver.")])]),e._v(" "),n("p",[e._v("We will designate these three heuristics as "),n("code",[e._v("common-input")]),e._v(",\n"),n("code",[e._v("change-scriptpubkey")]),e._v(", "),n("code",[e._v("change-round-amount")]),e._v(".")]),e._v(" "),n("p",[e._v("The problems we aim to solve are:")]),e._v(" "),n("ul",[n("li",[e._v("For the receiver, there is a missed opportunity to consolidate their\nown UTXOs or making payment in the sender's transaction.")]),e._v(" "),n("li",[e._v("For the sender, there are privacy leaks regarding their wallet that\nhappen when someone applies the heuristics detailed above to their\ntransaction.")])]),e._v(" "),n("p",[e._v("Our proposal gives an opportunity for the receiver to consolidate their\nUTXOs while also batching their own payments, without creating a new\ntransaction. (Saving fees in the process) For the sender, it allows them\nto invalidate the three heuristics above. With the receiver's\ninvolvement, the heuristics can even be poisoned. (ie, using the\nheuristics to intentionally mislead blockchain analysis)")]),e._v(" "),n("p",[e._v("Note that the existence of this proposal is also improving the privacy\nof parties who are not using it by making the three heuristics\nunreliable to the network as a whole.")]),e._v(" "),n("h3",{attrs:{id:"relation-to-bip79-bustapay-relation-to-bip79-bustapay"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relation-to-bip79-bustapay-relation-to-bip79-bustapay"}},[e._v("#")]),e._v(" Relation to BIP79 (Bustapay) {#relation_to_bip79_bustapay}")]),e._v(" "),n("p",[e._v("Another implementation proposal has been written: "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP79\nBustapay"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("We decided to deviate from it for several reasons:")]),e._v(" "),n("ul",[n("li",[e._v("It was not using PSBT, so if the receiver wanted to bump the fee,\nthey would need the full UTXO set.")]),e._v(" "),n("li",[e._v("Inability to change the payment output to match scriptPubKey type.")]),e._v(" "),n("li",[e._v("Lack of basic versioning negotiation if the protocol evolves.")]),e._v(" "),n("li",[e._v("No standardization of error condition for proper feedback to the\nsender.")])]),e._v(" "),n("p",[e._v("Other than that, our proposal is very similar.")]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("h3",{attrs:{id:"protocol"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#protocol"}},[e._v("#")]),e._v(" Protocol")]),e._v(" "),n("p",[e._v("In a payjoin payment, the following steps happen:")]),e._v(" "),n("ul",[n("li",[e._v("The receiver of the payment, presents a "),n("a",{attrs:{href:"bip-0021.mediawiki",title:"wikilink"}},[e._v("BIP 21\nURI")]),e._v(" to the sender with a parameter\n"),n("code",[e._v("pj=")]),e._v(" describing a payjoin endpoint.")]),e._v(" "),n("li",[e._v("The sender creates a signed, finalized PSBT with witness UTXO or\nprevious transactions of the inputs. We call this PSBT the\n"),n("code",[e._v("original")]),e._v(".")]),e._v(" "),n("li",[e._v("The receiver replies back with a signed PSBT containing his own\nsigned inputs/outputs and those of the sender. We call this PSBT\n"),n("code",[e._v("Payjoin proposal")]),e._v(".")]),e._v(" "),n("li",[e._v("The sender verifies the proposal, re-signs his inputs and broadcasts\nthe transaction to the Bitcoin network. We call this transaction\n"),n("code",[e._v("Payjoin transaction")]),e._v(".")])]),e._v(" "),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[e._v("    +----------+                        +--------+         +-----------------+\n    | Receiver |                        | Sender |         | Bitcoin Network |\n    +----+-----+                        +---+----+         +-------+---------+\n         |       +-----------------+        |                      |\n         +-------+ BIP21 with ?pj= +-------\x3e+                      |\n         |       +-----------------+        |                      |\n         |                                  |                      |\n         |        +---------------+         |                      |\n         +"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("-------+")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("Original")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("PSBT")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("+---------+")]),e._v("                      "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("        "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("+---------------+")]),e._v("         "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("                      "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("                                  "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("                      "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("+------------------+")]),e._v("       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("                      "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("Payjoin")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("Proposal")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("                      "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("|")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("+-------+")]),e._v("      "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("PSBT")]),e._v("        "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("+------")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("+                      |\n         |       +------------------+       |                      |\n         |                                  |   +--------------+   |\n         |                                  |---+ Payjoin      |   |\n         |                                  |   | transaction  +--\x3e+\n         |                                  |   +--------------+   |\n         +                                  +                      +\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br")])]),n("p",[e._v("The original PSBT is sent in the HTTP POST request body, base64\nserialized, with "),n("code",[e._v("text/plain")]),e._v(" in the "),n("code",[e._v("Content-Type")]),e._v(" HTTP header and\n"),n("code",[e._v("Content-Length")]),e._v(" set correctly. The payjoin proposal PSBT is sent in the\nHTTP response body, base64 serialized with HTTP code 200.")]),e._v(" "),n("p",[e._v("To ensure compatibility with web-wallets and browser-based-tools, all\nresponses (including errors) must contain the HTTP header\n"),n("code",[e._v("Access-Control-Allow-Origin: *")]),e._v(".")]),e._v(" "),n("p",[e._v("The sender must ensure that the url refers to a scheme or protocol using\nauthenticated encryption, for example TLS with certificate validation,\nor a .onion link to a hidden service whose public key identifier has\nalready been communicated via a TLS connection. Senders SHOULD NOT\naccept a url representing an unencrypted or unauthenticated connection.")]),e._v(" "),n("p",[e._v("The original PSBT MUST:")]),e._v(" "),n("ul",[n("li",[e._v("Have all the "),n("code",[e._v("witnessUTXO")]),e._v(" or "),n("code",[e._v("nonWitnessUTXO")]),e._v(" information filled\nin.")]),e._v(" "),n("li",[e._v("Be finalized.")]),e._v(" "),n("li",[e._v("Not include fields unneeded for the receiver such as global xpubs or\nkeypath information.")]),e._v(" "),n("li",[e._v("Be broadcastable.")])]),e._v(" "),n("p",[e._v("The original PSBT MAY:")]),e._v(" "),n("ul",[n("li",[e._v("Have outputs unrelated to the payment for batching purpose.")])]),e._v(" "),n("p",[e._v("The payjoin proposal MUST:")]),e._v(" "),n("ul",[n("li",[e._v("Use all the inputs from the original PSBT.")]),e._v(" "),n("li",[e._v("Use all the outputs which do not belongs to the receiver from the\noriginal PSBT.")]),e._v(" "),n("li",[e._v("Only finalize the inputs added by the receiver. (Referred later as\n"),n("code",[e._v("additional inputs")]),e._v(")")]),e._v(" "),n("li",[e._v("Only fill the "),n("code",[e._v("witnessUTXO")]),e._v(" or "),n("code",[e._v("nonWitnessUTXO")]),e._v(" for the additional\ninputs.")])]),e._v(" "),n("p",[e._v("The payjoin proposal MAY:")]),e._v(" "),n("ul",[n("li",[e._v("Add, remove or modify the outputs belonging to the receiver.")])]),e._v(" "),n("p",[e._v("The payjoin proposal MUST NOT:")]),e._v(" "),n("ul",[n("li",[e._v("Shuffle the order of inputs or outputs, the additional outputs or\nadditional inputs must be inserted at a random index.")]),e._v(" "),n("li",[e._v("Decrease the absolute fee of the original transaction.")])]),e._v(" "),n("h3",{attrs:{id:"bip21-payjoin-parameters-bip21-payjoin-parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bip21-payjoin-parameters-bip21-payjoin-parameters"}},[e._v("#")]),e._v(" BIP21 payjoin parameters {#bip21_payjoin_parameters}")]),e._v(" "),n("p",[e._v("This proposal is defining the following new "),n("a",{attrs:{href:"bip-0021.mediawiki",title:"wikilink"}},[e._v("BIP 21\nURI")]),e._v(" parameters:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("pj=")]),e._v(": Represents an http(s) endpoint which the sender can POST the\noriginal PSBT.")]),e._v(" "),n("li",[n("code",[e._v("pjos=0")]),e._v(": Signal to the sender that they MUST disallow "),n("a",{attrs:{href:"#output-substitution",title:"wikilink"}},[e._v("payment\noutput substitution")]),e._v(". (See\n"),n("a",{attrs:{href:"#unsecured-payjoin",title:"wikilink"}},[e._v("Unsecured payjoin server")]),e._v(")")])]),e._v(" "),n("h3",{attrs:{id:"span-id-optional-params-span-optional-parameters-optional-parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-optional-params-span-optional-parameters-optional-parameters"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="optional-params">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" Optional parameters {#optional_parameters}")]),e._v(" "),n("p",[e._v("When the payjoin sender posts the original PSBT to the receiver, he can\noptionally specify the following HTTP query string parameters:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("v=")]),e._v(", the version number of the payjoin protocol that the sender is\nusing. The current version is "),n("code",[e._v("1")]),e._v(".")])]),e._v(" "),n("p",[e._v("This can be used in the future so the receiver can reject a payjoin if\nthe sender is using a version which is not supported via an error HTTP\n400, "),n("code",[e._v("version-unsupported")]),e._v(". If not specified, the receiver will assume\nthe sender is "),n("code",[e._v("v=1")]),e._v(".")]),e._v(" "),n("p",[e._v("If the receiver does not support the version of the sender, they should\nsend an error with the list of supported versions:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('{\n    "errorCode": "version-unsupported",\n    "supported" : [ 2, 3, 4 ],\n    "message": "The version is not supported anymore"\n}\n')])])]),n("ul",[n("li",[n("code",[e._v("additionalfeeoutputindex=")]),e._v(", if the sender is willing to pay for\nincreased fee, this indicate output can have its value substracted\nto pay for it.")])]),e._v(" "),n("p",[e._v("If the "),n("code",[e._v("additionalfeeoutputindex")]),e._v(" is out of bounds or pointing to the\npayment output meant for the receiver, the receiver should ignore the\nparameter. See "),n("a",{attrs:{href:"#fee-output",title:"wikilink"}},[e._v("fee output")]),e._v(" for more\ninformation.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("maxadditionalfeecontribution=")]),e._v(", if the sender is willing to pay for\nincreased fee, an integer defining the maximum amount in satoshis\nthat the sender is willing to contribute towards fees for the\nadditional inputs. "),n("code",[e._v("maxadditionalfeecontribution")]),e._v(" must be ignored if\nset to less than zero. See "),n("a",{attrs:{href:"#fee-output",title:"wikilink"}},[e._v("fee output")]),e._v(" for\nmore information.")])]),e._v(" "),n("p",[e._v("Note that both "),n("code",[e._v("maxadditionalfeecontribution=")]),e._v(" and\n"),n("code",[e._v("additionalfeeoutputindex=")]),e._v(" must be specified and valid for the receiver\nto be allowed to decrease an output belonging to the sender. This fee\ncontribution can't be used to pay for anything else than additional\ninput's weight.")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("minfeerate=")]),e._v(", a decimal in satoshi per vbyte that the sender can\nuse to constraint the receiver to not drop the minimum fee rate too\nmuch.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("disableoutputsubstitution=")]),e._v(", a boolean indicating if the sender\nforbids the receiver to substitute the receiver's output, see\n"),n("a",{attrs:{href:"#output-substitution",title:"wikilink"}},[e._v("payment output substitution")]),e._v(".\n(default to "),n("code",[e._v("false")]),e._v(")")])])]),e._v(" "),n("h3",{attrs:{id:"receiver-s-well-known-errors-receivers-well-known-errors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receiver-s-well-known-errors-receivers-well-known-errors"}},[e._v("#")]),e._v(" Receiver's well known errors {#receivers_well_known_errors}")]),e._v(" "),n("p",[e._v("If for some reason the receiver is unable to create a payjoin proposal,\nit will reply with a HTTP code different than 200. The receiver is not\nconstrained to specific set of errors, some are specified in this\nproposal.")]),e._v(" "),n("p",[e._v("The errors have the following format:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('{\n    "errorCode": "leaking-data",\n    "message": "Key path information or GlobalXPubs should not be included in the original PSBT."\n}\n')])])]),n("p",[e._v("The well-known error codes are:")]),e._v(" "),n("p",[e._v("Error code               Meaning")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("unavailable              The payjoin endpoint is not available for now.\nnot-enough-money         The receiver added some inputs but could not bump the fee of the payjoin proposal.\nversion-unsupported      This version of payjoin is not supported.\noriginal-psbt-rejected   The receiver rejected the original PSBT.")]),e._v(" "),n("p",[e._v("The receiver is allowed to return implementation specific errors which\nmay assist the sender to diagnose any issue.")]),e._v(" "),n("p",[e._v("However, it is important that error codes that are not well-known and\nthat the message do not appear on the sender's software user interface.\nSuch error codes or messages could be used maliciously to phish a non\ntechnical user. Instead those errors or messages can only appear in\ndebug logs.")]),e._v(" "),n("p",[e._v("It is advised to hard code the description of the well known error codes\ninto the sender's software.")]),e._v(" "),n("h3",{attrs:{id:"fee-output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fee-output"}},[e._v("#")]),e._v(" Fee output")]),e._v(" "),n("p",[e._v("In some situation, the sender might want to pay some additional fee in\nthe payjoin proposal. If such is the case, the sender must use both\n"),n("a",{attrs:{href:"#optional-params",title:"wikilink"}},[e._v("optional parameters")]),e._v(" "),n("code",[e._v("additionalfeeoutputindex=")]),e._v(" and "),n("code",[e._v("maxadditionalfeecontribution=")]),e._v(" to\nindicate which output and how much the receiver can substract fee.")]),e._v(" "),n("p",[e._v("There is several cases where a fee output is useful:")]),e._v(" "),n("ul",[n("li",[e._v("The sender's original transaction's fee rate is at the minimum\naccepted by the network, aka "),n("code",[e._v("minimum relay transaction fee rate")]),e._v(",\nwhich is typically 1 satoshi per vbyte.")])]),e._v(" "),n("p",[e._v("In such case, the receiver will need to increase the fee of the\ntransaction after adding his own inputs to not drop below the minimum\nrelay transaction fee rate.")]),e._v(" "),n("ul",[n("li",[e._v("The sender's wallet software is using round fee rate.")])]),e._v(" "),n("p",[e._v("If the sender's fee rate is always round, then a blockchain analyst can\neasily spot the transactions of the sender involving payjoin by checking\nif, when removing a single input to the suspected payjoin transaction,\nthe resulting fee rate is round. To prevent this, the sender can agree\nto pay more more fee so the receiver make sure that the payjoin\ntransaction fee is also round.")]),e._v(" "),n("ul",[n("li",[e._v("The sender's transaction is time sensitive.")])]),e._v(" "),n("p",[e._v("When a sender pick a specific fee rate, the sender expects the\ntransaction to be confirmed after a specific amount of time. But if the\nreceiver adds an input without bumping the fee of the transaction, the\npayjoin transaction fee rate will be lower, and thus, longer to confirm.")]),e._v(" "),n("p",[e._v("Our recommendation for "),n("code",[e._v("maxadditionalfeecontribution=")]),e._v(" is\n"),n("code",[e._v("originalPSBTFeeRate * vsize(sender_input_type)")]),e._v(".")]),e._v(" "),n("p",[e._v("sender_input_type   vsize(sender_input_type)")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("P2WPKH              68\nP2PKH               148\nP2SH-P2WPKH         91")]),e._v(" "),n("h3",{attrs:{id:"receiver-s-original-psbt-checklist-receivers-original-psbt-checklist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receiver-s-original-psbt-checklist-receivers-original-psbt-checklist"}},[e._v("#")]),e._v(" Receiver's original PSBT checklist {#receivers_original_psbt_checklist}")]),e._v(" "),n("p",[e._v("The receiver needs to do some check on the original PSBT before\nproceeding:")]),e._v(" "),n("ul",[n("li",[e._v("Non-interactive receivers (like a payment processor) need to check\nthat the original PSBT is broadcastable. "),n("code",[e._v("*")])]),e._v(" "),n("li",[e._v("If the sender included inputs in the original PSBT owned by the\nreceiver, the receiver must either return error\n"),n("code",[e._v("original-psbt-rejected")]),e._v(" or make sure they do not sign those inputs\nin the payjoin proposal.")]),e._v(" "),n("li",[e._v("If the sender's inputs are all from the same scriptPubKey type, the\nreceiver must match the same type. If the receiver can't match the\ntype, they must return error "),n("code",[e._v("unavailable")]),e._v(".")]),e._v(" "),n("li",[e._v("Make sure that the inputs included in the original transaction have\nnever been seen before.\n"),n("ul",[n("li",[e._v("This prevent "),n("a",{attrs:{href:"#probing-attack",title:"wikilink"}},[e._v("probing attacks")]),e._v(".")]),e._v(" "),n("li",[e._v("This prevent reentrant payjoin, where a sender attempts to use\npayjoin transaction as a new original transaction for a new\npayjoin.")])])])]),e._v(" "),n("p",[n("code",[e._v("*")]),e._v(": Interactive receivers are not required to validate the original\nPSBT because they are not exposed to "),n("a",{attrs:{href:"#probing-attack",title:"wikilink"}},[e._v("probing\nattacks")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"sender-s-payjoin-proposal-checklist-senders-payjoin-proposal-checklist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sender-s-payjoin-proposal-checklist-senders-payjoin-proposal-checklist"}},[e._v("#")]),e._v(" Sender's payjoin proposal checklist {#senders_payjoin_proposal_checklist}")]),e._v(" "),n("p",[e._v("The sender should check the payjoin proposal before signing it to\nprevent a malicious receiver from stealing money.")]),e._v(" "),n("ul",[n("li",[e._v("Verify that the absolute fee of the payjoin proposal is equals or\nhigher than the original PSBT.")]),e._v(" "),n("li",[e._v("If the receiver's BIP21 signalled "),n("code",[e._v("pjos=0")]),e._v(", disable payment output\nsubstitution.")]),e._v(" "),n("li",[e._v("Verify that the transaction version, and the nLockTime are\nunchanged.")]),e._v(" "),n("li",[e._v("Check that the sender's inputs' sequence numbers are unchanged.")]),e._v(" "),n("li",[e._v("For each inputs in the proposal:\n"),n("ul",[n("li",[e._v("Verify that no keypaths is in the PSBT input")]),e._v(" "),n("li",[e._v("Verify that no partial signature has been filled")]),e._v(" "),n("li",[e._v("If it is one of the sender's input\n"),n("ul",[n("li",[e._v("Verify that input's sequence is unchanged.")]),e._v(" "),n("li",[e._v("Verify the PSBT input is not finalized")]),e._v(" "),n("li",[e._v("Verify that "),n("code",[e._v("non_witness_utxo")]),e._v(" and "),n("code",[e._v("witness_utxo")]),e._v(" are not\nspecified.")])])]),e._v(" "),n("li",[e._v("If it is one of the receiver's input\n"),n("ul",[n("li",[e._v("Verify the PSBT input is finalized")]),e._v(" "),n("li",[e._v("Verify that "),n("code",[e._v("non_witness_utxo")]),e._v(" or "),n("code",[e._v("witness_utxo")]),e._v(" are filled\nin.")])])]),e._v(" "),n("li",[e._v("Verify that the payjoin proposal did not introduced mixed\ninput's sequence.")]),e._v(" "),n("li",[e._v("Verify that the payjoin proposal did not introduced mixed\ninput's type.")]),e._v(" "),n("li",[e._v("Verify that all of sender's inputs from the original PSBT are\nin the proposal.")])])]),e._v(" "),n("li",[e._v("For each outputs in the proposal:\n"),n("ul",[n("li",[e._v("Verify that no keypaths is in the PSBT output")]),e._v(" "),n("li",[e._v("If the output is the "),n("a",{attrs:{href:"#fee-output",title:"wikilink"}},[e._v("fee output")]),e._v(":\n"),n("ul",[n("li",[e._v("The amount that was substracted from the output's value is\nless than or equal to "),n("code",[e._v("maxadditionalfeecontribution")]),e._v(". Let's\ncall this amount "),n("code",[e._v("actual contribution")]),e._v(".")]),e._v(" "),n("li",[e._v("Make sure the actual contribution is only paying fee: The\n"),n("code",[e._v("actual contribution")]),e._v(" is less than or equals to the\ndifference of absolute fee between the payjoin proposal and\nthe original PSBT.")]),e._v(" "),n("li",[e._v("Make sure the actual contribution is only paying for fee\nincurred by additional inputs: "),n("code",[e._v("actual contribution")]),e._v(" is less\nthan or equals to\n"),n("code",[e._v("originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))")]),e._v(".\n(see "),n("a",{attrs:{href:"#fee-output",title:"wikilink"}},[e._v("Fee output")]),e._v(" section)")])])]),e._v(" "),n("li",[e._v("If the output is the payment output and payment output\nsubstitution is allowed.\n"),n("ul",[n("li",[e._v("Do not make any check")])])]),e._v(" "),n("li",[e._v("Else\n"),n("ul",[n("li",[e._v("Make sure the output's value did not decrease.")])])]),e._v(" "),n("li",[e._v("Verify that all sender's outputs (ie, all outputs except the\noutput actually paid to the receiver) from the original PSBT are\nin the proposal.")])])]),e._v(" "),n("li",[e._v("Once the proposal is signed, if "),n("code",[e._v("minfeerate")]),e._v(" was specified, check\nthat the fee rate of the payjoin transaction is not less than this\nvalue.")])]),e._v(" "),n("p",[e._v("The sender must be careful to only sign the inputs that were present in\nthe original PSBT and nothing else.")]),e._v(" "),n("p",[e._v("Note:")]),e._v(" "),n("ul",[n("li",[e._v("The sender must allow the receiver to add/remove or modify the\nreceiver's own outputs. (if payment output substitution is\ndisabled, the receiver's outputs must not be removed or decreased\nin value)")]),e._v(" "),n("li",[e._v("The sender should allow the receiver to not add any inputs. This is\nuseful for the receiver to change the paymout output scriptPubKey\ntype.")]),e._v(" "),n("li",[e._v("If no input have been added, the sender's wallet implementation\nshould accept the payjoin proposal, but not mark the transaction as\nan actual payjoin in the user interface.")])]),e._v(" "),n("p",[e._v("Our method of checking the fee allows the receiver and the sender to\nbatch payments in the payjoin transaction. It also allows the receiver\nto pay the fee for batching adding his own outputs.")]),e._v(" "),n("h2",{attrs:{id:"rationale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),n("p",[e._v("There is several consequences of our proposal:")]),e._v(" "),n("ul",[n("li",[e._v("The receiver can bump the fee of the original transaction.")]),e._v(" "),n("li",[e._v("The receiver can modify the outputs of the original PSBT.")]),e._v(" "),n("li",[e._v("The sender must provide the UTXO information (Witness or previous\ntransaction) in the PSBT.")])]),e._v(" "),n("h3",{attrs:{id:"respecting-the-minimum-relay-fee-policy-respecting-the-minimum-relay-fee-policy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#respecting-the-minimum-relay-fee-policy-respecting-the-minimum-relay-fee-policy"}},[e._v("#")]),e._v(" Respecting the minimum relay fee policy {#respecting_the_minimum_relay_fee_policy}")]),e._v(" "),n("p",[e._v("To be properly relayed, a Bitcoin transaction needs to pay at least 1\nsatoshi per virtual byte. When blocks are not full, the original\ntransaction might already at the minimum relay fee rate (currently 1\nsatoshi per virtual byte), so if the receiver adds their own input, they\nneed to make sure the fee is increased such that the rate does not drop\nbelow the minimum relay fee rate. In such case, the sender must set both\n"),n("code",[e._v("maxadditionalfeecontribution=")]),e._v(" and "),n("code",[e._v("additionalfeeoutputindex=")]),e._v(".")]),e._v(" "),n("p",[e._v("See the "),n("a",{attrs:{href:"#fee-output",title:"wikilink"}},[e._v("Fee output")]),e._v(" section for more\ninformation.")]),e._v(" "),n("p",[e._v("We also recommend the sender to set "),n("code",[e._v("minfeerate=")]),e._v(", as the sender's node\npolicy might be different from the receiver's policy.")]),e._v(" "),n("h3",{attrs:{id:"defeating-heuristics-based-on-the-fee-calculation-defeating-heuristics-based-on-the-fee-calculation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defeating-heuristics-based-on-the-fee-calculation-defeating-heuristics-based-on-the-fee-calculation"}},[e._v("#")]),e._v(" Defeating heuristics based on the fee calculation {#defeating_heuristics_based_on_the_fee_calculation}")]),e._v(" "),n("p",[e._v("Most wallets are creating a round fee rate (like 2 sat/b). If the\npayjoin transaction's fee was not increased by the added size, then\nthose payjoin transactions could easily be identifiable on the\nblockchain.")]),e._v(" "),n("p",[e._v("Not only would those transactions stand out by not having a round fee\n(like 1.87 sat/b), but any suspicion of payjoin could be confirmed by\nchecking if removing one input would create a round fee rate. In such\ncase, the sender must set both "),n("code",[e._v("maxadditionalfeecontribution=")]),e._v(" and\n"),n("code",[e._v("additionalfeeoutputindex=")]),e._v(".")]),e._v(" "),n("p",[e._v("The recommended value "),n("code",[e._v("maxadditionalfeecontribution=")]),e._v(" is explained in\nthe "),n("a",{attrs:{href:"#fee-output",title:"wikilink"}},[e._v("Fee output")]),e._v(" section. We also recommend the\nsender to set "),n("code",[e._v("minfeerate=")]),e._v(", as the sender's node policy might be\ndifferent from the receiver's policy.")]),e._v(" "),n("h3",{attrs:{id:"receiver-does-not-need-to-be-a-full-node-receiver-does-not-need-to-be-a-full-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receiver-does-not-need-to-be-a-full-node-receiver-does-not-need-to-be-a-full-node"}},[e._v("#")]),e._v(" Receiver does not need to be a full node {#receiver_does_not_need_to_be_a_full_node}")]),e._v(" "),n("p",[e._v("Because the receiver needs to bump the fee to keep the same fee rate as\nthe original PSBT, it needs the input's UTXO information to know what\nis the original fee rate. Without PSBT, light wallets like Wasabi Wallet\nwould not be able to receive a payjoin transaction.")]),e._v(" "),n("p",[e._v("The validation (policy and consensus) of the original transaction is\noptional: a receiver without a full node can decide to create the\npayjoin transaction and automatically broadcast the original transaction\nafter a timeout of 1 minute, and only verify that it has been propagated\nin the network.")]),e._v(" "),n("p",[e._v("However, non-interactive receivers (like a payment processor) need to\nverify the transaction to prevent UTXO probing attacks.")]),e._v(" "),n("p",[e._v("This is not a concern for interactive receivers like Wasabi Wallet,\nbecause those receivers can just limit the number of original PSBT\nproposals of a specific address to one. With such wallets, the attacker\nhas no way to generate new deposit addresses to probe the UTXOs.")]),e._v(" "),n("h3",{attrs:{id:"span-id-spare-change-span-spare-change-donation-spare-change-donation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-spare-change-span-spare-change-donation-spare-change-donation"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="spare-change">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" Spare change donation {#spare_change_donation}")]),e._v(" "),n("p",[e._v("Small change inside wallets are detrimental to privacy. Mixers like\nWasabi wallet, because of its protocol, eventually generate such "),n("a",{attrs:{href:"https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("small\nchange"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("A common way to protect your privacy is to donate those spare changes,\nto deposit them in an exchange or on your favorite merchant's store\naccount. Those kind of transactions can easily be spotted on the\nblockchain: There is only one output.")]),e._v(" "),n("p",[e._v("However, if you donate via payjoin, it will look like a normal\ntransaction.")]),e._v(" "),n("p",[e._v("On top of this the receiver can poison analysis by randomly faking a\nround amount of satoshi for the additional output.")]),e._v(" "),n("h3",{attrs:{id:"span-id-output-substitution-span-payment-output-substitution-payment-output-substitution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-output-substitution-span-payment-output-substitution-payment-output-substitution"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="output-substitution">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" Payment output substitution {#payment_output_substitution}")]),e._v(" "),n("p",[e._v("Unless disallowed by sender explicitely via\n`disableoutputsubstitution=true` or by the BIP21 url via query\nparameter the `pjos=0`, the receiver is free to decrease the amount,\nremove, or change the scriptPubKey output paying to himself. Note that\nif payment output substitution is disallowed, the reveiver can still\nincrease the amount of the output. (See "),n("a",{attrs:{href:"#reference-impl",title:"wikilink"}},[e._v("the reference\nimplementation")]),e._v(")")]),e._v(" "),n("p",[e._v("For example, if the sender's scriptPubKey type is P2WPKH while the\nreceiver's payment output in the original PSBT is P2SH, then the\nreceiver can substitute the payment output to be P2WPKH to match the\nsender's scriptPubKey type.")]),e._v(" "),n("h3",{attrs:{id:"span-id-unsecured-payjoin-span-unsecured-payjoin-server-unsecured-payjoin-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-unsecured-payjoin-span-unsecured-payjoin-server-unsecured-payjoin-server"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="unsecured-payjoin">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" Unsecured payjoin server {#unsecured_payjoin_server}")]),e._v(" "),n("p",[e._v("A receiver might run the payment server (generating the BIP21 invoice)\non a different server than the payjoin server, which could be less\ntrusted than the payment server.")]),e._v(" "),n("p",[e._v("In such case, the payment server can signal to the sender, via the BIP21\nparameter "),n("code",[e._v("pjos=0")]),e._v(", that they MUST disallow "),n("a",{attrs:{href:"#output-substitution",title:"wikilink"}},[e._v("payment output\nsubstitution")]),e._v(". A compromised payjoin\nserver could steal the hot wallet outputs of the receiver, but would not\nbe able to re-route payment to himself.")]),e._v(" "),n("h3",{attrs:{id:"impacted-heuristics-impacted-heuristics"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#impacted-heuristics-impacted-heuristics"}},[e._v("#")]),e._v(" Impacted heuristics {#impacted_heuristics}")]),e._v(" "),n("p",[e._v("Our proposal of payjoin is breaking the following blockchain heuristics:")]),e._v(" "),n("ul",[n("li",[e._v("Common inputs heuristics.")])]),e._v(" "),n("p",[e._v("Because payjoin is mixing the inputs of the sender and receiver, this\nheuristic becomes unreliable.")]),e._v(" "),n("ul",[n("li",[e._v("Change identification from scriptPubKey type heuristics")])]),e._v(" "),n("p",[e._v("When Alice pays Bob, if Alice is using P2SH but Bob's deposit address\nis P2WPKH, the heuristic would assume that the P2SH output is the change\naddress of Alice. This is now however a broken assumption, as the\npayjoin receiver has the freedom to mislead analytics by purposefully\nchanging the invoice's address in the payjoin transaction.")]),e._v(" "),n("p",[e._v("See "),n("a",{attrs:{href:"#output-substitution",title:"wikilink"}},[e._v("payment output substitution")]),e._v(".")]),e._v(" "),n("ul",[n("li",[e._v("Change identification from round change amount")])]),e._v(" "),n("p",[e._v("If Alice pays Bob, she might be tempted to pay him a round amount, like\n"),n("code",[e._v("1.23000000 BTC")]),e._v(". When this happens, blockchain analysis often\nidentifies the output without the round amount as the change of the\ntransaction.")]),e._v(" "),n("p",[e._v("For this reason, during a "),n("a",{attrs:{href:"#spare-change",title:"wikilink"}},[e._v("spare change")]),e._v(" case,\nthe receiver may add an output with a rounded amount randomly.")]),e._v(" "),n("h2",{attrs:{id:"attack-vectors-attack-vectors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attack-vectors-attack-vectors"}},[e._v("#")]),e._v(" Attack vectors {#attack_vectors}")]),e._v(" "),n("h3",{attrs:{id:"span-id-probing-attack-span-on-the-receiver-side-utxo-probing-attack-on-the-receiver-side-utxo-probing-attack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-probing-attack-span-on-the-receiver-side-utxo-probing-attack-on-the-receiver-side-utxo-probing-attack"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="probing-attack">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" On the receiver side: UTXO probing attack {#on_the_receiver_side_utxo_probing_attack}")]),e._v(" "),n("p",[e._v("When the receiver creates a payjoin proposal, they expose one or more\ninputs belonging to them.")]),e._v(" "),n("p",[e._v("An attacker could create multiple original transactions in order to\nlearn the UTXOs of the receiver, while not broadcasting the payjoin\nproposal.")]),e._v(" "),n("p",[e._v("While we cannot prevent this type of attack entirely, we implemented the\nfollowing mitigations:")]),e._v(" "),n("ul",[n("li",[e._v("When the receiver detects an original transaction being broadcast,\nor if the receiver detects that the original transaction has been\ndouble spent, then they will reuse the UTXO that was exposed for the\nnext payjoin.")]),e._v(" "),n("li",[e._v("While the exposed UTXO will be reused in priority to not leak other\nUTXOs, there is no strong guarantee about it. This prevents the\nattacker from detecting with certainty the next payjoin of the\nmerchant to another peer.")])]),e._v(" "),n("p",[e._v("Note that probing attacks are only a problem for automated payment\nsystems such as BTCPay Server. End-user wallets with payjoin\ncapabilities are not affected, as the attacker can't create multiple\ninvoices to force the receiver to expose their UTXOs.")]),e._v(" "),n("h3",{attrs:{id:"on-the-sender-side-double-payment-risk-for-hardware-wallets-on-the-sender-side-double-payment-risk-for-hardware-wallets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#on-the-sender-side-double-payment-risk-for-hardware-wallets-on-the-sender-side-double-payment-risk-for-hardware-wallets"}},[e._v("#")]),e._v(" On the sender side: Double payment risk for hardware wallets {#on_the_sender_side_double_payment_risk_for_hardware_wallets}")]),e._v(" "),n("p",[e._v("For a successful payjoin to happen, the sender needs to sign two\ntransactions double spending each other: The original transaction and\nthe payjoin proposal.")]),e._v(" "),n("p",[e._v("The sender's software wallet can verify that the payjoin proposal is\nlegitimate by the sender's checklist.")]),e._v(" "),n("p",[e._v("However, a hardware wallet can't verify that this is indeed the case.\nThis means that the security guarantee of the hardware wallet is\ndecreased. If the sender's software is compromised, the hardware wallet\nwould sign two valid transactions, thus sending two payments.")]),e._v(" "),n("p",[e._v("Without payjoin, the maximum amount of money that could be lost by a\ncompromised software is equal to one payment (via "),n("a",{attrs:{href:"#output-substitution",title:"wikilink"}},[e._v("payment output\nsubstitution")]),e._v("). Note that the sender\ncan disallow "),n("a",{attrs:{href:"#output-substitution",title:"wikilink"}},[e._v("payment output\nsubstitution")]),e._v(" by using the optional\nparameter "),n("code",[e._v("disableoutputsubstitution=true")]),e._v(".")]),e._v(" "),n("p",[e._v("With payjoin, the maximum amount of money that can be lost is equal to\ntwo payments.")]),e._v(" "),n("h2",{attrs:{id:"span-id-reference-impl-span-reference-sender-s-implementation-reference-senders-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-reference-impl-span-reference-sender-s-implementation-reference-senders-implementation"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="reference-impl">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" Reference sender's implementation {#reference_senders_implementation}")]),e._v(" "),n("p",[e._v("Here is pseudo code of a sender implementation. "),n("code",[e._v("RequestPayjoin")]),e._v(" takes\nthe bip21 URI of the payment, the wallet and the "),n("code",[e._v("signedPSBT")]),e._v(".")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("signedPSBT")]),e._v(" represents a PSBT which has been fully signed, but not\nyet finalized. We then prepare "),n("code",[e._v("originalPSBT")]),e._v(" from the "),n("code",[e._v("signedPSBT")]),e._v(" via\nthe "),n("code",[e._v("CreateOriginalPSBT")]),e._v(" function and get back the "),n("code",[e._v("proposal")]),e._v(".")]),e._v(" "),n("p",[e._v("While we verify the "),n("code",[e._v("proposal")]),e._v(", we also import into it informations\nabout our own inputs and outputs from the "),n("code",[e._v("signedPSBT")]),e._v(". At the end of\nthis "),n("code",[e._v("RequestPayjoin")]),e._v(", the proposal is verified and ready to be signed.")]),e._v(" "),n("p",[e._v("We logged the different PSBT involved, and show the result in our "),n("a",{attrs:{href:"#test-vectors",title:"wikilink"}},[e._v("test\nvectors")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('public async Task<PSBT> RequestPayjoin(\n    BIP21Uri bip21,\n    Wallet wallet,\n    PSBT signedPSBT,\n    PayjoinClientParameters optionalParameters)\n{\n    Log("Unfinalized signed PSBT" + signedPSBT);\n    // Extracting the pj link.\n    var endpoint = bip21.ExtractPayjointEndpoint();\n    if (signedPSBT.IsAllFinalized())\n        throw new InvalidOperationException("The original PSBT should not be finalized.");\n    ScriptPubKeyType inputScriptType = wallet.ScriptPubKeyType();\n    PSBTOutput feePSBTOutput = null;\n\n    bool allowOutputSubstitution = !optionalParameters.DisableOutputSubstitution;\n    if (bip21.Parameters.Contains("pjos") && bip21.Parameters["pjos"] == "0")\n        allowOutputSubstitution = false;\n\n    if (optionalParameters.AdditionalFeeOutputIndex != null && optionalParameters.MaxAdditionalFeeContribution != null)\n        feePSBTOutput = signedPSBT.Outputs[optionalParameters.AdditionalFeeOutputIndex];\n    Script paymentScriptPubKey = bip21.Address == null ? null : bip21.Address.ScriptPubKey;\n    decimal originalFee = signedPSBT.GetFee();\n    PSBT originalPSBT = CreateOriginalPSBT(signedPSBT);\n    Transaction originalGlobalTx = signedPSBT.GetGlobalTransaction();\n    TxOut feeOutput = feePSBTOutput == null ? null : originalGlobalTx.Outputs[feePSBTOutput.Index];\n    var originalInputs = new Queue<(TxIn OriginalTxIn, PSBTInput SignedPSBTInput)>();\n    for (int i = 0; i < originalGlobalTx.Inputs.Count; i++)\n    {\n        originalInputs.Enqueue((originalGlobalTx.Inputs[i], signedPSBT.Inputs[i]));\n    }\n    var originalOutputs = new Queue<(TxOut OriginalTxOut, PSBTOutput SignedPSBTOutput)>();\n    for (int i = 0; i < originalGlobalTx.Outputs.Count; i++)\n    {\n      originalOutputs.Enqueue((originalGlobalTx.Outputs[i], signedPSBT.Outputs[i]));\n    }\n    // Add the client side query string parameters\n    endpoint = ApplyOptionalParameters(endpoint, optionalParameters);\n    Log("original PSBT" + originalPSBT);\n    PSBT proposal = await SendOriginalTransaction(endpoint, originalPSBT, cancellationToken);\n    Log("payjoin proposal" + proposal);\n    // Checking that the PSBT of the receiver is clean\n    if (proposal.GlobalXPubs.Any())\n    {\n        throw new PayjoinSenderException("GlobalXPubs should not be included in the receiver\'s PSBT");\n    }\n    ////////////\n\n    if (proposal.CheckSanity() is List<PSBTError> errors && errors.Count > 0)\n        throw new PayjoinSenderException($"The proposal PSBT is not sane ({errors[0]})");\n\n    var proposalGlobalTx = proposal.GetGlobalTransaction();\n    // Verify that the transaction version, and nLockTime are unchanged.\n    if (proposalGlobalTx.Version != originalGlobalTx.Version)\n        throw new PayjoinSenderException($"The proposal PSBT changed the transaction version");\n    if (proposalGlobalTx.LockTime != originalGlobalTx.LockTime)\n        throw new PayjoinSenderException($"The proposal PSBT changed the nLocktime");\n\n    HashSet<Sequence> sequences = new HashSet<Sequence>();\n    // For each inputs in the proposal:\n    foreach (PSBTInput proposedPSBTInput in proposal.Inputs)\n    {\n        if (proposedPSBTInput.HDKeyPaths.Count != 0)\n            throw new PayjoinSenderException("The receiver added keypaths to an input");\n        if (proposedPSBTInput.PartialSigs.Count != 0)\n            throw new PayjoinSenderException("The receiver added partial signatures to an input");\n        PSBTInput proposedTxIn = proposalGlobalTx.Inputs.FindIndexedInput(proposedPSBTInput.PrevOut).TxIn;\n        bool isOurInput = originalInputs.Count > 0 && originalInputs.Peek().OriginalTxIn.PrevOut == proposedPSBTInput.PrevOut;\n        // If it is one of our input\n        if (isOurInput)\n        {\n            OutPoint inputPrevout = ourPrevouts.Dequeue();\n            TxIn originalTxin = originalGlobalTx.Inputs.FromOutpoint(inputPrevout);\n            PSBTInput originalPSBTInput = originalPSBT.Inputs.FromOutpoint(inputPrevout);\n            // Verify that sequence is unchanged.\n            if (input.OriginalTxIn.Sequence != proposedTxIn.Sequence)\n                throw new PayjoinSenderException("The proposedTxIn modified the sequence of one of our inputs")\n            // Verify the PSBT input is not finalized\n            if (proposedPSBTInput.IsFinalized())\n                throw new PayjoinSenderException("The receiver finalized one of our inputs");\n            // Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n            if (proposedPSBTInput.NonWitnessUtxo != null || proposedPSBTInput.WitnessUtxo != null)\n                throw new PayjoinSenderException("The receiver added non_witness_utxo or witness_utxo to one of our inputs");\n            sequences.Add(proposedTxIn.Sequence);\n            \n            // Fill up the info from the original PSBT input so we can sign and get fees.\n            proposedPSBTInput.NonWitnessUtxo = input.SignedPSBTInput.NonWitnessUtxo;\n            proposedPSBTInput.WitnessUtxo = input.SignedPSBTInput.WitnessUtxo;\n            // We fill up information we had on the signed PSBT, so we can sign it.\n            foreach (var hdKey in input.SignedPSBTInput.HDKeyPaths)\n            proposedPSBTInput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n            proposedPSBTInput.RedeemScript = signedPSBTInput.RedeemScript;\n            proposedPSBTInput.RedeemScript = input.SignedPSBTInput.RedeemScript;\n        }\n        else\n        {\n            // Verify the PSBT input is finalized\n            if (!proposedPSBTInput.IsFinalized())\n                throw new PayjoinSenderException("The receiver did not finalized one of their input");\n            // Verify that non_witness_utxo or witness_utxo are filled in.\n            if (proposedPSBTInput.NonWitnessUtxo == null && proposedPSBTInput.WitnessUtxo == null)\n                throw new PayjoinSenderException("The receiver did not specify non_witness_utxo or witness_utxo for one of their inputs");\n            sequences.Add(proposedTxIn.Sequence);\n            // Verify that the payjoin proposal did not introduced mixed inputs\' type.\n            if (inputScriptType != proposedPSBTInput.GetInputScriptPubKeyType())\n                throw new PayjoinSenderException("Mixed input type detected in the proposal");\n        }\n    }\n\n    // Verify that all of sender\'s inputs from the original PSBT are in the proposal.\n    if (originalInputs.Count != 0)\n        throw new PayjoinSenderException("Some of our inputs are not included in the proposal");\n\n    // Verify that the payjoin proposal did not introduced mixed inputs\' sequence.\n    if (sequences.Count != 1)\n        throw new PayjoinSenderException("Mixed sequence detected in the proposal");\n\n    decimal newFee = proposal.GetFee();\n    decimal additionalFee = newFee - originalFee;\n    if (additionalFee < 0)\n      throw new PayjoinSenderException("The receiver decreased absolute fee");\n    // For each outputs in the proposal:\n    foreach (PSBTOutput proposedPSBTOutput in proposal.Outputs)\n    {\n        // Verify that no keypaths is in the PSBT output\n        if (proposedPSBTOutput.HDKeyPaths.Count != 0)\n            throw new PayjoinSenderException("The receiver added keypaths to an output");\n        bool isOriginalOutput = originalOutputs.Count > 0 && originalOutputs.Peek().OriginalTxOut.ScriptPubKey == proposedPSBTOutput.ScriptPubKey;\n        if (isOriginalOutput)\n        {\n            var originalOutput = originalOutputs.Dequeue();\n            if (output.OriginalTxOut == feeOutput)\n            {\n                var actualContribution = feeOutput.Value - proposedPSBTOutput.Value;\n                // The amount that was substracted from the output\'s value is less than or equal to maxadditionalfeecontribution\n                if (actualContribution > optionalParameters.MaxAdditionalFeeContribution)\n                    throw new PayjoinSenderException("The actual contribution is more than maxadditionalfeecontribution");\n                // Make sure the actual contribution is only paying fee\n                if (actualContribution > additionalFee)\n                    throw new PayjoinSenderException("The actual contribution is not only paying fee");\n                // Make sure the actual contribution is only paying for fee incurred by additional inputs\n                int additionalInputsCount = proposalGlobalTx.Inputs.Count - originalGlobalTx.Inputs.Count;\n                if (actualContribution > originalFeeRate * GetVirtualSize(inputScriptType) * additionalInputsCount)\n                    throw new PayjoinSenderException("The actual contribution is not only paying for additional inputs");\n            }\n            else if (allowOutputSubstitution && output.OriginalTxOut.ScriptPubKey == paymentScriptPubKey)\n            {\n                // That\'s the payment output, the receiver may have changed it.\n            }\n            else\n            {\n                if (originalOutput.OriginalTxOut.Value > proposedPSBTOutput.Value)\n                    throw new PayjoinSenderException("The receiver decreased the value of one of the outputs");\n            }\n            // We fill up information we had on the signed PSBT, so we can sign it.\n            foreach (var hdKey in output.SignedPSBTOutput.HDKeyPaths)\n                proposedPSBTOutput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n            proposedPSBTOutput.RedeemScript = output.SignedPSBTOutput.RedeemScript;\n        }\n    }\n    // Verify that all of sender\'s outputs from the original PSBT are in the proposal.\n    if (originalOutputs.Count != 0)\n    {\n        // The payment output may have been substituted\n        if (!allowOutputSubstitution ||\n            originalOutputs.Count != 1 ||\n            originalOutputs.Dequeue().OriginalTxOut.ScriptPubKey != paymentScriptPubKey)\n            {\n                throw new PayjoinSenderException("Some of our outputs are not included in the proposal");\n            }\n    }\n\n    // After signing this proposal, we should check if minfeerate is respected.\n    Log("payjoin proposal filled with sender\'s information" + proposal);\n    return proposal;\n}\n\nint GetVirtualSize(ScriptPubKeyType? scriptPubKeyType)\n{\n    switch (scriptPubKeyType)\n    {\n        case ScriptPubKeyType.Legacy:\n            return 148;\n        case ScriptPubKeyType.Segwit:\n            return 68;\n        case ScriptPubKeyType.SegwitP2SH:\n            return 91;\n        default:\n            return 110;\n    }\n}\n\n// Finalize the signedPSBT and remove confidential information\nPSBT CreateOriginalPSBT(PSBT signedPSBT)\n{\n    var original = signedPSBT.Clone();\n    original = original.Finalize();\n    foreach (var input in original.Inputs)\n    {\n        input.HDKeyPaths.Clear();\n        input.PartialSigs.Clear();\n        input.Unknown.Clear();\n    }\n    foreach (var output in original.Outputs)\n    {\n        output.Unknown.Clear();\n        output.HDKeyPaths.Clear();\n    }\n    original.GlobalXPubs.Clear();\n    return original;\n}\n')])])]),n("h2",{attrs:{id:"span-id-test-vectors-span-test-vectors-test-vectors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span-id-test-vectors-span-test-vectors-test-vectors"}},[e._v("#")]),e._v(" "),n("code",[e._v('<span id="test-vectors">')]),e._v(" "),n("code",[e._v("</span>")]),e._v(" Test vectors {#test_vectors}")]),e._v(" "),n("p",[e._v("A successful exchange with:")]),e._v(" "),n("p",[e._v("InputScriptType   Orginal PSBT Fee rate   maxadditionalfeecontribution   additionalfeeoutputindex")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("P2SH-P2WSH        2 sat/vbyte             0.00000182                     0")]),e._v(" "),n("p",[n("code",[e._v("Unfinalized signed PSBT")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("cHNidP8BAHMCAAAAAY8nutGgJdyYGXWiBEb45Hoe9lWGbkxh/6bNiOJdCDuDAAAAAAD+////AtyVuAUAAAAAF6kUHehJ8GnSdBUOOv6ujXLrWmsJRDCHgIQeAAAAAAAXqRR3QJbbz0hnQ8IvQ0fptGn+votneofTAAAAAAEBIKgb1wUAAAAAF6kU3k4ekGHKWRNbA1rV5tR5kEVDVNCHAQQWABTHikVyU1WCjVZYB03VJg1fy2mFMCICAxWawBqg1YdUxLTYt9NJ7R7fzws2K09rVRBnI6KFj4UWRzBEAiB8Q+A6dep+Rz92vhy26lT0AjZn4PRLi8Bf9qoB/CMk0wIgP/Rj2PWZ3gEjUkTlhDRNAQ0gXwTO7t9n+V14pZ6oljUBIgYDFZrAGqDVh1TEtNi300ntHt/PCzYrT2tVEGcjooWPhRYYSFzWUDEAAIABAACAAAAAgAEAAAAAAAAAAAEAFgAURvYaK7pzgo7lhbSl/DeUan2MxRQiAgLKC8FYHmmul/HrXLUcMDCjfuRg/dhEkG8CO26cEC6vfBhIXNZQMQAAgAEAAIAAAACAAQAAAAEAAAAAAA==\n")])])]),n("p",[n("code",[e._v("Original PSBT")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("cHNidP8BAHMCAAAAAY8nutGgJdyYGXWiBEb45Hoe9lWGbkxh/6bNiOJdCDuDAAAAAAD+////AtyVuAUAAAAAF6kUHehJ8GnSdBUOOv6ujXLrWmsJRDCHgIQeAAAAAAAXqRR3QJbbz0hnQ8IvQ0fptGn+votneofTAAAAAAEBIKgb1wUAAAAAF6kU3k4ekGHKWRNbA1rV5tR5kEVDVNCHAQcXFgAUx4pFclNVgo1WWAdN1SYNX8tphTABCGsCRzBEAiB8Q+A6dep+Rz92vhy26lT0AjZn4PRLi8Bf9qoB/CMk0wIgP/Rj2PWZ3gEjUkTlhDRNAQ0gXwTO7t9n+V14pZ6oljUBIQMVmsAaoNWHVMS02LfTSe0e388LNitPa1UQZyOihY+FFgABABYAFEb2Giu6c4KO5YW0pfw3lGp9jMUUAAA=\n")])])]),n("p",[n("code",[e._v("payjoin proposal")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("cHNidP8BAJwCAAAAAo8nutGgJdyYGXWiBEb45Hoe9lWGbkxh/6bNiOJdCDuDAAAAAAD+////jye60aAl3JgZdaIERvjkeh72VYZuTGH/ps2I4l0IO4MBAAAAAP7///8CJpW4BQAAAAAXqRQd6EnwadJ0FQ46/q6NcutaawlEMIcACT0AAAAAABepFHdAltvPSGdDwi9DR+m0af6+i2d6h9MAAAAAAAEBIICEHgAAAAAAF6kUyPLL+cphRyyI5GTUazV0hF2R2NWHAQcXFgAUX4BmVeWSTJIEwtUb5TlPS/ntohABCGsCRzBEAiBnu3tA3yWlT0WBClsXXS9j69Bt+waCs9JcjWtNjtv7VgIge2VYAaBeLPDB6HGFlpqOENXMldsJezF9Gs5amvDQRDQBIQJl1jz1tBt8hNx2owTm+4Du4isx0pmdKNMNIjjaMHFfrQAAAA==\n")])])]),n("p",[n("code",[e._v("payjoin proposal filled with sender's information")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("cHNidP8BAJwCAAAAAo8nutGgJdyYGXWiBEb45Hoe9lWGbkxh/6bNiOJdCDuDAAAAAAD+////jye60aAl3JgZdaIERvjkeh72VYZuTGH/ps2I4l0IO4MBAAAAAP7///8CJpW4BQAAAAAXqRQd6EnwadJ0FQ46/q6NcutaawlEMIcACT0AAAAAABepFHdAltvPSGdDwi9DR+m0af6+i2d6h9MAAAAAAQEgqBvXBQAAAAAXqRTeTh6QYcpZE1sDWtXm1HmQRUNU0IcBBBYAFMeKRXJTVYKNVlgHTdUmDV/LaYUwIgYDFZrAGqDVh1TEtNi300ntHt/PCzYrT2tVEGcjooWPhRYYSFzWUDEAAIABAACAAAAAgAEAAAAAAAAAAAEBIICEHgAAAAAAF6kUyPLL+cphRyyI5GTUazV0hF2R2NWHAQcXFgAUX4BmVeWSTJIEwtUb5TlPS/ntohABCGsCRzBEAiBnu3tA3yWlT0WBClsXXS9j69Bt+waCs9JcjWtNjtv7VgIge2VYAaBeLPDB6HGFlpqOENXMldsJezF9Gs5amvDQRDQBIQJl1jz1tBt8hNx2owTm+4Du4isx0pmdKNMNIjjaMHFfrQABABYAFEb2Giu6c4KO5YW0pfw3lGp9jMUUIgICygvBWB5prpfx61y1HDAwo37kYP3YRJBvAjtunBAur3wYSFzWUDEAAIABAACAAAAAgAEAAAABAAAAAAA=\n")])])]),n("h2",{attrs:{id:"implementations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#implementations"}},[e._v("#")]),e._v(" Implementations")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/BlueWallet/BlueWallet",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BlueWallet"),n("OutboundLink")],1),e._v(" is\nin the process of implementing the protocol.")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/btcpayserver/btcpayserver",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("BTCPay\nServer"),n("OutboundLink")],1),e._v(" has\nimplemented sender and receiver side of this protocol.")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/zkSNACKs/WalletWasabi/",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wasabi\nWallet"),n("OutboundLink")],1),e._v(" has\nmerged sender's support.")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/JoinMarket-Org/joinmarket-clientserver",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Join\nMarket"),n("OutboundLink")],1),e._v("\nis in the process of implementing the protocol.")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/bitcoinjs/payjoin-client",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript sender\nimplementation"),n("OutboundLink")],1),e._v(".")])]),e._v(" "),n("h2",{attrs:{id:"backward-compatibility-backward-compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#backward-compatibility-backward-compatibility"}},[e._v("#")]),e._v(" Backward compatibility {#backward_compatibility}")]),e._v(" "),n("p",[e._v("The receivers are advertising payjoin capabilities through "),n("a",{attrs:{href:"bip-0021.mediawiki",title:"wikilink"}},[e._v("BIP21's URI\nScheme")]),e._v(".")]),e._v(" "),n("p",[e._v("Senders not supporting payjoin will just ignore the "),n("code",[e._v("pj")]),e._v(" variable and\nthus, will proceed to normal payment.")]),e._v(" "),n("h2",{attrs:{id:"special-thanks-special-thanks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#special-thanks-special-thanks"}},[e._v("#")]),e._v(" Special thanks {#special_thanks}")]),e._v(" "),n("p",[e._v("Special thanks to Kukks for developing the initial support to BTCPay\nServer, to junderw, AdamISZ, lukechilds, ncoelho, nopara73, lontivero,\nyahiheb, SomberNight, andrewkozlik, instagibbs, RHavar for all the\nfeedback we received since our first implementation. Thanks again to\nRHavar who wrote the "),n("a",{attrs:{href:"bip-0079.mediawiki",title:"wikilink"}},[e._v("BIP79 Bustapay")]),e._v("\nproposal, this gave a good starting point for our proposal.")])])}),[],!1,null,null,null);t.default=a.exports}}]);