(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{427:function(t,e,i){"use strict";i.r(e);var a=i(43),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"_145"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_145"}},[t._v("#")]),t._v(" 145")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[t._v("  BIP: 145\n  Layer: API/RPC\n  Title: getblocktemplate Updates for Segregated Witness\n  Author: Luke Dashjr <luke+bip22@dashjr.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0145\n  Status: Final\n  Type: Standards Track\n  Created: 2016-01-30\n  License: BSD-2-Clause\n           OPL\n")])])]),i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),i("p",[t._v("This BIP describes modifications to the getblocktemplate JSON-RPC call\n("),i("a",{attrs:{href:"bip-0022.mediawiki",title:"wikilink"}},[t._v("BIP 22")]),t._v(") to support segregated witness\nas defined by "),i("a",{attrs:{href:"bip-0141.mediawiki",title:"wikilink"}},[t._v("BIP 141")]),t._v(".")]),t._v(" "),i("h2",{attrs:{id:"specification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),i("h3",{attrs:{id:"block-template-block-template"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#block-template-block-template"}},[t._v("#")]),t._v(" Block Template {#block_template}")]),t._v(" "),i("p",[t._v("The template Object is revised to include a new key:")]),t._v(" "),i("h2",{attrs:{id:"template"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#template"}},[t._v("#")]),t._v(" template")]),t._v(" "),i("p",[t._v("Key\nweightlimit")]),t._v(" "),i("p",[t._v('The \'!\' rule prefix MUST be enabled on the "segwit" rule for\ntemplates including transactions with witness data. In particular, note\nthat even if the client\'s "rules" list lacks "segwit", server MAY\nsupport old miners by producing a witness-free template and omitting the\n\'!\' rule prefix for "segwit" in the template\'s "rules" list. If\nthe GBT server does not support producing witness-free templates after\nits activation, it must also use the \'!\' rule prefix in the\n"vbavailable" list prior to activation.')]),t._v(" "),i("h4",{attrs:{id:"transactions-object-format-transactions-object-format"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#transactions-object-format-transactions-object-format"}},[t._v("#")]),t._v(" Transactions Object Format {#transactions_object_format}")]),t._v(" "),i("p",[t._v('The Objects listed in the response\'s "transactions" key is revised to\ninclude these keys:')]),t._v(" "),i("h2",{attrs:{id:"template-transactions-element"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#template-transactions-element"}},[t._v("#")]),t._v(' template "transactions" element')]),t._v(" "),i("p",[t._v("Key\ntxid\nweight\nhash")]),t._v(" "),i("p",[t._v('Transactions with witness data may only be included if the template\'s\n"rules" list (see '),i("a",{attrs:{href:"bip-0009.mediawiki#getblocktemplate_changes",title:"wikilink"}},[t._v("BIP\n9")]),t._v(') includes\n"segwit".')]),t._v(" "),i("h3",{attrs:{id:"sigops"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#sigops"}},[t._v("#")]),t._v(" Sigops")]),t._v(" "),i("p",[t._v('For templates with "segwit" enabled as a rule, the "sigoplimit" and\n"sigops" keys must use the new values as calculated in '),i("a",{attrs:{href:"bip-0141.mediawiki#Sigops",title:"wikilink"}},[t._v("BIP\n141")]),t._v(".")]),t._v(" "),i("h3",{attrs:{id:"block-assembly-with-witness-transactions-block-assembly-with-witness-transactions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#block-assembly-with-witness-transactions-block-assembly-with-witness-transactions"}},[t._v("#")]),t._v(" Block Assembly with Witness Transactions {#block_assembly_with_witness_transactions}")]),t._v(" "),i("p",[t._v("When block assembly is done without witness transactions, no changes are\nmade by this BIP, and it should be assembled as previously.")]),t._v(" "),i("p",[t._v('When witness transactions are included in the block, the primary merkle\nroot MUST be calculated with those transactions\' "txid" field instead\nof "hash". A secondary merkle root MUST be calculated as per '),i("a",{attrs:{href:"bip-0141.mediawiki#Commitment_structure",title:"wikilink"}},[t._v("BIP\n141's commitment structure\nspecification")]),t._v(" to be\ninserted into the generation (coinbase) transaction.")]),t._v(" "),i("p",[t._v('Servers MUST NOT include a commitment in the "coinbasetxn" key on the\ntemplate. Clients MUST insert the commitment as an additional output at\nthe end of the final generation (coinbase) transaction. Only if the\ntemplate includes a "mutable" key (see '),i("a",{attrs:{href:"bip-0023.mediawiki#Mutations",title:"wikilink"}},[t._v("BIP 23\nMutations")]),t._v(') including\n"generation", the client MAY in that case place the commitment output\nin any position it chooses, provided that no later output matches the\ncommitment pattern.')]),t._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),i("p",[t._v("Segregated witness substantially changes the structure of blocks, so the\nprevious getblocktemplate specification is no longer sufficient. It\nadditionally also adds a new way of counting resource limits, and so GBT\nmust be extended to convey this information correctly as well.")]),t._v(" "),i("h2",{attrs:{id:"rationale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[t._v("#")]),t._v(" Rationale")]),t._v(" "),i("p",[t._v('Why doesn\'t "weightlimit" simply redefine the existing "sizelimit"?')]),t._v(" "),i("ul",[i("li",[t._v('"sizelimit" is already enforced by clients by counting the sum of\nbytes in transactions\' "data" keys.')]),t._v(" "),i("li",[t._v('Servers may wish to limit the overall size of a block, independently\nfrom the "weight" of the block.')])]),t._v(" "),i("p",[t._v('Why is "sigoplimit" redefined instead of a new "sigopweightlimit"\nbeing added?')]),t._v(" "),i("ul",[i("li",[t._v('The old limit was already arbitrarily defined, and could not be\ncounted by clients on their own anyway. The concept of "sigop\nweight" is merely a change in the arbitrary formula used.')])]),t._v(" "),i("p",[t._v('Why is "sigoplimit" divided by 4?')]),t._v(" "),i("ul",[i("li",[t._v("To resemble the previous values. (FIXME: is this a good reason?\nmaybe we shouldn't divide it?)")])]),t._v(" "),i("p",[t._v("Why is the witness commitment required to be added to the end of the\ngeneration transaction rather than anywhere else?")]),t._v(" "),i("ul",[i("li",[t._v("Servers which do not allow modification of the generation outputs\nought to be checking this as part of the validity of submissions. By\nrequiring a specific placement, they can simply strip the commitment\nand do a byte-for-byte comparison of the outputs. Placing it at the\nend avoids the possibility of a later output matching the pattern\nand overriding it.")])]),t._v(" "),i("p",[t._v('Why shouldn\'t the server simply add the commitment upfront in the\n"coinbasetxn", and simply send the client stripped transaction data?')]),t._v(" "),i("ul",[i("li",[t._v('It would become impossible for servers to specify only\n"coinbasevalue", since clients would no longer have the\ninformation required to construct the commitment.')]),t._v(" "),i("li",[t._v("getblocktemplate is intended to be a *decentralised* mining\nprotocol, and allowing clients to be blinded to the content of the\nblock works contrary to that purpose.")]),t._v(" "),i("li",[t._v('BIP 23\'s "transactions" mutations allow the client to modify the\ntransaction-set on their own, which is impossible without the\ncomplete transaction data.')])]),t._v(" "),i("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[t._v("#")]),t._v(" Reference Implementation {#reference_implementation}")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://github.com/bitcoin/libblkmaker/tree/segwit",target:"_blank",rel:"noopener noreferrer"}},[t._v("libblkmaker"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/luke-jr/eloipool/tree/segwit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eloipool"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/pull/7404/files",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitcoin Core"),i("OutboundLink")],1)])]),t._v(" "),i("h2",{attrs:{id:"see-also-see-also"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#see-also-see-also"}},[t._v("#")]),t._v(" See Also {#see_also}")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"bip-0009.mediawiki",title:"wikilink"}},[t._v("BIP 9: Version bits with timeout and\ndelay")])]),t._v(" "),i("li",[i("a",{attrs:{href:"bip-0022.mediawiki",title:"wikilink"}},[t._v("BIP 22: getblocktemplate -\nFundamentals")])]),t._v(" "),i("li",[i("a",{attrs:{href:"bip-0023.mediawiki",title:"wikilink"}},[t._v("BIP 23: getblocktemplate - Pooled\nMining")])]),t._v(" "),i("li",[i("a",{attrs:{href:"bip-0141.mediawiki",title:"wikilink"}},[t._v("BIP 141: Segregated Witness (Consensus\nlayer)")])])]),t._v(" "),i("h2",{attrs:{id:"copyright"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[t._v("#")]),t._v(" Copyright")]),t._v(" "),i("p",[t._v("This BIP is dual-licensed under the Open Publication License and BSD\n2-clause license.")])])}),[],!1,null,null,null);e.default=n.exports}}]);