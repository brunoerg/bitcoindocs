(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{482:function(e,t,a){"use strict";a.r(t);var n=a(43),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_70"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_70"}},[e._v("#")]),e._v(" 70")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("  BIP: 70\n  Layer: Applications\n  Title: Payment Protocol\n  Author: Gavin Andresen <gavinandresen@gmail.com>\n          Mike Hearn <mhearn@bitcoinfoundation.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0070\n  Status: Final\n  Type: Standards Track\n  Created: 2013-07-29\n")])])]),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("This BIP describes a protocol for communication between a merchant and\ntheir customer, enabling both a better customer experience and better\nsecurity against man-in-the-middle attacks on the payment process.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("The current, minimal Bitcoin payment protocol operates as follows:")]),e._v(" "),a("ol",[a("li",[e._v("Customer adds items to an online shopping basket, and decides to pay\nusing Bitcoin.")]),e._v(" "),a("li",[e._v("Merchant generates a unique payment address, associates it with the\ncustomer's order, and asks the customer to pay.")]),e._v(" "),a("li",[e._v("Customer copies the Bitcoin address from the merchant's web page\nand pastes it into whatever wallet they are using OR follows a\nbitcoin: link and their wallet is launched with the amount to be\npaid.")]),e._v(" "),a("li",[e._v("Customer authorizes payment to the merchant's address and\nbroadcasts the transaction through the Bitcoin p2p network.")]),e._v(" "),a("li",[e._v("Merchant's server detects payment and after sufficient transaction\nconfirmations considers the transaction final.")])]),e._v(" "),a("p",[e._v("This BIP extends the above protocol to support several new features:")]),e._v(" "),a("ol",[a("li",[e._v('Human-readable, secure payment destinations-- customers will be\nasked to authorize payment to "example.com" instead of an\ninscrutable, 34-character bitcoin address.')]),e._v(" "),a("li",[e._v("Secure proof of payment, which the customer can use in case of a\ndispute with the merchant.")]),e._v(" "),a("li",[e._v("Resistance from man-in-the-middle attacks that replace a merchant's\nbitcoin address with an attacker's address before a transaction is\nauthorized with a hardware wallet.")]),e._v(" "),a("li",[e._v("Payment received messages, so the customer knows immediately that\nthe merchant has received, and has processed (or is processing)\ntheir payment.")]),e._v(" "),a("li",[e._v("Refund addresses, automatically given to the merchant by the\ncustomer's wallet software, so merchants do not have to contact\ncustomers before refunding overpayments or orders that cannot be\nfulfilled for some reason.")])]),e._v(" "),a("h2",{attrs:{id:"protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol"}},[e._v("#")]),e._v(" Protocol")]),e._v(" "),a("p",[e._v("This BIP describes payment protocol messages encoded using Google's\nProtocol Buffers, authenticated using X.509 certificates, and\ncommunicated over http/https. Future BIPs might extend this payment\nprotocol to other encodings, PKI systems, or transport protocols.")]),e._v(" "),a("p",[e._v("The payment protocol consists of three messages; PaymentRequest,\nPayment, and PaymentACK, and begins with the customer somehow indicating\nthat they are ready to pay and the merchant's server responding with a\nPaymentRequest message:")]),e._v(" "),a("p",[a("code",[e._v("<img src=bip-0070/Protocol_Sequence.png>")]),e._v(" "),a("code",[e._v("</img>")])]),e._v(" "),a("h2",{attrs:{id:"messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#messages"}},[e._v("#")]),e._v(" Messages")]),e._v(" "),a("p",[e._v("The Protocol Buffers messages are defined in\n"),a("a",{attrs:{href:"bip-0070/paymentrequest.proto",title:"wikilink"}},[e._v("paymentrequest.proto")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[e._v("#")]),e._v(" Output")]),e._v(" "),a("p",[e._v("Outputs are used in PaymentRequest messages to specify where a payment\n(or part of a payment) should be sent. They are also used in Payment\nmessages to specify where a refund should be sent.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("    message Output {\n    optional uint64 amount = 1 [default = 0];\n        optional bytes script = 2;\n    }\n")])])]),a("hr"),e._v(" "),a("p",[e._v('amount   Number of satoshis (0.00000001 BTC) to be paid\nscript   a "TxOut" script where payment should be sent. This will normally be one of the standard Bitcoin transaction scripts (e.g. pubkey OP_CHECKSIG). This is optional to enable future extensions to this protocol that derive Outputs from a master public key and the PaymentRequest data itself.')]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"paymentdetails-paymentrequest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paymentdetails-paymentrequest"}},[e._v("#")]),e._v(" PaymentDetails/PaymentRequest")]),e._v(" "),a("p",[e._v("Payment requests are split into two messages to support future\nextensibility. The bulk of the information is contained in the\nPaymentDetails message. It is wrapped inside a PaymentRequest message,\nwhich contains meta-information about the merchant and a digital\nsignature.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('    message PaymentDetails {\n        optional string network = 1 [default = "main"];\n        repeated Output outputs = 2;\n        required uint64 time = 3;\n        optional uint64 expires = 4;\n        optional string memo = 5;\n        optional string payment_url = 6;\n        optional bytes merchant_data = 7;\n    }\n')])])]),a("hr"),e._v(" "),a("p",[e._v('network         either "main" for payments on the production Bitcoin network, or "test" for payments on test network. If a client receives a PaymentRequest for a network it does not support it must reject the request.\noutputs         one or more outputs where Bitcoins are to be sent. If the sum of outputs.amount is zero, the customer will be asked how much to pay, and the bitcoin client may choose any or all of the Outputs (if there are more than one) for payment. If the sum of outputs.amount is non-zero, then the customer will be asked to pay the sum, and the payment shall be split among the Outputs with non-zero amounts (if there are more than one; Outputs with zero amounts shall be ignored).\ntime            Unix timestamp (seconds since 1-Jan-1970 UTC) when the PaymentRequest was created.\nexpires         Unix timestamp (UTC) after which the PaymentRequest should be considered invalid.\nmemo            UTF-8 encoded, plain-text (no formatting) note that should be displayed to the customer, explaining what this PaymentRequest is for.\npayment_url     Secure (usually https) location where a Payment message (see below) may be sent to obtain a PaymentACK.\nmerchant_data   Arbitrary data that may be used by the merchant to identify the PaymentRequest. May be omitted if the merchant does not need to associate Payments with PaymentRequest or if they associate each PaymentRequest with a separate payment address.')]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("The payment_url specified in the PaymentDetails should remain valid at\nleast until the PaymentDetails expires (or as long as possible if the\nPaymentDetails does not expire). Note that this is irrespective of any\nstate change in the underlying payment request; for example cancellation\nof an order should not invalidate the payment_url, as it is important\nthat the merchant's server can record mis-payments in order to refund\nthe payment.")]),e._v(" "),a("p",[e._v("A PaymentRequest is PaymentDetails optionally tied to a merchant's\nidentity:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('    message PaymentRequest {\n        optional uint32 payment_details_version = 1 [default = 1];\n        optional string pki_type = 2 [default = "none"];\n        optional bytes pki_data = 3;\n        required bytes serialized_payment_details = 4;\n        optional bytes signature = 5;\n    }\n')])])]),a("hr"),e._v(" "),a("p",[e._v('payment_details_version      See below for a discussion of versioning/upgrading.\npki_type                     public-key infrastructure (PKI) system being used to identify the merchant. All implementation should support "none", "x509+sha256" and "x509+sha1".\npki_data                     PKI-system data that identifies the merchant and can be used to create a digital signature. In the case of X.509 certificates, pki_data contains one or more X.509 certificates (see Certificates section below).\nserialized_payment_details   A protocol-buffer serialized PaymentDetails message.\nsignature                    digital signature over a hash of the protocol buffer serialized variation of the PaymentRequest message, with all serialized fields serialized in numerical order (all current protocol buffer implementations serialize fields in numerical order) and signed using the private key that corresponds to the public key in pki_data. Optional fields that are not set are not serialized (however, setting a field to its default value will cause it to be serialized and will affect the signature). Before serialization, the signature field must be set to an empty value so that the field is included in the signed PaymentRequest hash but contains no data.')]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("When a Bitcoin wallet application receives a PaymentRequest, it must\nauthorize payment by doing the following:")]),e._v(" "),a("ol",[a("li",[e._v('Validate the merchant\'s identity and signature using the PKI\nsystem, if the pki_type is not "none".')]),e._v(" "),a("li",[e._v("Validate that customer's system unix time (UTC) is before\nPaymentDetails.expires. If it is not, then the payment request must\nbe rejected.")]),e._v(" "),a("li",[e._v('Display the merchant\'s identity and ask the customer if they would\nlike to submit payment (e.g. display the "Common Name" in the\nfirst X.509 certificate).')])]),e._v(" "),a("p",[e._v("PaymentRequest messages larger than 50,000 bytes should be rejected by\nthe wallet application, to mitigate denial-of-service attacks.")]),e._v(" "),a("h3",{attrs:{id:"payment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payment"}},[e._v("#")]),e._v(" Payment")]),e._v(" "),a("p",[e._v("Payment messages are sent after the customer has authorized payment:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("    message Payment {\n        optional bytes merchant_data = 1;\n        repeated bytes transactions = 2;\n        repeated Output refund_to = 3;\n        optional string memo = 4;\n    }\n")])])]),a("hr"),e._v(" "),a("p",[e._v("merchant_data   copied from PaymentDetails.merchant_data. Merchants may use invoice numbers or any other data they require to match Payments to PaymentRequests. Note that malicious clients may modify the merchant_data, so should be authenticated in some way (for example, signed with a merchant-only key).\ntransactions    One or more valid, signed Bitcoin transactions that fully pay the PaymentRequest\nrefund_to       One or more outputs where the merchant may return funds, if necessary. The merchant may return funds using these outputs for up to 2 months after the time of the payment request. After that time has expired, parties must negotiate if returning of funds becomes necessary.\nmemo            UTF-8 encoded, plain-text note from the customer to the merchant.")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("If the customer authorizes payment, then the Bitcoin client:")]),e._v(" "),a("ol",[a("li",[e._v("Creates and signs one or more transactions that satisfy (pay in\nfull) PaymentDetails.outputs")]),e._v(" "),a("li",[e._v("Validate that customer's system unix time (UTC) is still before\nPaymentDetails.expires. If it is not, the payment should be\ncancelled.")]),e._v(" "),a("li",[e._v("Broadcast the transactions on the Bitcoin p2p network.")]),e._v(" "),a("li",[e._v("If PaymentDetails.payment_url is specified, POST a Payment message\nto that URL. The Payment message is serialized and sent as the body\nof the POST request.")])]),e._v(" "),a("p",[e._v("Errors communicating with the payment_url server should be communicated\nto the user. In the scenario where the merchant's server receives\nmultiple identical Payment messages for an individual PaymentRequest, it\nmust acknowledge each. The second and further PaymentACK messages sent\nfrom the merchant's server may vary by memo field to indicate current\nstate of the Payment (for example number of confirmations seen on the\nnetwork). This is required in order to ensure that in case of a\ntransport level failure during transmission, recovery is possible by the\nBitcoin client re-sending the Payment message.")]),e._v(" "),a("p",[e._v("PaymentDetails.payment_url should be secure against man-in-the-middle\nattacks that might alter Payment.refund_to (if using HTTP, it must be\nTLS-protected).")]),e._v(" "),a("p",[e._v("Wallet software sending Payment messages via HTTP must set appropriate\nContent-Type and Accept headers, as specified in BIP 71:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Content-Type: application/bitcoin-payment\nAccept: application/bitcoin-paymentack\n")])])]),a("p",[e._v("When the merchant's server receives the Payment message, it must\ndetermine whether or not the transactions satisfy conditions of payment.\nIf and only if they do, it should broadcast the transaction(s) on the\nBitcoin p2p network.")]),e._v(" "),a("p",[e._v("Payment messages larger than 50,000 bytes should be rejected by the\nmerchant's server, to mitigate denial-of-service attacks.")]),e._v(" "),a("h3",{attrs:{id:"paymentack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paymentack"}},[e._v("#")]),e._v(" PaymentACK")]),e._v(" "),a("p",[e._v("PaymentACK is the final message in the payment protocol; it is sent from\nthe merchant's server to the bitcoin wallet in response to a Payment\nmessage:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("    message PaymentACK {\n        required Payment payment = 1;\n        optional string memo = 2;\n    }\n")])])]),a("hr"),e._v(" "),a("p",[e._v('payment   Copy of the Payment message that triggered this PaymentACK. Clients may ignore this if they implement another way of associating Payments with PaymentACKs.\nmemo      UTF-8 encoded note that should be displayed to the customer giving the status of the transaction (e.g. "Payment of 1 BTC for eleven tribbles accepted for processing.")')]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("PaymentACK messages larger than 60,000 bytes should be rejected by the\nwallet application, to mitigate denial-of-service attacks. This is\nlarger than the limits on Payment and PaymentRequest messages as\nPaymentACK contains a full Payment message within it.")]),e._v(" "),a("h2",{attrs:{id:"localization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localization"}},[e._v("#")]),e._v(" Localization")]),e._v(" "),a("p",[e._v("Merchants that support multiple languages should generate\nlanguage-specific PaymentRequests, and either associate the language\nwith the request or embed a language tag in the request's\nmerchant_data. They should also generate a language-specific PaymentACK\nbased on the original request.")]),e._v(" "),a("p",[e._v('For example: A greek-speaking customer browsing the Greek version of a\nmerchant\'s website clicks on a "Αγορά τώρα" link, which generates a\nPaymentRequest with merchant_data set to "lang=el&basketId=11252". The\ncustomer pays, their bitcoin client sends a Payment message, and the\nmerchant\'s website responds with PaymentACK.message "σας\nευχαριστούμε".')]),e._v(" "),a("h2",{attrs:{id:"certificates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#certificates"}},[e._v("#")]),e._v(" Certificates")]),e._v(" "),a("p",[e._v('The default PKI system is X.509 certificates (the same system used to\nauthenticate web servers). The format of pki_data when pki_type is\n"x509+sha256" or "x509+sha1" is a protocol-buffer-encoded\ncertificate chain:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("    message X509Certificates {\n        repeated bytes certificate = 1;\n    }\n")])])]),a("p",[e._v('If pki_type is "x509+sha256", then the PaymentRequest message is\nhashed using the SHA256 algorithm to produce the message digest that is\nsigned. If pki_type is "x509+sha1", then the SHA1 algorithm is used.')]),e._v(" "),a("p",[e._v("Each certificate is a DER [ITU.X690.1994] PKIX certificate value. The\ncertificate containing the public key of the entity that digitally\nsigned the PaymentRequest must be the first certificate. This MUST be\nfollowed by additional certificates, with each subsequent certificate\nbeing the one used to certify the previous one, up to (but not\nincluding) a trusted root authority. The trusted root authority MAY be\nincluded. The recipient must verify the certificate chain according to\n[RFC5280] and reject the PaymentRequest if any validation failure\noccurs.")]),e._v(" "),a("p",[e._v("Trusted root certificates may be obtained from the operating system; if\nvalidation is done on a device without an operating system, the "),a("a",{attrs:{href:"http://www.mozilla.org/projects/security/certs/included/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mozilla\nroot\nstore"),a("OutboundLink")],1),e._v("\nis recommended.")]),e._v(" "),a("h2",{attrs:{id:"extensibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extensibility"}},[e._v("#")]),e._v(" Extensibility")]),e._v(" "),a("p",[e._v("The protocol buffers serialization format is designed to be extensible.\nIn particular, new, optional fields can be added to a message and will\nbe ignored (but saved/re-transmitted) by old implementations.")]),e._v(" "),a("p",[e._v('PaymentDetails messages may be extended with new optional fields and\nstill be considered "version 1." Old implementations will be able to\nvalidate signatures against PaymentRequests containing the new fields,\nbut (obviously) will not be able to display whatever information is\ncontained in the new, optional fields to the user.')]),e._v(" "),a("p",[e._v("If it becomes necessary at some point in the future for merchants to\nproduce PaymentRequest messages that are accepted *only* by new\nimplementations, they can do so by defining a new PaymentDetails message\nwith version=2. Old implementations should let the user know that they\nneed to upgrade their software when they get an up-version\nPaymentDetails message.")]),e._v(" "),a("p",[e._v("Implementations that need to extend messages in this specification shall\nuse tags starting at 1000, and shall update the "),a("a",{attrs:{href:"bip-0070/extensions.mediawiki",title:"wikilink"}},[e._v("extensions\npage")]),e._v(" via pull-req to avoid\nconflicts with other extensions.")]),e._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("p",[a("a",{attrs:{href:"bip-0071.mediawiki",title:"wikilink"}},[e._v("BIP 0071")]),e._v(" : Payment Protocol mime types")]),e._v(" "),a("p",[a("a",{attrs:{href:"bip-0072.mediawiki",title:"wikilink"}},[e._v("BIP 0072")]),e._v(" : Payment Protocol bitcoin:\nURI extensions")]),e._v(" "),a("p",[e._v("Public-Key Infrastructure (X.509) working group :\n"),a("a",{attrs:{href:"http://datatracker.ietf.org/wg/pkix/charter/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://datatracker.ietf.org/wg/pkix/charter/"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Protocol Buffers : "),a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developers.google.com/protocol-buffers/"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"reference-implementation-reference-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),a("p",[e._v("Create Payment Request generator :\n"),a("a",{attrs:{href:"https://bitcoincore.org/~gavin/createpaymentrequest.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://bitcoincore.org/~gavin/createpaymentrequest.php"),a("OutboundLink")],1),e._v("\n("),a("a",{attrs:{href:"https://github.com/gavinandresen/paymentrequest",title:"wikilink",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("p",[e._v("BitcoinJ : "),a("a",{attrs:{href:"https://bitcoinj.github.io/payment-protocol#introduction",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://bitcoinj.github.io/payment-protocol#introduction"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"see-also-see-also"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#see-also-see-also"}},[e._v("#")]),e._v(" See Also {#see_also}")]),e._v(" "),a("p",[e._v("Javascript Object Signing and Encryption working group :\n"),a("a",{attrs:{href:"http://datatracker.ietf.org/wg/jose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://datatracker.ietf.org/wg/jose/"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Wikipedia's page on Invoices: "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Invoice",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://en.wikipedia.org/wiki/Invoice"),a("OutboundLink")],1),e._v("\nespecially the list of Electronic Invoice standards")]),e._v(" "),a("p",[e._v("sipa's payment protocol proposal: "),a("a",{attrs:{href:"https://gist.github.com/1237788",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://gist.github.com/1237788"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v('ThomasV\'s "Signed Aliases" proposal :\n'),a("a",{attrs:{href:"http://ecdsa.org/bitcoin_URIs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://ecdsa.org/bitcoin_URIs.html"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Homomorphic Payment Addresses and the Pay-to-Contract Protocol :\n"),a("a",{attrs:{href:"http://arxiv.org/abs/1212.3257",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://arxiv.org/abs/1212.3257"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);