(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{419:function(e,t,n){"use strict";n.r(t);var i=n(43),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_136"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_136"}},[e._v("#")]),e._v(" 136")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 136\n  Layer: Applications\n  Title: Bech32 Encoded Tx Position References\n  Author: Велеслав <veleslav.bips@protonmail.com>\n          Jonas Schnelli <dev@jonasschnelli.ch>\n          Daniel Pape <dpape@dpape.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0136\n  Status: Draft\n  Type: Informational\n  Created: 2017-07-09\n  License: BSD-2-Clause\n")])])]),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),n("h3",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This document proposes a convenient human useable format, "),n("strong",[e._v('"TxRef"')]),e._v(",\nas a standard way to refer to a transaction position within the Bitcoin\nBlockchain, and optionally a particular outpoint index within the\nreferred transaction. The primary purpose of this format is to allow\nusers to refer to a confirmed transaction (and optionally an outpoint\nindex within) in a standard, reliable, and concise way.")]),e._v(" "),n("p",[n("em",[e._v("Please note: Unlike TxID where there is strong cryptographic link\nbetween the ID and the actual transaction, TxRef only provides a weak\nlink to a particular transaction. TxRef locates an offset within a\nblockchain for a transaction, that may - or may not - point to an actual\ntransaction, which in fact may change with reorganisations. We recommend\nthat TxRef's should be not used for positions within the blockchain\nhaving a maturity less than 100 blocks.")])]),e._v(" "),n("h3",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This BIP is licensed under the 2-clause BSD license.")]),e._v(" "),n("h3",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("Since the first version of Bitcoin, TxID's (Transaction Identifiers)\nhave been a core part of the consensus protocol and have been routinely\nused to identify individual transactions between users.")]),e._v(" "),n("p",[e._v("However, for many use-cases they have practical limitations:")]),e._v(" "),n("ul",[n("li",[e._v("TxIDs are expensive for full nodes to lookup (requiring either a\nlinear scan of the blockchain, or an expensive TxID index).")]),e._v(" "),n("li",[e._v("TxIDs require third-party services for SPV wallets to lookup.")]),e._v(" "),n("li",[e._v("TxIDs are very long HEX encoded values (64 characters long).")])]),e._v(" "),n("p",[e._v("For transactions that have been embedded in the blockchain, it is\npossible to reference them not by their TxID, but by their location\nwithin the blockchain itself. The encoding can be made friendly for\noccasional human transcription. In this document, we propose a standard\nfor doing this.")]),e._v(" "),n("h3",{attrs:{id:"examples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),n("p",[e._v("These examples are for Bitcoin Transactions.")]),e._v(" "),n("ul",[n("li",[e._v("Genesis Coinbase Transaction (Transaction #0 of Block #0):\n"),n("code",[e._v("tx1:rqqq-qqqq-qmhu-qhp")])]),e._v(" "),n("li",[e._v("Transaction #2205 of Block #466793: "),n("code",[e._v("tx1:rjk0-uqay-zsrw-hqe")])])]),e._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),n("p",[e._v("A "),n("strong",[e._v("confirmed transaction position reference")]),e._v(", or "),n("strong",[e._v("TxRef")]),e._v(", is a\nreference to a particular location within the blockchain, specified by\nthe block height and a transaction index within the block, and\noptionally a outpoint index within the transaction.")]),e._v(" "),n("p",[n("em",[e._v("Please Note: All values in this specification are encoded in\nlittle-endian format.")])]),e._v(" "),n("h3",{attrs:{id:"transaction-position-reference-considerations-transaction-position-reference-considerations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transaction-position-reference-considerations-transaction-position-reference-considerations"}},[e._v("#")]),e._v(" Transaction Position Reference Considerations {#transaction_position_reference_considerations}")]),e._v(" "),n("p",[e._v("A TxRef may reference a location that doesn't exist because:")]),e._v(" "),n("ul",[n("li",[e._v("The specified block hasn't yet been mined. Or,")]),e._v(" "),n("li",[e._v("The transaction index is greater than the total number of\ntransactions included within the specified block.")]),e._v(" "),n("li",[e._v("The optional outpoint index is greater than the total outpoints\ncontained within the transaction.")])]),e._v(" "),n("p",[e._v("Therefore, implementers must be careful not to display TxRef's to users\nprematurely:")]),e._v(" "),n("ul",[n("li",[e._v("Applications MUST NOT display TxRef's for transactions with less\nthan 6 confirmations.")]),e._v(" "),n("li",[e._v("Application MUST show a warning for TxRef's for transactions with\nless than 100 confirmations.\n"),n("ul",[n("li",[e._v("This warning SHOULD state that in the case of a large\nreorganisation, the TxRefs Displayed may point to a different\ntransaction, or to no transaction at all.")])])])]),e._v(" "),n("h3",{attrs:{id:"encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}},[e._v("#")]),e._v(" Encoding")]),e._v(" "),n("p",[e._v("TxRef uses standard Bech32[^1] encoding as defined in\n"),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP-173"),n("OutboundLink")],1),e._v("\nand therefore consists of:")]),e._v(" "),n("ul",[n("li",[e._v('Human-readable Part, or "HRP", that provides namespacing. We have\nchosen to distinguish between Main and Test Networks:\n'),n("ul",[n("li",[e._v("For Any Mainnet Network: "),n("strong",[e._v('"tx"')]),e._v(".")]),e._v(" "),n("li",[e._v("For Any Testnet Network: "),n("strong",[e._v('"txtest"')]),e._v(".")]),e._v(" "),n("li",[e._v("Please see "),n("a",{attrs:{href:"https://github.com/satoshilabs/slips/blob/master/slip-0173.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("SLIP-0173 : Registered human-readable parts for\nBIP-0173"),n("OutboundLink")],1),e._v("\nfor a full list of HRP's including these two and others\nrelating to other projects.")])])]),e._v(" "),n("li",[e._v("Separator: "),n("strong",[e._v('"1"')]),e._v(".")]),e._v(" "),n("li",[e._v("Data Part.")])]),e._v(" "),n("p",[e._v("Please note: other specifications, such as "),n("a",{attrs:{href:"https://w3c-ccg.github.io/did-spec/",target:"_blank",rel:"noopener noreferrer"}},[e._v("the Decentralized\nIdentifiers spec"),n("OutboundLink")],1),e._v(", have implicitly\nencoded the information contained within the HRP elsewhere. In this case\nthey may choose to not include the HRP as specified here.")]),e._v(" "),n("p",[e._v("To increase portability and readability additional separators SHOULD be\nadded:")]),e._v(" "),n("ul",[n("li",[e._v("A Colon[^2] "),n("strong",[e._v('":"')]),e._v(" added after '1'.")]),e._v(" "),n("li",[e._v("Hyphens[^3] "),n("strong",[e._v('"-"')]),e._v(" added after every 4 characters beyond the\ncolon.")])]),e._v(" "),n("p",[e._v("All non-bech32-alphabet characters after the bech32 code separator MUST\nbe ignored/removed when parsing (except for terminating characters).[^4]")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("                    Bit       Character   Characters   Value\n")])])]),n("hr"),e._v(" "),n("p",[e._v('Human Readable Part             1 -- 2      2            Bitcoin Mainnet: "'),n("strong",[e._v("tx")]),e._v('", Bitcoin Testnet: "'),n("strong",[e._v("txtest")]),e._v('"\nSeparator                       3           1            "'),n("strong",[e._v("1")]),e._v('"\nColon                           4           1            "'),n("strong",[e._v(":")]),e._v('"\nData                  0 -- 19   5 -- 8      4'),n("br"),e._v('\nHyphen                          9           1            "'),n("strong",[e._v("-")]),e._v('"')]),e._v(" "),n("p",[e._v(": Text Encoding of the TxRef")]),e._v(" "),n("p",[e._v("The Data - Hyphen pattern is repeated for the entire length of data, ( a\nhyphen is inserted after every encoded 20 bits or 4 data characters).")]),e._v(" "),n("h3",{attrs:{id:"data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[e._v("#")]),e._v(" Data")]),e._v(" "),n("p",[e._v("Depending on if an optional transaction outpoint is included, there can\nbe 75 or 90 bits of data encoded in the string above. These bits are\ndefined in this manner:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("                  **Bit**    **Bit(s)**   **Type**                               **Values**                                                                                                                                        **Notes**\n")])])]),n("hr"),e._v(" "),n("p",[e._v("Magic Code          0 -- 4     5            Chain Namespacing Code                 "),n("strong",[e._v("0x3")]),e._v(" for Bitcoin Mainnet. "),n("strong",[e._v("0x4")]),e._v(" for Bitcoin Mainnet with Outpoint. "),n("strong",[e._v("0x6")]),e._v(" for Bitcoin Testnet. "),n("strong",[e._v("0x7")]),e._v(" for Bitcoin Testnet with Outpoint."),n("br"),e._v("\nVersion             5          1            For Future Use                         Must be "),n("strong",[e._v("0x0")]),n("br"),e._v("\nBlock Height        6 -- 29    24           The Block Height of the Tx             Block 0 (genesis) to block 16777215                                                                                                               Until Year ~2328\nTransaction Index   30 -- 44   15           The index of the Tx inside the block   Tx 0 (coinbase) to Tx position 32767                                                                                                              Max Tx's in block is 16665")]),e._v(" "),n("p",[e._v(": TxRef Binary Format for Bitcoin Mainnet and Bitcoin Testnet:")]),e._v(" "),n("p",[e._v("If the magic code is "),n("strong",[e._v("0x4")]),e._v(" or "),n("strong",[e._v("0x7")]),e._v(", an optional outpoint is\nincluded in the encoding:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("               **Bit**    **Bit(s)**   **Type**                                  **Values**                              **Notes**\n")])])]),n("hr"),e._v(" "),n("p",[e._v("Outpoint Index   45 -- 59   15           The index of the Outpoint inside the Tx   Outpoint 0 to Outpoint Position 32767")]),e._v(" "),n("p",[e._v(": Optional Outpoint Index Encoding:")]),e._v(" "),n("p",[e._v("We include the 30-bit checksum last:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("         **Bit**                **Bit(s)**   **Type**          **Values**   **Notes**\n")])])]),n("hr"),e._v(" "),n("p",[e._v("Checksum   45 -- 74 or 60 -- 89   30           Bech32 Checksum")]),e._v(" "),n("p",[e._v(": Bech32 Checksum Encoding:")]),e._v(" "),n("h4",{attrs:{id:"magic-notes-magic-notes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#magic-notes-magic-notes"}},[e._v("#")]),e._v(" Magic Notes: {#magic_notes}")]),e._v(" "),n("p",[e._v("The magic code provides namespacing between chains. 5-bit magic codes\nare used for the Bitcoin Mainnet and the Bitcoin Testnet. (it may be\nsignificantly longer for other projects/chains):")]),e._v(" "),n("ul",[n("li",[e._v("For Bitcoin Mainnet the magic code is: "),n("strong",[e._v("0x3")]),e._v(", leading to an\n"),n("strong",[e._v('"r"')]),e._v(" character when encoded.")]),e._v(" "),n("li",[e._v("For Bitcoin Mainnet with Outpoint Encoded the magic code is:\n"),n("strong",[e._v("0x4")]),e._v(", leading to an "),n("strong",[e._v('"y"')]),e._v(" character when encoded.")]),e._v(" "),n("li",[e._v("For Bitcoin Testnet the magic code is: "),n("strong",[e._v("0x6")]),e._v(", leading to an\n"),n("strong",[e._v('"x"')]),e._v(" character when encoded.")]),e._v(" "),n("li",[e._v("For Bitcoin Testnet with Outpoint Encoded the magic code is:\n"),n("strong",[e._v("0x7")]),e._v(", leading to an "),n("strong",[e._v('"8"')]),e._v(" character when encoded.")])]),e._v(" "),n("p",[e._v("Codes "),n("strong",[e._v("0x0")]),e._v(", "),n("strong",[e._v("0x1")]),e._v(", "),n("strong",[e._v("0x2")]),e._v(", "),n("strong",[e._v("0x5")]),e._v(", are also reserved for future\nuse within the Bitcoin project.")]),e._v(" "),n("p",[n("em",[e._v("Any other chain MUST NOT start their magic code with any value between\n0x0 and 0x7 inclusive.")])]),e._v(" "),n("p",[e._v('Other magic codes will be specified in SLIP-XXXX "TxRef for Non-Bitcoin\nChains and Networks".')]),e._v(" "),n("h3",{attrs:{id:"compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" Compatibility")]),e._v(" "),n("p",[e._v("There are no known compatibility issues.")]),e._v(" "),n("h2",{attrs:{id:"rationale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<references />\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h2",{attrs:{id:"reference-implementations-reference-implementations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementations-reference-implementations"}},[e._v("#")]),e._v(" Reference implementations {#reference_implementations}")]),e._v(" "),n("p",[e._v("C Reference Implementation (supports magic codes 0x3 and 0x6):\n"),n("a",{attrs:{href:"https://github.com/jonasschnelli/bitcoin_txref_code",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/jonasschnelli/bitcoin_txref_code"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Go Reference Implementation (supports magic codes 0x3 and 0x6):\n"),n("a",{attrs:{href:"https://github.com/kulpreet/txref",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kulpreet/txref"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("C++ Reference Implementation (support magic codes 0x3, 0x4, 0x6, 0x7):\n"),n("a",{attrs:{href:"https://github.com/dcdpr/btcr-DID-method/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/dcdpr/btcr-DID-method/"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"appendices"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendices"}},[e._v("#")]),e._v(" Appendices")]),e._v(" "),n("h3",{attrs:{id:"test-vectors-test-vectors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#test-vectors-test-vectors"}},[e._v("#")]),e._v(" Test Vectors {#test_vectors}")]),e._v(" "),n("p",[e._v("There are two sets of Test Vectors included here:")]),e._v(" "),n("ul",[n("li",[e._v("Bech32 Encoding Test Vectors. These are to test if a implementation\naccepts the encoding, with the correct human readable part, and\nseparator.")]),e._v(" "),n("li",[e._v("Bitcoin TxRef Test Vectors. These test the full specification, in\nparticular, correct values for block height and the transaction\nindex.")])]),e._v(" "),n("h4",{attrs:{id:"bech32-encoding-for-txref-bech32-encoding-for-txref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bech32-encoding-for-txref-bech32-encoding-for-txref"}},[e._v("#")]),e._v(" Bech32 Encoding (for TxRef). {#bech32_encoding_for_txref.}")]),e._v(" "),n("p",[n("em",[e._v("Please Note: All test vectors are shown to help test if a string is\ncompliant or not. All real-life applications (such as for Bitcoin)\nshould comply with the Bitcoin Test Vectors listed Below.")])]),e._v(" "),n("p",[e._v("The following strings have a valid Human Readable Part and Bech32\nChecksum.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("TX1A12UEL5L")])]),e._v(" "),n("li",[n("code",[e._v("tx1an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs")])]),e._v(" "),n("li",[n("code",[e._v("tx1abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw")])]),e._v(" "),n("li",[n("code",[e._v("tx11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j")])])]),e._v(" "),n("p",[e._v("The following list gives invalid TxRef's and the reason for their\ninvalidity.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty")]),e._v(": Invalid human-readable\npart")]),e._v(" "),n("li",[n("code",[e._v("tx1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5")]),e._v(": Invalid checksum")])]),e._v(" "),n("h4",{attrs:{id:"bitcoin-txref-mainnet-and-testnet-bitcoin-txref-mainnet-and-testnet"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bitcoin-txref-mainnet-and-testnet-bitcoin-txref-mainnet-and-testnet"}},[e._v("#")]),e._v(" Bitcoin TxRef (mainnet and testnet) {#bitcoin_txref_mainnet_and_testnet}")]),e._v(" "),n("p",[e._v("The following list gives properly encoded Bitcoin mainnet TxRef's and\nthe values in hex. (block height, transaction index)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tx1:rqqq-qqqq-qmhu-qhp")]),e._v(": "),n("code",[e._v("(0x0, 0x0)")])]),e._v(" "),n("li",[n("code",[e._v("tx1:rqqq-qqll-l8xh-jkg")]),e._v(": "),n("code",[e._v("(0x0, 0x7FFF)")])]),e._v(" "),n("li",[n("code",[e._v("tx1:r7ll-llqq-qghq-qr8")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x0)")])]),e._v(" "),n("li",[n("code",[e._v("tx1:r7ll-llll-l5xt-jzw")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x7FFF)")])])]),e._v(" "),n("p",[e._v("The following list gives properly encoded Bitcoin testnet TxRef's and\nthe values in hex. (block height, transaction index)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("txtest1:xqqq-qqqq-qkla-64l")]),e._v(": "),n("code",[e._v("(0x0, 0x0)")])]),e._v(" "),n("li",[n("code",[e._v("txtest1:xqqq-qqll-l2wk-g5k")]),e._v(": "),n("code",[e._v("(0x0, 0x7FFF)")])]),e._v(" "),n("li",[n("code",[e._v("txtest1:x7ll-llqq-q9lp-6pe")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x0)")])]),e._v(" "),n("li",[n("code",[e._v("txtest1:x7ll-llll-lew2-gqs")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x7FFF)")])])]),e._v(" "),n("p",[e._v("The following list gives valid (though strangely formatted) Bitcoin\nTxRef's and the values in hex. (block height, transaction index)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tx1:rjk0-uqay-zsrw-hqe")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D)")])]),e._v(" "),n("li",[n("code",[e._v("TX1RJK0UQAYZSRWHQE")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D)")])]),e._v(" "),n("li",[n("code",[e._v("TX1RJK0--UQaYZSRw----HQE")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D)")])]),e._v(" "),n("li",[n("code",[e._v("tx1 rjk0 uqay zsrw hqe")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D)")])]),e._v(" "),n("li",[n("code",[e._v("tx1!rjk0\\uqay*zsrw^^hqe")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D)")])])]),e._v(" "),n("p",[e._v("The following list gives invalid Bitcoin TxRef's and the reason for\ntheir invalidity.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tx1:t7ll-llll-ldup-3hh")]),e._v(": Magic 0xB instead of 0x3.\n"),n("code",[e._v("(0xFFFFFF, 0x7FFF)")])]),e._v(" "),n("li",[n("code",[e._v("tx1:rlll-llll-lfet-r2y")]),e._v(": Version 1 instead of 0.\n"),n("code",[e._v("(0xFFFFFF, 0x7FFF)")])]),e._v(" "),n("li",[n("code",[e._v("tx1:rjk0-u5ng-gghq-fkg7")]),e._v(": Valid Bech32, but 10x5bit packages\ninstead of 8.")]),e._v(" "),n("li",[n("code",[e._v("tx1:rjk0-u5qd-s43z")]),e._v(": Valid Bech32, but 6x5bit packages instead\nof 8.")])]),e._v(" "),n("h4",{attrs:{id:"bitcoin-txref-with-outpoints-mainnet-and-testnet-bitcoin-txref-with-outpoints-mainnet-and-testnet"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bitcoin-txref-with-outpoints-mainnet-and-testnet-bitcoin-txref-with-outpoints-mainnet-and-testnet"}},[e._v("#")]),e._v(" Bitcoin TxRef with Outpoints (mainnet and testnet) {#bitcoin_txref_with_outpoints_mainnet_and_testnet}")]),e._v(" "),n("p",[e._v("The following list gives properly encoded Bitcoin mainnet TxRef's with\nOutpoints and the values in hex. (block height, transaction index, TXO\nindex)")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("tx1:yqqq-qqqq-qqqq-ksvh-26")]),e._v(": "),n("code",[e._v("(0x0, 0x0, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:yqqq-qqll-lqqq-v0h2-2k")]),e._v(": "),n("code",[e._v("(0x0, 0x7FFF, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:y7ll-llqq-qqqq-a5zy-tc")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x0, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:y7ll-llll-lqqq-8tee-t5")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x7FFF, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:yqqq-qqqq-qpqq-5j9q-nz")]),e._v(": "),n("code",[e._v("(0x0, 0x0, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:yqqq-qqll-lpqq-wd7a-nw")]),e._v(": "),n("code",[e._v("(0x0, 0x7FFF, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:y7ll-llqq-qpqq-lktn-jq")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x0, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:y7ll-llll-lpqq-9fsw-jv")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x7FFF, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:yjk0-uqay-zrfq-g2cg-t8")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D, 0x123)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tx1:yjk0-uqay-zu4x-nk6u-pc")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D, 0x1ABC)")])])])]),e._v(" "),n("p",[e._v("The following list gives properly encoded Bitcoin testnet TxRef's with\nOutpoints and the values in hex. (block height, transaction index, TXO\nindex)")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("txtest1:8qqq-qqqq-qqqq-cgru-fa")]),e._v(": "),n("code",[e._v("(0x0, 0x0, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:8qqq-qqll-lqqq-zhcp-f3")]),e._v(": "),n("code",[e._v("(0x0, 0x7FFF, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:87ll-llqq-qqqq-nvd0-gl")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x0, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:87ll-llll-lqqq-fnkj-gn")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x7FFF, 0x0)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:8qqq-qqqq-qpqq-622t-s9")]),e._v(": "),n("code",[e._v("(0x0, 0x0, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:8qqq-qqll-lpqq-q43k-sf")]),e._v(": "),n("code",[e._v("(0x0, 0x7FFF, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:87ll-llqq-qpqq-3wyc-38")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x0, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:87ll-llll-lpqq-t3l9-3t")]),e._v(": "),n("code",[e._v("(0xFFFFFF, 0x7FFF, 0x1)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:8jk0-uqay-zrfq-xjhr-gq")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D, 0x123)")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("txtest1:8jk0-uqay-zu4x-aw4h-zl")]),e._v(": "),n("code",[e._v("(0x71F69, 0x89D, 0x1ABC)")])])])]),e._v(" "),n("h3",{attrs:{id:"bitcoin-txref-payload-value-choice-bitcoin-txref-payload-value-choice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bitcoin-txref-payload-value-choice-bitcoin-txref-payload-value-choice"}},[e._v("#")]),e._v(" Bitcoin TxRef Payload Value Choice: {#bitcoin_txref_payload_value_choice}")]),e._v(" "),n("p",[e._v("Some calculations showing why we chose these particular bit-length of\nthe block height and transaction index.")]),e._v(" "),n("h4",{attrs:{id:"block-height-value-block-height-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#block-height-value-block-height-value"}},[e._v("#")]),e._v(" Block Height Value: {#block_height_value}")]),e._v(" "),n("p",[e._v("24-bit: between 0, and 0xFFFFFF (16,777,216 blocks).")]),e._v(" "),n("ul",[n("li",[e._v("There are ~52,500 blocks every year, leading to ~319 years of\nblocks addressable.")]),e._v(" "),n("li",[e._v("Therefore before year 2328 this specification should be extended.\n(We think that we have plenty of time).")])]),e._v(" "),n("h4",{attrs:{id:"tx-position-value-tx-position-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tx-position-value-tx-position-value"}},[e._v("#")]),e._v(" Tx Position Value: {#tx_position_value}")]),e._v(" "),n("p",[e._v("15-bit: between 0x0, and 0x7FFF. (32,768 transactions).")]),e._v(" "),n("ul",[n("li",[e._v("The "),n("em",[e._v("realistic")]),e._v(" smallest Tx is 83 Bytes: Max 12047 tx in a block.\n"),n("ul",[n("li",[e._v("4B version + 1B tx_in count + 36B previous_output + 1B script\nlength + 0B signature script + 4B sequence + 1B tx_out count +\n8B amount + 1B script length + 23B pubkey script + 4B lock_time\n= 83B")])])]),e._v(" "),n("li",[e._v("The "),n("em",[e._v("extreme")]),e._v(" smallest Tx is 60 Byte's: Max 16665 tx in a block.\n"),n("ul",[n("li",[e._v("4B version + 1B tx_in count + 36B previous_output + 1B script\nlength + 0B signature script + 4B sequence + 1B tx_out count +\n8B amount + 1B script length + 0B pubkey script + 4B lock_time =\n60B")])])])]),e._v(" "),n("h2",{attrs:{id:"acknowledgements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[e._v("#")]),e._v(" Acknowledgements")]),e._v(" "),n("p",[e._v("Special Thanks to Pieter Wuille and Greg Maxwell for Bech32, a wonderful\nuser-facing data encoding.")]),e._v(" "),n("p",[e._v("[^1]: "),n("strong",[e._v("Why use Bech32 Encoding for Confirmed Transaction References?")]),e._v("\nThe error detection and correction properties of this encoding\nformat make it very attractive. We expect that it will be reasonable\nfor software to correct a maximum of two characters; however, we\nhaven't specified this yet.")]),e._v(" "),n("p",[e._v("[^2]: "),n("strong",[e._v("Why add a colon here?")]),e._v(" This allows it to conform better with\nW3C URN/URL standards.")]),e._v(" "),n("p",[e._v("[^3]: "),n("strong",[e._v("Why hyphens within the TxRef?")]),e._v(" As TxRef's are short, we expect\nthat they will be quoted via voice or written by hand. The inclusion\nof hyphens every 4 characters breaks up the string and means people\ndon't lose their place so easily.")]),e._v(" "),n("p",[e._v("[^4]: "),n("strong",[e._v("Why strip all non-bech32-alphabet characters?")]),e._v(" We do not wish\nto expect the users to keep their TxRef's in good unicode form\n(hyphens, colons, invisible spaces, random unicode characters, etc).\nWe expect them to copy, paste, write by-hand, write in a mix of\ncharacter sets, etc. Parsers should automatically correct for all\nsorts of these common errors.")])])}),[],!1,null,null,null);t.default=a.exports}}]);