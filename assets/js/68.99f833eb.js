(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{443:function(e,t,r){"use strict";r.r(t);var a=r(43),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_173"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_173"}},[e._v("#")]),e._v(" 173")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("  BIP: 173\n  Layer: Applications\n  Title: Base32 address format for native v0-16 witness outputs\n  Author: Pieter Wuille <pieter.wuille@gmail.com>\n          Greg Maxwell <greg@xiph.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0173\n  Status: Final\n  Type: Informational\n  Created: 2017-03-20\n  License: BSD-2-Clause\n  Replaces: 142\n")])])]),r("h2",{attrs:{id:"introduction"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),r("h3",{attrs:{id:"abstract"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),r("p",[e._v('This document proposes a checksummed base32 format, "Bech32", and a\nstandard for native segregated witness output addresses using it.')]),e._v(" "),r("h3",{attrs:{id:"copyright"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),r("p",[e._v("This BIP is licensed under the 2-clause BSD license.")]),e._v(" "),r("h3",{attrs:{id:"motivation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),r("p",[e._v("For most of its history, Bitcoin has relied on base58 addresses with a\ntruncated double-SHA256 checksum. They were part of the original\nsoftware and their scope was extended in\n"),r("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP13"),r("OutboundLink")],1),e._v("\nfor Pay-to-script-hash\n("),r("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("P2SH"),r("OutboundLink")],1),e._v(").\nHowever, both the character set and the checksum algorithm have\nlimitations:")]),e._v(" "),r("ul",[r("li",[e._v("Base58 needs a lot of space in QR codes, as it cannot use the\n"),r("em",[e._v("alphanumeric mode")]),e._v(".")]),e._v(" "),r("li",[e._v("The mixed case in base58 makes it inconvenient to reliably write\ndown, type on mobile keyboards, or read out loud.")]),e._v(" "),r("li",[e._v("The double SHA256 checksum is slow and has no error-detection\nguarantees.")]),e._v(" "),r("li",[e._v("Most of the research on error-detecting codes only applies to\ncharacter-set sizes that are a "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Prime_power",target:"_blank",rel:"noopener noreferrer"}},[e._v("prime\npower"),r("OutboundLink")],1),e._v(", which 58 is not.")]),e._v(" "),r("li",[e._v("Base58 decoding is complicated and relatively slow.")])]),e._v(" "),r("p",[e._v("Included in the Segregated Witness proposal are a new class of outputs\n(witness programs, see\n"),r("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP141"),r("OutboundLink")],1),e._v('),\nand two instances of it ("P2WPKH" and "P2WSH", see\n'),r("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP143"),r("OutboundLink")],1),e._v(").\nTheir functionality is available indirectly to older clients by\nembedding in P2SH outputs, but for optimal efficiency and security it is\nbest to use it directly. In this document we propose a new address\nformat for native witness outputs (current and future versions).")]),e._v(" "),r("p",[e._v("This replaces\n"),r("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0142.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP142"),r("OutboundLink")],1),e._v(",\nand was previously discussed\n"),r("a",{attrs:{href:"https://bitcoincore.org/logs/2016-05-zurich-meeting-notes.html#base32",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v("\n(summarized\n"),r("a",{attrs:{href:"https://bitcoincore.org/en/meetings/2016/05/20/#error-correcting-codes-for-future-address-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(").")]),e._v(" "),r("h3",{attrs:{id:"examples"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),r("p",[e._v("All examples use public key\n"),r("code",[e._v("0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798")]),e._v(".\nThe P2WSH examples use "),r("code",[e._v("key OP_CHECKSIG")]),e._v(" as script.")]),e._v(" "),r("ul",[r("li",[e._v("Mainnet P2WPKH: "),r("code",[e._v("bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4")])]),e._v(" "),r("li",[e._v("Testnet P2WPKH: "),r("code",[e._v("tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx")])]),e._v(" "),r("li",[e._v("Mainnet P2WSH:\n"),r("code",[e._v("bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3")])]),e._v(" "),r("li",[e._v("Testnet P2WSH:\n"),r("code",[e._v("tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7")])])]),e._v(" "),r("h2",{attrs:{id:"specification"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),r("p",[e._v("We first describe the general checksummed base32[^1] format called\n"),r("em",[e._v("Bech32")]),e._v(" and then define Segregated Witness addresses using it.")]),e._v(" "),r("h3",{attrs:{id:"bech32"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bech32"}},[e._v("#")]),e._v(" Bech32")]),e._v(" "),r("p",[e._v("A Bech32[^2] string is at most 90 characters long and consists of:")]),e._v(" "),r("ul",[r("li",[e._v("The "),r("strong",[e._v("human-readable part")]),e._v(", which is intended to convey the type of\ndata, or anything else that is relevant to the reader. This part\nMUST contain 1 to 83 US-ASCII characters, with each character having\na value in the range [33-126]. HRP validity may be further\nrestricted by specific applications.")]),e._v(" "),r("li",[e._v("The "),r("strong",[e._v("separator")]),e._v(', which is always "1". In case "1" is allowed\ninside the human-readable part, the last one in the string is the\nseparator'),r("code",[e._v("<ref>")]),e._v(" "),r("strong",[e._v("Why include a separator in addresses?")]),e._v("\nThat way the human-readable")])]),e._v(" "),r("p",[e._v("part is unambiguously separated from the data part, avoiding potential\ncollisions with other human-readable parts that share a prefix. It also\nallows us to avoid having character-set restrictions on the\nhuman-readable part. The separator is "),r("em",[e._v("1")]),e._v(" because using a\nnon-alphanumeric character would complicate copy-pasting of addresses\n(with no double-click selection in several applications). Therefore an\nalphanumeric character outside the normal character set was\nchosen."),r("code",[e._v("</ref>")]),e._v(" .")]),e._v(" "),r("ul",[r("li",[e._v("The "),r("strong",[e._v("data part")]),e._v(', which is at least 6 characters long and only\nconsists of alphanumeric characters excluding "1", "b", "i",\nand "o"'),r("code",[e._v("<ref>")]),e._v(" "),r("strong",[e._v("Why not use an existing character set like\n"),r("a",{attrs:{href:"http://www.faqs.org/rfcs/rfc3548.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC3548"),r("OutboundLink")],1),e._v(" or\n"),r("a",{attrs:{href:"https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("z-base-32"),r("OutboundLink")],1)]),e._v("?")])]),e._v(" "),r("p",[e._v("The character set is chosen to minimize ambiguity according to\n"),r("a",{attrs:{href:"https://hissa.nist.gov/~black/GTLD/",target:"_blank",rel:"noopener noreferrer"}},[e._v("this"),r("OutboundLink")],1),e._v(" visual similarity data, and\nthe ordering is chosen to minimize the number of pairs of similar\ncharacters (according to the same data) that differ in more than 1 bit.\nAs the checksum is chosen to maximize detection capabilities for low\nnumbers of bit errors, this choice improves its performance under some\nerror models."),r("code",[e._v("</ref>")]),e._v(" .")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("    0   1   2   3   4   5   6   7\n")])])]),r("hr"),e._v(" "),r("p",[e._v("+0    q   p   z   r   y   9   x   8\n+8    g   f   2   t   v   d   w   0\n+16   s   3   j   n   5   4   k   h\n+24   c   e   6   m   u   a   7   l")]),e._v(" "),r("p",[r("strong",[e._v("Checksum")])]),e._v(" "),r("p",[e._v("The last six characters of the data part form a checksum and contain no\ninformation. Valid strings MUST pass the criteria for validity specified\nby the Python3 code snippet below. The function "),r("code",[e._v("bech32_verify_checksum")]),e._v("\nmust return true when its arguments are:")]),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("hrp")]),e._v(": the human-readable part as a string")])]),e._v(" "),r("li",[r("p",[r("code",[e._v("data")]),e._v(": the data part as a list of integers representing the\ncharacters after conversion using the table above")]),e._v(" "),r("p",[e._v("def bech32_polymod(values):\nGEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\nchk = 1\nfor v in values:\nb = (chk >> 25)\nchk = (chk & 0x1ffffff) << 5 ^ v\nfor i in range(5):\nchk ^= GEN[i] if ((b >> i) & 1) else 0\nreturn chk")]),e._v(" "),r("p",[e._v("def bech32_hrp_expand(s):\nreturn [ord(x) >> 5 for x in s] + [0] + [ord(x) & 31 for x in s]")]),e._v(" "),r("p",[e._v("def bech32_verify_checksum(hrp, data):\nreturn bech32_polymod(bech32_hrp_expand(hrp) + data) == 1")])])]),e._v(" "),r("p",[e._v("This implements a "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/BCH_code",target:"_blank",rel:"noopener noreferrer"}},[e._v("BCH code"),r("OutboundLink")],1),e._v("\nthat guarantees detection of "),r("strong",[e._v("any error affecting at most 4\ncharacters")]),e._v(" and has less than a 1 in 10^9^ chance of failing to detect\nmore errors. More details about the properties can be found in the\nChecksum Design appendix. The human-readable part is processed by first\nfeeding the higher bits of each character's US-ASCII value into the\nchecksum calculation followed by a zero and then the lower bits of\neach[^3].")]),e._v(" "),r("p",[e._v("To construct a valid checksum given the human-readable part and\n(non-checksum) values of the data-part characters, the code below can be\nused:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("def bech32_create_checksum(hrp, data):\n  values = bech32_hrp_expand(hrp) + data\n  polymod = bech32_polymod(values + [0,0,0,0,0,0]) ^ 1\n  return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n")])])]),r("p",[r("strong",[e._v("Error correction")])]),e._v(" "),r("p",[e._v("One of the properties of these BCH codes is that they can be used for\nerror correction. An unfortunate side effect of error correction is that\nit erodes error detection: correction changes invalid inputs into valid\ninputs, but if more than a few errors were made then the valid input may\nnot be the correct input. Use of an incorrect but valid input can cause\nfunds to be lost irrecoverably. Because of this, implementations SHOULD\nNOT implement correction beyond potentially suggesting to the user where\nin the string an error might be found, without suggesting the correction\nto make.")]),e._v(" "),r("p",[r("strong",[e._v("Uppercase/lowercase")])]),e._v(" "),r("p",[e._v("The lowercase form is used when determining a character's value for\nchecksum purposes.")]),e._v(" "),r("p",[e._v("Encoders MUST always output an all lowercase Bech32 string. If an\nuppercase version of the encoding result is desired, (e.g.- for\npresentation purposes, or QR code use), then an uppercasing procedure\ncan be performed external to the encoding process.")]),e._v(" "),r("p",[e._v("Decoders MUST NOT accept strings where some characters are uppercase and\nsome are lowercase (such strings are referred to as mixed case strings).")]),e._v(" "),r("p",[e._v("For presentation, lowercase is usually preferable, but inside QR codes\nuppercase SHOULD be used, as those permit the use of "),r("em",[r("a",{attrs:{href:"http://www.thonky.com/qr-code-tutorial/alphanumeric-mode-encoding",target:"_blank",rel:"noopener noreferrer"}},[e._v("alphanumeric\nmode"),r("OutboundLink")],1)]),e._v(",\nwhich is 45% more compact than the normal "),r("em",[r("a",{attrs:{href:"http://www.thonky.com/qr-code-tutorial/byte-mode-encoding",target:"_blank",rel:"noopener noreferrer"}},[e._v("byte\nmode"),r("OutboundLink")],1)]),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"segwit-address-format-segwit-address-format"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#segwit-address-format-segwit-address-format"}},[e._v("#")]),e._v(" Segwit address format {#segwit_address_format}")]),e._v(" "),r("p",[e._v("A segwit address[^4] is a Bech32 encoding of:")]),e._v(" "),r("ul",[r("li",[e._v('The human-readable part "bc"[^5] for mainnet, and\n"tb"'),r("code",[e._v("<ref>")]),e._v(" "),r("strong",[e._v("Why use 'tb' as human-readable part for\ntestnet?")]),e._v(" It was chosen to")])]),e._v(" "),r("p",[e._v("be of the same length as the mainnet counterpart (to simplify\nimplementations' assumptions about lengths), but still be visually\ndistinct."),r("code",[e._v("</ref>")]),e._v("  for testnet.")]),e._v(" "),r("ul",[r("li",[e._v("The data-part values:\n"),r("ul",[r("li",[e._v("1 byte: the witness version")]),e._v(" "),r("li",[e._v("A conversion of the 2-to-40-byte witness program (as defined by\n"),r("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP141"),r("OutboundLink")],1),e._v(")\nto base32:\n"),r("ul",[r("li",[e._v("Start with the bits of the witness program, most significant\nbit per byte first.")]),e._v(" "),r("li",[e._v("Re-arrange those bits into groups of 5, and pad with zeroes\nat the end if needed.")]),e._v(" "),r("li",[e._v("Translate those bits to characters using the table above.")])])])])])]),e._v(" "),r("p",[r("strong",[e._v("Decoding")])]),e._v(" "),r("p",[e._v("Software interpreting a segwit address:")]),e._v(" "),r("ul",[r("li",[e._v('MUST verify that the human-readable part is "bc" for mainnet and\n"tb" for testnet.')]),e._v(" "),r("li",[e._v("MUST verify that the first decoded data value (the witness version)\nis between 0 and 16, inclusive.")]),e._v(" "),r("li",[e._v("Convert the rest of the data to bytes:\n"),r("ul",[r("li",[e._v("Translate the values to 5 bits, most significant bit first.")]),e._v(" "),r("li",[e._v("Re-arrange those bits into groups of 8 bits. Any incomplete\ngroup at the end MUST be 4 bits or less, MUST be all zeroes, and\nis discarded.")]),e._v(" "),r("li",[e._v("There MUST be between 2 and 40 groups, which are interpreted as\nthe bytes of the witness program.")])])])]),e._v(" "),r("p",[e._v("Decoders SHOULD enforce known-length restrictions on witness programs.\nFor example, BIP141 specifies "),r("em",[e._v("If the version byte is 0, but the witness\nprogram is neither 20 nor 32 bytes, the script must fail.")])]),e._v(" "),r("p",[e._v("As a result of the previous rules, addresses are always between 14 and\n74 characters long, and their length modulo 8 cannot be 0, 3, or 5.\nVersion 0 witness addresses are always 42 or 62 characters, but\nimplementations MUST allow the use of any version.")]),e._v(" "),r("p",[e._v("Implementations should take special care when converting the address to\na scriptPubkey, where witness version "),r("em",[e._v("n")]),e._v(" is stored as "),r("em",[e._v("OP_n")]),e._v(". OP_0 is\nencoded as 0x00, but OP_1 through OP_16 are encoded as 0x51 though 0x60\n(81 to 96 in decimal). If a bech32 address is converted to an incorrect\nscriptPubKey the result will likely be either unspendable or insecure.")]),e._v(" "),r("h3",{attrs:{id:"compatibility"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" Compatibility")]),e._v(" "),r("p",[e._v("Only new software will be able to use these addresses, and only for\nreceivers with segwit-enabled new software. In all other cases, P2SH or\nP2PKH addresses can be used.")]),e._v(" "),r("h2",{attrs:{id:"rationale"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<references />\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("h2",{attrs:{id:"reference-implementations-reference-implementations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementations-reference-implementations"}},[e._v("#")]),e._v(" Reference implementations {#reference_implementations}")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Reference encoder and decoder:")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/c",target:"_blank",rel:"noopener noreferrer"}},[e._v("For C"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/c++",target:"_blank",rel:"noopener noreferrer"}},[e._v("For C++"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/javascript",target:"_blank",rel:"noopener noreferrer"}},[e._v("For\nJavaScript"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/go",target:"_blank",rel:"noopener noreferrer"}},[e._v("For Go"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/python",target:"_blank",rel:"noopener noreferrer"}},[e._v("For\nPython"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/haskell",target:"_blank",rel:"noopener noreferrer"}},[e._v("For\nHaskell"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/ruby",target:"_blank",rel:"noopener noreferrer"}},[e._v("For Ruby"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ref/rust",target:"_blank",rel:"noopener noreferrer"}},[e._v("For Rust"),r("OutboundLink")],1)])])]),e._v(" "),r("li",[r("p",[e._v("Fancy decoder that localizes errors:")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/sipa/bech32/tree/master/ecc/javascript",target:"_blank",rel:"noopener noreferrer"}},[e._v("For\nJavaScript"),r("OutboundLink")],1),e._v("\n("),r("a",{attrs:{href:"http://bitcoin.sipa.be/bech32/demo/demo.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo website"),r("OutboundLink")],1),e._v(")")])])])]),e._v(" "),r("h2",{attrs:{id:"registered-human-readable-prefixes-registered-human-readable-prefixes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#registered-human-readable-prefixes-registered-human-readable-prefixes"}},[e._v("#")]),e._v(" Registered Human-readable Prefixes {#registered_human_readable_prefixes}")]),e._v(" "),r("p",[e._v("SatoshiLabs maintains a full list of registered human-readable parts for\nother cryptocurrencies:")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/satoshilabs/slips/blob/master/slip-0173.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("SLIP-0173 : Registered human-readable parts for\nBIP-0173"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"appendices"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#appendices"}},[e._v("#")]),e._v(" Appendices")]),e._v(" "),r("h3",{attrs:{id:"test-vectors-test-vectors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#test-vectors-test-vectors"}},[e._v("#")]),e._v(" Test vectors {#test_vectors}")]),e._v(" "),r("p",[e._v("The following strings are valid Bech32:")]),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("A12UEL5L")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("a12uel5l")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("?1ezyfcl")]),e._v(" WARNING: During conversion to US-ASCII some encoders may\nset unmappable characters to a valid US-ASCII character, such as\n'?'. For example:")]),e._v(" "),r("blockquote",[r("blockquote",[r("blockquote",[r("p",[e._v("bech32_encode('\\x80'.encode('ascii', 'replace').decode('ascii'), [])\n'?1ezyfcl'")])])])])])]),e._v(" "),r("p",[e._v("The following string are not valid Bech32 (with reason for invalidity):")]),e._v(" "),r("ul",[r("li",[e._v("0x20 + "),r("code",[e._v("1nwldj5")]),e._v(": HRP character out of range")]),e._v(" "),r("li",[e._v("0x7F + "),r("code",[e._v("1axkwrx")]),e._v(": HRP character out of range")]),e._v(" "),r("li",[e._v("0x80 + "),r("code",[e._v("1eym55h")]),e._v(": HRP character out of range")]),e._v(" "),r("li",[r("code",[e._v("an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx")]),e._v(":\noverall max length exceeded")]),e._v(" "),r("li",[r("code",[e._v("pzry9x0s0muk")]),e._v(": No separator character")]),e._v(" "),r("li",[r("code",[e._v("1pzry9x0s0muk")]),e._v(": Empty HRP")]),e._v(" "),r("li",[r("code",[e._v("x1b4n0q5v")]),e._v(": Invalid data character")]),e._v(" "),r("li",[r("code",[e._v("li1dgmt3")]),e._v(": Too short checksum")]),e._v(" "),r("li",[r("code",[e._v("de1lg7wt")]),e._v(" + 0xFF: Invalid character in checksum")]),e._v(" "),r("li",[r("code",[e._v("A1G7SGD8")]),e._v(": checksum calculated with uppercase form of HRP")]),e._v(" "),r("li",[r("code",[e._v("10a06t8")]),e._v(": empty HRP")]),e._v(" "),r("li",[r("code",[e._v("1qzzfhee")]),e._v(": empty HRP")])]),e._v(" "),r("p",[e._v("The following list gives valid segwit addresses and the scriptPubKey\nthat they translate to in hex.")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4")]),e._v(":\n"),r("code",[e._v("0014751e76e8199196d454941c45d1b3a323f1433bd6")])]),e._v(" "),r("li",[r("code",[e._v("tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7")]),e._v(":\n"),r("code",[e._v("00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262")])]),e._v(" "),r("li",[r("code",[e._v("bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx")]),e._v(":\n"),r("code",[e._v("5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6")])]),e._v(" "),r("li",[r("code",[e._v("BC1SW50QA3JX3S")]),e._v(": "),r("code",[e._v("6002751e")])]),e._v(" "),r("li",[r("code",[e._v("bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj")]),e._v(":\n"),r("code",[e._v("5210751e76e8199196d454941c45d1b3a323")])]),e._v(" "),r("li",[r("code",[e._v("tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy")]),e._v(":\n"),r("code",[e._v("0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433")])])]),e._v(" "),r("p",[e._v("The following list gives invalid segwit addresses and the reason for\ntheir invalidity.")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty")]),e._v(": Invalid human-readable\npart")]),e._v(" "),r("li",[r("code",[e._v("bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5")]),e._v(": Invalid checksum")]),e._v(" "),r("li",[r("code",[e._v("BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2")]),e._v(": Invalid witness\nversion")]),e._v(" "),r("li",[r("code",[e._v("bc1rw5uspcuh")]),e._v(": Invalid program length")]),e._v(" "),r("li",[r("code",[e._v("bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90")]),e._v(":\nInvalid program length")]),e._v(" "),r("li",[r("code",[e._v("BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P")]),e._v(": Invalid program length for\nwitness version 0 (per BIP141)")]),e._v(" "),r("li",[r("code",[e._v("tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7")]),e._v(":\nMixed case")]),e._v(" "),r("li",[r("code",[e._v("bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du")]),e._v(": zero padding of more than 4\nbits")]),e._v(" "),r("li",[r("code",[e._v("tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv")]),e._v(":\nNon-zero padding in 8-to-5 conversion")]),e._v(" "),r("li",[r("code",[e._v("bc1gmk9yu")]),e._v(": Empty data section")])]),e._v(" "),r("h3",{attrs:{id:"checksum-design-checksum-design"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#checksum-design-checksum-design"}},[e._v("#")]),e._v(" Checksum design {#checksum_design}")]),e._v(" "),r("p",[r("strong",[e._v("Design choices")])]),e._v(" "),r("p",[e._v("BCH codes can be constructed over any prime-power alphabet and can be\nchosen to have a good trade-off between size and error-detection\ncapabilities. While most work around BCH codes uses a binary alphabet,\nthat is not a requirement. This makes them more appropriate for our use\ncase than "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cyclic_redundancy_check",target:"_blank",rel:"noopener noreferrer"}},[e._v("CRC\ncodes"),r("OutboundLink")],1),e._v(". Unlike\n"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reed-Solomon\ncodes"),r("OutboundLink")],1),e._v(",\nthey are not restricted in length to one less than the alphabet size.\nWhile they also support efficient error correction, the implementation\nof just error detection is very simple.")]),e._v(" "),r("p",[e._v("We pick 6 checksum characters as a trade-off between length of the\naddresses and the error-detection capabilities, as 6 characters is the\nlowest number sufficient for a random failure chance below 1 per\nbillion. For the length of data we're interested in protecting (up to\n71 bytes for a potential future 40-byte witness program), BCH codes can\nbe constructed that guarantee detecting up to 4 errors.")]),e._v(" "),r("p",[r("strong",[e._v("Selected properties")])]),e._v(" "),r("p",[e._v("Many of these codes perform badly when dealing with more errors than\nthey are designed to detect, but not all. For that reason, we consider\ncodes that are designed to detect only 3 errors as well as 4 errors, and\nanalyse how well they perform in practice.")]),e._v(" "),r("p",[e._v("The specific code chosen here is the result of:")]),e._v(" "),r("ul",[r("li",[e._v("Starting with an exhaustive list of 159605 BCH codes designed to\ndetect 3 or 4 errors up to length 93, 151, 165, 341, 1023, and 1057.")]),e._v(" "),r("li",[e._v("From those, requiring the detection of 4 errors up to length 71,\nresulting in 28825 remaining codes.")]),e._v(" "),r("li",[e._v("From those, choosing the codes with the best worst-case window for\n5-character errors, resulting in 310 remaining codes.")]),e._v(" "),r("li",[e._v("From those, picking the code with the lowest chance for not\ndetecting small numbers of "),r("em",[e._v("bit")]),e._v(" errors.")])]),e._v(" "),r("p",[e._v("As a naive search would require over 6.5 * 10^19^ checksum evaluations,\na collision-search approach was used for analysis. The code can be found\n"),r("a",{attrs:{href:"https://github.com/sipa/ezbase32/",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("p",[r("strong",[e._v("Properties")])]),e._v(" "),r("p",[e._v("The following table summarizes the chances for detection failure (as\nmultiples of 1 in 10^9^).")]),e._v(" "),r("p",[e._v("Window length   Number of wrong characters")]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("Length          Description\n8               Longest detecting 6 errors\n18              Longest detecting 5 errors\n19              Worst case for 6 errors\n39              Length for a P2WPKH address\n59              Length for a P2WSH address\n71              Length for a 40-byte program address\n89              Longest detecting 4 errors")]),e._v(" "),r("p",[e._v("This means that when 5 changed characters occur randomly distributed in\nthe 39 characters of a P2WPKH address, there is a chance of "),r("em",[e._v("0.756 per\nbillion")]),e._v(" that it will go undetected. When those 5 changes occur randomly\nwithin a 19-character window, that chance goes down to "),r("em",[e._v("0.093 per\nbillion")]),e._v(". As the number of errors goes up, the chance converges towards\n"),r("em",[e._v("1 in 2^30^")]),e._v(" = "),r("em",[e._v("0.931 per billion")]),e._v(".")]),e._v(" "),r("p",[e._v("Even though the chosen code performs reasonably well up to 1023\ncharacters, other designs are preferable for lengths above 89 characters\n(excluding the separator).")]),e._v(" "),r("h2",{attrs:{id:"acknowledgements"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[e._v("#")]),e._v(" Acknowledgements")]),e._v(" "),r("p",[e._v("This document is inspired by the "),r("a",{attrs:{href:"https://rusty.ozlabs.org/?p=578",target:"_blank",rel:"noopener noreferrer"}},[e._v("address\nproposal"),r("OutboundLink")],1),e._v(" by Rusty Russell, the\n"),r("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004402.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("base32"),r("OutboundLink")],1),e._v("\nproposal by Mark Friedenbach, and had input from Luke Dashjr, Johnson\nLau, Eric Lombrozo, Peter Todd, and various other reviewers.")]),e._v(" "),r("p",[e._v("[^1]: "),r("strong",[e._v("Why use base32 at all?")]),e._v(" The lack of mixed case makes it more\nefficient to read out loud or to put into QR codes. It does come\nwith a 15% length increase, but that does not matter when\ncopy-pasting addresses.")]),e._v(" "),r("p",[e._v("[^2]: "),r("strong",[e._v("Why call it Bech32?")]),e._v(' "Bech" contains the characters BCH (the\nerror detection algorithm used) and sounds a bit like "base".')]),e._v(" "),r("p",[e._v("[^3]: "),r("strong",[e._v("Why are the high bits of the human-readable part processed\nfirst?")]),e._v(" This results in the actually checksummed data being "),r("em",[e._v("[high\nhrp] 0 [low hrp] [data]")]),e._v(". This means that under the assumption\nthat errors to the human readable part only change the low 5 bits\n(like changing an alphabetical character into another), errors are\nrestricted to the "),r("em",[e._v("[low hrp] [data]")]),e._v(" part, which is at most 89\ncharacters, and thus all error detection properties (see appendix)\nremain applicable.")]),e._v(" "),r("p",[e._v("[^4]: "),r("strong",[e._v("Why not make an address format that is generic for all\nscriptPubKeys?")]),e._v(" That would lead to confusion about addresses for\nexisting scriptPubKey types. Furthermore, if addresses that do not\nhave a one-to-one mapping with scriptPubKeys (such as ECDH-based\naddresses) are ever introduced, having a fully generic old address\ntype available would permit reinterpreting the resulting\nscriptPubKeys using the old address format, with lost funds as a\nresult if bitcoins are sent to them.")]),e._v(" "),r("p",[e._v("[^5]: "),r("strong",[e._v("Why use 'bc' as human-readable part and not 'btc'?")]),e._v(" 'bc'\nis shorter.")])])}),[],!1,null,null,null);t.default=n.exports}}]);