(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{411:function(e,t,n){"use strict";n.r(t);var a=n(43),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_125"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_125"}},[e._v("#")]),e._v(" 125")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 125\n  Layer: Applications\n  Title: Opt-in Full Replace-by-Fee Signaling\n  Author: David A. Harding <dave@dtrt.org>\n          Peter Todd <pete@petertodd.org>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0125\n  Status: Proposed\n  Type: Standards Track\n  Created: 2015-12-04\n  License: PD\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("Many nodes today will not replace any transaction in their mempool with\nanother transaction that spends the same inputs, making it difficult for\nspenders to adjust their previously-sent transactions to deal with\nunexpected confirmation delays or to perform other useful replacements.")]),e._v(" "),n("p",[e._v("The opt-in full Replace-by-Fee (opt-in full-RBF) signaling policy\ndescribed here allows spenders to add a signal to a transaction\nindicating that they want to be able to replace that transaction in the\nfuture. In response to this signal,")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Nodes may allow transactions containing this signal to be replaced\nin their mempools.")])]),e._v(" "),n("li",[n("p",[e._v("The recipient or recipients of a transaction containing this signal\nmay choose not to treat it as payment until it has been confirmed,\neliminating the risk that the spender will use allowed replacements\nto defraud them.")])])]),e._v(" "),n("p",[e._v("Nodes and recipients may continue to treat transactions without the\nsignal the same way they treated them before, preserving the existing\nstatus quo.")]),e._v(" "),n("h2",{attrs:{id:"summary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),n("p",[e._v("This policy specifies two ways a transaction can signal that it is\nreplaceable.")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("Explicit signaling:")]),e._v(" A transaction is considered to have opted in\nto allowing replacement of itself if any of its inputs have an\nnSequence number less than (0xffffffff - 1).")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Inherited signaling:")]),e._v(" Transactions that don't explicitly signal\nreplaceability are replaceable under this policy for as long as any\none of their ancestors signals replaceability and remains\nunconfirmed.")])])]),e._v(" "),n("h3",{attrs:{id:"implementation-details-implementation-details"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#implementation-details-implementation-details"}},[e._v("#")]),e._v(" Implementation Details {#implementation_details}")]),e._v(" "),n("p",[e._v("The initial implementation expected in Bitcoin Core 0.12.0 uses the\nfollowing rules:")]),e._v(" "),n("p",[e._v("One or more transactions currently in the mempool (original\ntransactions) will be replaced by a new transaction (replacement\ntransaction) that spends one or more of the same inputs if,")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The original transactions signal replaceability explicitly or\nthrough inheritance as described in the above Summary section.")])]),e._v(" "),n("li",[n("p",[e._v("The replacement transaction may only include an unconfirmed input if\nthat input was included in one of the original transactions. (An\nunconfirmed input spends an output from a currently-unconfirmed\ntransaction.)")])]),e._v(" "),n("li",[n("p",[e._v("The replacement transaction pays an absolute fee of at least the sum\npaid by the original transactions.")])]),e._v(" "),n("li",[n("p",[e._v("The replacement transaction must also pay for its own bandwidth at\nor above the rate set by the node's minimum relay fee setting. For\nexample, if the minimum relay fee is 1 satoshi/byte and the\nreplacement transaction is 500 bytes total, then the replacement\nmust pay a fee at least 500 satoshis higher than the sum of the\noriginals.")])]),e._v(" "),n("li",[n("p",[e._v("The number of original transactions to be replaced and their\ndescendant transactions which will be evicted from the mempool must\nnot exceed a total of 100 transactions.")])])]),e._v(" "),n("p",[e._v("The initial implementation may be seen in "),n("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/pull/6871",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bitcoin Core\nPR#6871"),n("OutboundLink")],1),e._v(" and specifically\nthe master branch commits from 5891f870d68d90408aa5ce5b597fb574f2d2cbca\nto 16a2f93629f75d182871f288f0396afe6cdc8504 (inclusive).")]),e._v(" "),n("h3",{attrs:{id:"receiving-wallet-policy-receiving-wallet-policy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receiving-wallet-policy-receiving-wallet-policy"}},[e._v("#")]),e._v(" Receiving wallet policy {#receiving_wallet_policy}")]),e._v(" "),n("p",[e._v("Wallets that display unconfirmed transactions to users or that provide\ndata about unconfirmed transactions to automated systems should consider\ndoing one of the following:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Conveying additional suspicion about opt-in full-RBF transactions to\nthe user or data consumer.")])]),e._v(" "),n("li",[n("p",[e._v("Ignoring the opt-in transaction until it has been confirmed.")])])]),e._v(" "),n("p",[e._v("Because descendant transactions may also be replaceable under this\npolicy through inherited signaling, any method used to process opt-in\nfull-RBF transactions should be inherited by any descendant transactions\nfor as long as any ancestor opt-in full-RBF transactions remain\nunconfirmed.")]),e._v(" "),n("h3",{attrs:{id:"spending-wallet-policy-spending-wallet-policy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spending-wallet-policy-spending-wallet-policy"}},[e._v("#")]),e._v(" Spending wallet policy {#spending_wallet_policy}")]),e._v(" "),n("p",[e._v("Wallets that don't want to signal replaceability should use either a\nmax sequence number (0xffffffff) or a sequence number of (0xffffffff-1)\nwhen they also want to use locktime; all known wallets currently do\nthis. They should also take care not to spend any unconfirmed\ntransaction that signals replaceability explicitly or through inherited\nsignaling; most wallets also currently do this by not spending any\nunconfirmed transactions except for those they created themselves.")]),e._v(" "),n("p",[e._v("Wallets that do want to make replacements should use explicit signaling\nand meet the criteria described above in the Implementation Details\nsection. A "),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Transaction_replacement",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bitcoin Wiki\npage"),n("OutboundLink")],1),e._v(" has been\ncreated to help wallet authors track deployed mempool policies relating\nto transaction replacement.")]),e._v(" "),n("p",[e._v("The initial implementation makes use of P2P protocol reject messages for\nrejected replacements, allowing P2P clients to determine whether their\nreplacements were initially accepted by their peers. Standard P2P\nlightweight client practice of sending to some peers while listening for\nrelays from other peers should allow clients to determine whether the\nreplacement has propagated.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("Satoshi Nakamoto's original Bitcoin implementation provided the\nnSequence number field in each input to "),n("a",{attrs:{href:"https://github.com/trottier/original-bitcoin/blob/master/src/main.cpp#L434",target:"_blank",rel:"noopener noreferrer"}},[e._v("allow\nreplacement"),n("OutboundLink")],1),e._v("\nof transactions containing that input within the mempool. When receiving\nreplacements, nodes were supposed to replace transactions whose inputs\nhad lower sequence numbers with transactions that had higher sequence\nnumbers.")]),e._v(" "),n("p",[e._v("In that implementation, replacement transactions did not have to pay\nadditional fees, so there was no direct incentive for miners to include\nthe replacement and no built-in rate limiting that prevented overuse of\nrelay node bandwidth. Nakamoto "),n("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/commit/05454818dc7ed92f577a1a1ef6798049f17a52e7#diff-118fcbaaba162ba17933c7893247df3aR522",target:"_blank",rel:"noopener noreferrer"}},[e._v("removed\nreplacement"),n("OutboundLink")],1),e._v('\nfrom Bitcoin version 0.3.12, leaving only the comment, "Disable\nreplacement feature for now".')]),e._v(" "),n("p",[e._v("Replacing transactions with higher-fee transactions provided a way for\nspenders to align their desires with miners, but by the time a\nReplace-by-Fee (RBF) patch was available to re-enable replacement, some\nreceivers had begun to expect that the first version of a transaction\nthey saw was highly likely to be the version of the transaction to be\nconfirmed, and so some users advocated that replacement should be\ndisallowed.")]),e._v(" "),n("p",[e._v("To address those concerns, a variation on RBF was created that required\nthat the replacement transaction pay all of same outputs as the original\ntransaction in equal or greater amount. This was called RBF First Seen\nSafe (RBF-FSS), and the original RBF became known as full-RBF. Although\nagreeable to recipients who relied on the first-seen version of a\ntransaction, each use of RBF-FSS required adding an extra input to a\ntransaction, resulting in wallets being unable to use it if they had no\nspare inputs, a loss of privacy when inputs from different origins get\nused in the same transaction, and a wasteful increase in transaction\nbyte size.")]),e._v(" "),n("p",[e._v("Opt-in full-RBF uses Nakamoto's original semantics (with a slight tweak\nto allow locktime users to opt-out) to signal that replacement is\npossible, providing first-seen users with the ability to ignore those\ntransactions while also allowing for the efficiency benefits of\nfull-RBF.")]),e._v(" "),n("p",[e._v("There are no known problematic interactions between opt-in full-RBF and\nother uses of nSequence. Specifically, opt-in full-RBF is compatible\nwith consensus-enforced locktime as provided in the Bitcoin 0.1\nimplementation, draft BIP68 (Relative lock-time using consensus-enforced\nsequence numbers), and draft BIP112 (CHECKSEQUENCEVERIFY).")]),e._v(" "),n("h2",{attrs:{id:"deployment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),n("p",[e._v("Now, and since Bitcoin's first release, 100% of the network hash rate\nmines transactions using opt-in full-RBF semantics (sequence less than\n(0xffffffff - 1)).")]),e._v(" "),n("p",[e._v("Opt-in full-RBF as a default mempool replacement policy among nodes and\nminers is expected to become widespread as they upgrade to Bitcoin Core\n0.12.0 (release expected Jan/Feb 2016) and similar node software such as\nBitcoin LJR.")]),e._v(" "),n("p",[e._v("Actual replacement may be unreliable until two conditions have been\nsatisfied:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Enough nodes have upgraded to support it, providing a relay path for\nreplacements to go from spending wallets to miners controlling\nsignificant amounts of hash rate.")])]),e._v(" "),n("li",[n("p",[e._v("Enough hash rate has upgraded to support replacement, allowing for\nreasonable probability that a replacement can be mined.")])])]),e._v(" "),n("h2",{attrs:{id:"client-support-client-support"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client-support-client-support"}},[e._v("#")]),e._v(" Client support {#client_support}")]),e._v(" "),n("p",[e._v("No known wallet currently creates transactions by default with nSequence\nset below (0xffffffff - 1), so no known existing wallet explicitly\nsignals replaceability by default. No known popular wallet spends other\nusers' unconfirmed transactions by default, so no known existing\nwallets signals inherited replaceability.")]),e._v(" "),n("h2",{attrs:{id:"see-also-see-also"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#see-also-see-also"}},[e._v("#")]),e._v(" See also {#see_also}")]),e._v(" "),n("ol",[n("li",[n("p",[n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Transaction_replacement",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transaction Replaceability on Bitcoin\nWiki"),n("OutboundLink")],1),e._v(" targeted\nat helping wallet authors use RBF")])]),e._v(" "),n("li",[n("p",[e._v("Tools for creating opt-in full-RBF transactions:\n"),n("a",{attrs:{href:"https://github.com/petertodd/replace-by-fee-tools#replace-by-fee-tools",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/petertodd/replace-by-fee-tools#replace-by-fee-tools"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.reddit.com/r/Bitcoin/comments/3urm8o/optin_rbf_is_misunderstood_ask_questions_about_it/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reddit: Questions about opt-in\nRBF"),n("OutboundLink")],1),e._v("\ntargeted at helping community members understand opt-in full-RBF")])])]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This document is placed in the public domain.")])])}),[],!1,null,null,null);t.default=i.exports}}]);