(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{424:function(e,t,a){"use strict";a.r(t);var n=a(43),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_130"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_130"}},[e._v("#")]),e._v(" 130")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("  BIP: 130\n  Layer: Peer Services\n  Title: sendheaders message\n  Author: Suhas Daftuar <sdaftuar@chaincode.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0130\n  Status: Proposed\n  Type: Standards Track\n  Created: 2015-05-08\n  License: PD\n")])])]),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v('Add a new message, "sendheaders", which indicates that a node prefers\nto receive new block announcements via a "headers" message rather than\nan "inv".')]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v('Since the introduction of "headers-first" downloading of blocks in\n0.10, blocks will not be processed unless they are able to connect to a\n(valid) headers chain. Consequently, block relay generally works as\nfollows:')]),e._v(" "),a("ol",[a("li",[e._v('A node (N) announces the new tip with an "inv" message, containing\nthe block hash')]),e._v(" "),a("li",[e._v('A peer (P) responds to the "inv" with a "getheaders" message (to\nrequest headers up to the new tip) and a "getdata" message for the\nnew tip itself')]),e._v(" "),a("li",[e._v('N responds with a "headers" message (with the header for the new\nblock along with any preceding headers unknown to P) and a "block"\nmessage containing the new block')])]),e._v(" "),a("p",[e._v("However, in the case where a new block is being announced that builds on\nthe tip, it would be generally more efficient if the node N just\nannounced the block header for the new block, rather than just the block\nhash, and saved the peer from generating and transmitting the getheaders\nmessage (and the required block locator).")]),e._v(" "),a("p",[e._v('In the case of a reorg, where 1 or more blocks are disconnected, nodes\ncurrently just send an "inv" for the new tip. Peers currently are able\nto request the new tip immediately, but wait until the headers for the\nintermediate blocks are delivered before requesting those blocks. By\nannouncing headers from the last fork point leading up to the new tip in\nthe block announcement, peers are able to request all the intermediate\nblocks immediately.')]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("ol",[a("li",[e._v('The sendheaders message is defined as an empty message where\npchCommand == "sendheaders"')]),e._v(" "),a("li",[e._v('Upon receipt of a "sendheaders" message, the node will be\npermitted, but not required, to announce new blocks by sending the\nheader of the new block (along with any other blocks that a node\nbelieves a peer might need in order for the block to connect).')]),e._v(" "),a("li",[e._v("Feature discovery is enabled by checking protocol version >= 70012")])]),e._v(" "),a("h2",{attrs:{id:"additional-constraints-additional-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#additional-constraints-additional-constraints"}},[e._v("#")]),e._v(" Additional constraints {#additional_constraints}")]),e._v(" "),a("p",[e._v("As support for sendheaders is optional, software that implements this\nmay also optionally impose additional constraints, such as only honoring\nsendheaders messages shortly after a connection is established.")]),e._v(" "),a("h2",{attrs:{id:"backward-compatibility-backward-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backward-compatibility-backward-compatibility"}},[e._v("#")]),e._v(" Backward compatibility {#backward_compatibility}")]),e._v(" "),a("p",[e._v("Older clients remain fully compatible and interoperable after this\nchange.")]),e._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/pull/6494",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/pull/6494"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("This document is placed in the public domain.")])])}),[],!1,null,null,null);t.default=s.exports}}]);