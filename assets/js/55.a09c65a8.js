(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{430:function(e,t,i){"use strict";i.r(t);var n=i(43),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"_148"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_148"}},[e._v("#")]),e._v(" 148")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[e._v("  BIP: 148\n  Layer: Consensus (soft fork)\n  Title: Mandatory activation of segwit deployment\n  Author: Shaolin Fry <shaolinfry@protonmail.ch>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0148\n  Status: Final\n  Type: Standards Track\n  Created: 2017-03-12\n  License: BSD-3-Clause\n           CC0-1.0\n")])])]),i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),i("p",[e._v('This document specifies a BIP16 like soft fork flag day activation of\nthe segregated witness BIP9 deployment known as "segwit".')]),e._v(" "),i("h2",{attrs:{id:"definitions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),i("p",[e._v('"existing segwit deployment" refer to the BIP9 "segwit" deployment\nusing bit 1, between November 15th 2016 and November 15th 2017 to\nactivate BIP141, BIP143 and BIP147.')]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("p",[e._v("Segwit increases the blocksize, fixes transaction malleability, and\nmakes scripting easier to upgrade as well as bringing many other\n"),i("a",{attrs:{href:"https://bitcoincore.org/en/2016/01/26/segwit-benefits/",target:"_blank",rel:"noopener noreferrer"}},[e._v("benefits"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("p",[e._v("It is hoped that miners will respond to this BIP by activating segwit\nearly, before this BIP takes effect. Otherwise this BIP will cause the\nmandatory activation of the existing segwit deployment before the end of\nmidnight November 15th 2017.")]),e._v(" "),i("h2",{attrs:{id:"specification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),i("p",[e._v("All times are specified according to median past time.")]),e._v(" "),i("p",[e._v("This BIP will be active between midnight August 1st 2017 (epoch time\n1501545600) and midnight November 15th 2017 (epoch time 1510704000) if\nthe existing segwit deployment is not locked-in or activated before\nepoch time 1501545600. This BIP will cease to be active when segwit is\nlocked-in.")]),e._v(" "),i("p",[e._v("While this BIP is active, all blocks must set the nVersion header top 3\nbits to 001 together with bit field (1<<1) (according to the existing\nsegwit deployment). Blocks that do not signal as required will be\nrejected.")]),e._v(" "),i("h3",{attrs:{id:"reference-implementation-reference-implementation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation-reference-implementation"}},[e._v("#")]),e._v(" Reference implementation {#reference_implementation}")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[e._v('// Check if Segregated Witness is Locked In\nbool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n{\n    LOCK(cs_main);\n    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_LOCKED_IN);\n}\n\n// BIP148 mandatory segwit signalling.\nint64_t nMedianTimePast = pindex->GetMedianTimePast();\nif ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n     (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n     (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&  // Segwit is not locked in\n      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )   // and is not active.\n{\n    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS;\n    bool fSegbit = (pindex->nVersion & VersionBitsMask(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) != 0;\n    if (!(fVersionBits && fSegbit)) {\n        return state.DoS(0, error("ConnectBlock(): relayed block must signal for segwit, please upgrade"), REJECT_INVALID, "bad-no-segwit");\n    }\n}\n')])])]),i("p",[i("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/compare/master",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/compare/master"),i("OutboundLink")],1),e._v("...shaolinfry:bip-segwit-flagday")]),e._v(" "),i("h2",{attrs:{id:"backwards-compatibility-backwards-compatibility"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility-backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility {#backwards_compatibility}")]),e._v(" "),i("p",[e._v('This deployment is compatible with the existing "segwit" bit 1\ndeployment scheduled between midnight November 15th, 2016 and midnight\nNovember 15th, 2017.')]),e._v(" "),i("h2",{attrs:{id:"rationale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),i("p",[e._v("Historically, the P2SH soft fork (BIP16) was activated using a\npredetermined flag day where nodes began enforcing the new rules. P2SH\nwas successfully activated with relatively few issues")]),e._v(" "),i("p",[e._v('By orphaning non-signalling blocks during the last month of the BIP9 bit\n1 "segwit" deployment, this BIP can cause the existing "segwit"\ndeployment to activate without needing to release a new deployment.')]),e._v(" "),i("h2",{attrs:{id:"references"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mailing list\ndiscussion"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283",target:"_blank",rel:"noopener noreferrer"}},[e._v("P2SH flag day\nactivation"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0009.mediawiki",title:"wikilink"}},[e._v("BIP9 Version bits with timeout and\ndelay")])]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0016.mediawiki",title:"wikilink"}},[e._v("BIP16 Pay to Script Hash")])]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0141.mediawiki",title:"wikilink"}},[e._v("BIP141 Segregated Witness (Consensus\nlayer)")])]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0143.mediawiki",title:"wikilink"}},[e._v("BIP143 Transaction Signature Verification for Version 0 Witness\nProgram")])]),e._v(" "),i("li",[i("a",{attrs:{href:"bip-0147.mediawiki",title:"wikilink"}},[e._v("BIP147 Dealing with dummy stack element\nmalleability")])]),e._v(" "),i("li",[i("a",{attrs:{href:"https://bitcoincore.org/en/2016/01/26/segwit-benefits/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Segwit\nbenefits"),i("OutboundLink")],1)])]),e._v(" "),i("h2",{attrs:{id:"copyright"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),i("p",[e._v("This document is dual licensed as BSD 3-clause, and Creative Commons CC0\n1.0 Universal.")])])}),[],!1,null,null,null);t.default=a.exports}}]);