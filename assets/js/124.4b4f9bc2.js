(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{498:function(e,t,n){"use strict";n.r(t);var o=n(43),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_99"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_99"}},[e._v("#")]),e._v(" 99")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  BIP: 99\n  Title: Motivation and deployment of consensus rule changes ([soft/hard]forks)\n  Author: Jorge Timón <jtimon@jtimon.cc>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0099\n  Status: Rejected\n  Type: Informational\n  Created: 2015-06-20\n  License: PD\n  Post-History: http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\n")])])]),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),n("p",[e._v("This BIP attempts to create a taxonomy of the different types of\nconsensus forks and proposes a deployment mechanism for each of them.")]),e._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),n("p",[e._v("The security assumptions of p2p consensus-based systems like Bitcoin are\nnot always well-understood, and the best upgrade mechanisms to the\nconsensus validation rules may vary depending on the type of change\nbeing deployed. Discussing such changes without a uniform view on the\ndeployment paths often leads to misunderstandings and unnecessarily\ndelays the deployment of changes.")]),e._v(" "),n("h2",{attrs:{id:"definitions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),n("p",[e._v("Software fork\n:   A copy of an existing project. In free software, this can be done\nwithout the permission of the original project's maintainers.")]),e._v(" "),n("p",[e._v("Consensus fork\n:   A divergence in the implementation of the verification consensus\nrules can impede the expected eventual convergence of the network in\na single chain that has the most proof of work and also satisfies\nthe rules. This can be intentional or be caused by a bug in\nconsensus validation reimplementations.")]),e._v(" "),n("p",[e._v("Softfork\n:   A consensus fork wherein everything that was previously invalid\nremains invalid while blocks that would have previously considered\nvalid become invalid. A hashrate majority of miners can impose the\nnew rules. They have some deployment advantages like backward\ncompatibility.")]),e._v(" "),n("p",[e._v("Hardfork\n:   A consensus fork that makes previously invalid blocks valid.\nHardforks require all users to upgrade.")]),e._v(" "),n("p",[e._v("Libconsensus\n:   a theoretical piece of software that contains the specifications\nthat define the validity of a block for a given state and chain\nparameters (ie it may act differently on, for example, regtest).")]),e._v(" "),n("p",[e._v("Libbitcoinconsensus\n:   the existing implementation is a library that is compiled by default\nwith Bitcoin Core master and exposes a single C function named\nbitcoinconsensus_verify_script(). Although it has a deterministic\nbuild and implements the most complex rules (most of the\ncryptography, which is itself heavily based on libsecp256k1 after\n#REPLACE_libsecp256k1_PR), it is still not a complete specification\nof the consensus rules. Since libconsensus doesn't manage the\ncurrent state but only the validation of the next block given that\nstate, it is known that this long effort of encapsulation and\ndecoupling will eventually finish, and that the person who moves the\nlast line")]),e._v(" "),n("h2",{attrs:{id:"taxonomy-of-consensus-forks-taxonomy-of-consensus-forks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#taxonomy-of-consensus-forks-taxonomy-of-consensus-forks"}},[e._v("#")]),e._v(" Taxonomy of consensus forks {#taxonomy_of_consensus_forks}")]),e._v(" "),n("h3",{attrs:{id:"accidental-consensus-fork-accidental-consensus-fork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#accidental-consensus-fork-accidental-consensus-fork"}},[e._v("#")]),e._v(" Accidental consensus fork {#accidental_consensus_fork}")]),e._v(" "),n("p",[e._v("Software forks are very different in nature from consensus rules forks.\nNo software maintainer has special powers over consensus rules changes.\nThere's many good reasons (experimentation, lack of features,\nindependent development, diversity, etc) to fork the Bitcoin Core\nsoftware and it's good that there's many alternative implementations\nof the protocol (forks of Bitcoin Core or written from scratch).")]),e._v(" "),n("p",[e._v("But sometimes a bug in the reimplementaion of the consensus validation\nrules can prevent users of alternative implementation from following the\nlongest (most work) valid chain. This can result in those users losing\ncoins or being defrauded, making reimplementations of the consensus\nvalidation rules very risky. Note that a natural language specification\nof those rules doesn't help since the consensus is not determined by\nsuch specification but by the software that the majority of the network\nruns. That's why \"the implementation is the specification\".")]),e._v(" "),n("p",[e._v("But Bitcoin Core contains many more things than just consensus\nvalidation and it would be unreasonable for all alternative\nimplementations to depend on it. Bitcoin Core should not be the\nspecification. That's why the consensus validation is being separated\ninto a libbitcoinconsensus library with a C API easily accessible from\nany language. This makes alternative implementations much more secure\nwithout burdening them with specific design choices made by Bitcoin\nCore. It is to be noted that sharing the same code for consensus\nvalidation doesn't prevent alternative implementations from\nindependently changing their consensus rules: they can always fork the\nlibbitcoinconsensus project (once it is in a separate repository).")]),e._v(" "),n("p",[e._v("Hopefully libbitcoinconsensus will remove this type of consensus fork\nwhich - being accidental - obviously doesn't need a deployment plan.")]),e._v(" "),n("h4",{attrs:{id:"_11-12-march-2013-chain-fork-march-2013-chain-fork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-12-march-2013-chain-fork-march-2013-chain-fork"}},[e._v("#")]),e._v(" 11/12 March 2013 Chain Fork {#march_2013_chain_fork}")]),e._v(" "),n("p",[e._v("There is a precedent of an accidental consensus fork at height 225430.\nWithout entering into much detail (see [2]), the situation was\ndifferent from what's being described from the alternative\nimplementation risks (today alternative implementation still usually\nrely in different degrees on Bitcoin Core trusted proxies, which is very\nreasonable considering the lack of a complete libconsensus). The two\nconflicting consensus validation implementations were two different\nversions of Bitcoin Core (Bitcoin-qt at the time): 0.8 against all\nversions prior to it. Most miners had been fast on upgrading to 0.8 and\nthey were also fast on downgrading to 0.7 as an emergency when they were\nasked to by the developers community.")]),e._v(" "),n("p",[e._v("A short summary would be that BDB was being abandoned in favor of\nlevelDB, and - at the same time - the miner's policy block size limit\nwas being lift (it was not a consensus rule, not even enforced via\nsoftfork). Even after testing, a case where levelDB couldn't correctly\nvalidate certain bigger blocks only appeared after deployment in\nproduction. Fortunately this was handled very well and rapidly by the\nwhole worldwide community and nobody is unhappy about the solution.")]),e._v(" "),n("p",[e._v('But there\'s some philosophical disagreements on the terms of what the\nsolution was: we can add a pedantic note on that. If "the\nimplementation is the specification", then those levelDB-specific\nlimitations were part of the consensus rules. Then additional rules were\nnecessary and any alternative implementation (including 0.8) would have\nto implement it. Then a planned consensus fork to migrate all Bitcoin-qt\n0.7- users could remove those additional consensus restrictions. Had\nlibconsensus being implemented without depending on levelDB, those\nadditional restrictions wouldn\'t have been part of "the\nspecification"')]),e._v(" "),n("p",[n("code",[e._v("and this would just have been a bug in the")])]),e._v(" "),n("p",[e._v('consensus rules, just a consensus-critical bug in a set of\nimplementations, concretely all satoshi-bitcoin-0.7-or-less (which\nhappened to be a huge super majority of the users), but other\nimplementations (like libbitcoin) would be free from such bug and\nimplementing the correct libconsensus specification. But since the buggy\nimplementation was a super-majority, the solution would have been to\ninstantly (from a specific block) change the rules to not let the\nsuper-majority deviate from the specification and then have another\nconsensus fork to remove them. Two theoretical consensus forks instead\nof one but the first one deployed practically for free. The practical\nresult would have been identical and only the definitions change. This\nmeans discussing something that went uncontroversially well further is\n"philosophical bike-shed" (TM).')]),e._v(" "),n("h3",{attrs:{id:"unilateral-softforks-unilateral-softforks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unilateral-softforks-unilateral-softforks"}},[e._v("#")]),e._v(" Unilateral softforks {#unilateral_softforks}")]),e._v(" "),n("p",[e._v("If it is in their best interest of miners to softfork it should be\nassumed that they may likely enforce it. In some cases, even against the\nwill of a super-majority of users. This is practically an attack on the\nnetwork and the only solution is to carefully design the incentives so\nthat the case is simply impossible. If that fails, miners should still\nconsider the risk of motivating a schism hardfork before attempting such\na consensus fork. A deployment plan for this case is also unnecessary.")]),e._v(" "),n("h3",{attrs:{id:"schism-hardforks-schism-hardforks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schism-hardforks-schism-hardforks"}},[e._v("#")]),e._v(" Schism hardforks {#schism_hardforks}")]),e._v(" "),n("p",[e._v("Fundamental disagreements and controversies are part of social systems,\nlike the one defined as the human participants in the Bitcoin network.\nWithout judging the motivation of the rule discrepancies or what rules\nwere in place first, we're defining schism[1] hardforks as those in\nwhich - for whatever reason - users are consiously going to validate 2\ndifferent sets of consensus rules. Since they will validate different\nrulesets, they will end up following 2 different chains for at least\nsome time, maybe forever.")]),e._v(" "),n("p",[e._v("One possible result observed in the\npast[non_proportional_inflatacoin_fork] is that one of the chains\nrapidly disappears, but nothing indicates that this must always be the\ncase.")]),e._v(" "),n("p",[e._v("While 2 chains cohexist, they can be considered two different\ncurrencies. We could say that bitcoin becomes bitcoinA and bitcoinB. The\nimplications for market capitalization are completely unpredictable,")]),e._v(" "),n("p",[e._v("maybe mc(bitcoinA) = mc(bitcoinB) = mc(old_bitcoin),")]),e._v(" "),n("p",[e._v("maybe mc(bitcoinA) + mc(bitcoinB) = mc(old_bitcoin),")]),e._v(" "),n("p",[e._v("maybe mc(bitcoinA) + mc(bitcoinB) = 1000 * mc(old_bitcoin),")]),e._v(" "),n("p",[e._v("maybe mc(bitcoinA) + mc(bitcoinB) = 0,")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("p",[e._v('Schism hardforks have been compared to one type of altcoins called\n"spinoffs"[spinoffs] that distribute all or part of its initial\nseigniorage to bitcoin owners at a given block height.')]),e._v(" "),n("p",[e._v("This is very disruptive and hopefully will never be needed. But if it's\nneeded the best deployment path is just to activate the rule changes\nafter certain block height in the future. On the other hand, it is\nhealthy decentralization-wise that many independent software projects\nare ready to deploy a schism hardfork.")]),e._v(" "),n("p",[e._v("In all of the following examples there's clearly a confrontation that\nis being resolved using an intentional consensus hardfork.")]),e._v(" "),n("h4",{attrs:{id:"asic-reset-hardfork-asic-reset-hardfork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#asic-reset-hardfork-asic-reset-hardfork"}},[e._v("#")]),e._v(" ASIC-reset hardfork {#asic_reset_hardfork}")]),e._v(" "),n("p",[e._v('Imagine ASIC production has been consolidated to a single company and\ndistribution is simply not happening: the company is keeping them to\nmine itself. For that or another reason, a single entity controls 40%+\nof the hashrate and there\'s no hope for an spontaneous improvement in\ndecentralization. Such an untenable centralization could be fixed (with\ngreat risks) by switching the hash function used in the proof of work,\neffectively "pressing the restart button" on the ASIC market. The next\nfunction should be simple to implement in ASIC as well so that the\nmarket can more easily develop as a healthy and competitive one (as\nopposed to what the "ASIC-hard" proponents would want), but that\'s\nanother story...]')]),e._v(" "),n("p",[e._v('Since in this case the confrontation is clearly against the current\nminers any notion of "miners\' voting" is utterly irrelevant.')]),e._v(" "),n("h4",{attrs:{id:"anti-block-creator-hardfork-anti-block-creator-hardfork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#anti-block-creator-hardfork-anti-block-creator-hardfork"}},[e._v("#")]),e._v(" Anti-Block-creator hardfork {#anti_block_creator_hardfork}")]),e._v(" "),n("p",[e._v("There's less extreme cases where changing the pow function would not be\nnecessary. For example, let's imagine a bright future where\ncommoditized ASICs are running in millions home-heaters all over the\nworld, but the block size has been completely removed and the network\nhas devolved to a very centralized system where only 2 big pools have\nthe resources to fully validate full blocks and create block templates\nwith competitive levels of transaction fees. In that case, changing the\npow function would be a terrible waste and a risk that could be avoided.\nA hardfork restoring a block size limit could help fixing this\nsituation. Please don't take it as an argument for or against raising\nthe block size limit: it's just an example. But in this case, again,\nthose 2 big pools would probably be against the fork and, again, their\nvoting is irrelevant.")]),e._v(" "),n("p",[e._v("Like in the previous example, miners are expected to oppose and they\nhave to be ignored.")]),e._v(" "),n("h4",{attrs:{id:"anti-cabal-hardfork-anti-cabal-hardfork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#anti-cabal-hardfork-anti-cabal-hardfork"}},[e._v("#")]),e._v(" Anti-cabal hardfork {#anti_cabal_hardfork}")]),e._v(" "),n("p",[e._v("Let's imagine BIP66 had a crypto backdoor that nobody noticed and\nallows an evil developer cabal to steal everyone's coins. The users and\nnon-evil developers could join, fork libconsensus and use the forked\nversion in their respective bitcoin implementations. Should miner's\n\"vote\" be required to express their consent? What if some miners are\npart of the cabal? In the unlikely event that most miners are part of\nsuch an evil cabal, changing the pow function may be required. In other\ncases, mining \"vote\" doesn't have much value either since this kind\nof hardfork would not qualify as uncontroversial anyway.")]),e._v(" "),n("h3",{attrs:{id:"uncontroversial-consensus-upgrades-uncontroversial-consensus-upgrades"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uncontroversial-consensus-upgrades-uncontroversial-consensus-upgrades"}},[e._v("#")]),e._v(" Uncontroversial consensus upgrades {#uncontroversial_consensus_upgrades}")]),e._v(" "),n("p",[e._v("\"Uncontroversial\" is something tough to define in this context. What\nif a single user decides he won't upgrade no matter what and he\ndoesn't even attempt to explain his decision? Obviously, such a user\nshould be just ignored. But what if the circumstances are slightly\ndifferent? What if they're 2, 10 users? where's the line. It is\npossible that we can never have a better definition than \"I know it\nwhen I see it\" [citation needed].")]),e._v(" "),n("h4",{attrs:{id:"uncontroversial-softforks-uncontroversial-softforks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uncontroversial-softforks-uncontroversial-softforks"}},[e._v("#")]),e._v(" Uncontroversial softforks {#uncontroversial_softforks}")]),e._v(" "),n("p",[e._v("If a majority of miners adopts a softfork, users will follow that chain,\neven without understanding the new rules. For them is like if blocks are\ncreated in a certain way or certain valid transactions are being\nrejected by miners for some reason. For old nodes it just looks like the\nnew rules are policy rules rather than consensus rules. This greatly\nreduces the deployment risks, making softforks the preferred consensus\nrules upgrade mechanism.")]),e._v(" "),n("p",[e._v('The first precedent of a softfork was the introduction of P2SH\ndocumented in BIP16. There were competing proposals, but BIP12 had clear\ndisadvantage and BIP17 was considered a less tested but functionally\nequivalent version by most of the reviewers. Although it was later\ndiscovered that BIP16 had unnecessary limitations and BIP17 is now\nconsidered superior, this probably still qualified for our vague concept\nof "uncontroversial".')]),e._v(" "),n("p",[e._v("At the time, there was no \"mining voting\" implementation and it was\nsimply deployed using the timestamp of the blocks at some time in the\nfuture as the activation trigger. This can't guarantee the assumption\nthat most miners have upgraded before enforcing the new rules and\nthat's why the voting mechanism and first used for BIP30 and BIP66. The\ncurrent voting threshold for softfork enforcement is 95%. There's also\na 75% threshold for miners to activate it as a policy rule, but it\nshould be safe for miners to activate such a policy from the start or\nlater than 75%, as long as they enforce it as consensus rule after 95%.")]),e._v(" "),n("p",[e._v("The current miners' voting mechanism can be modified to allow for\nchanges to be deployed in parallel, the rejection of a concrete softfork\nwithout getting locked for the deployment of the next one, and also a\nmore efficient use of the version field in block headers [3]. BIP65 is\nexpected to be deployed with the improved mechanism.")]),e._v(" "),n("h4",{attrs:{id:"uncontroversial-hardforks-uncontroversial-hardforks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uncontroversial-hardforks-uncontroversial-hardforks"}},[e._v("#")]),e._v(" Uncontroversial hardforks {#uncontroversial_hardforks}")]),e._v(" "),n("p",[e._v("Some consensus changes require all participants to upgrade their\nsoftware before the new rules can be safely activated or they will face\nserious risk of following the wrong chain and being defrauded. Even if\nthe exact same mechanism used for softforks would be more risky in these\ncases, that doesn't mean that this type of changes cannot be deployed\nin an uncontroversial and safe manner.")]),e._v(" "),n("p",[e._v("The simplest approach is to select a block height far enough in the\nfuture that everybody has plenty of time to change their software. But\nif you're aiming for universal adoption, that includes miners'\nadoption, so it seems reasonable to use a mining voting on top of that.\nIn this case there's only one relevant threshold and it could be\ndifferent from the softfork one. Probably 100% is too strict, since it\nwould allow a relatively small miner to attack the network and block a\nconsensus upgrade. Something between 99% and 95% is probably a sensible\nchoice for this parameter.")]),e._v(" "),n("h4",{attrs:{id:"uncontroversial-emergency-hardforks-uncontroversial-emergency-hardforks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uncontroversial-emergency-hardforks-uncontroversial-emergency-hardforks"}},[e._v("#")]),e._v(" Uncontroversial emergency hardforks {#uncontroversial_emergency_hardforks}")]),e._v(" "),n("p",[e._v("Emergency forks may not have time to consult miners and have to be\ndeployed simply by choosing a block height not so far in the future.")]),e._v(" "),n("p",[e._v("But emergency forks could be prepared ahead of time. For example, an\nintermediary version of software could allow blocks that are double the\nsize of old blocks (after a certain height in the future) while still\nmaking miners reject bigger blocks as a softfork rule. Then miners can\nstart the regular process for uncontroversial softfork (or a unilateral\nsoftfork if they're a majority) at any point in the future if it is\nrequired, and both intermediary and new versions would be prepared for\nit (which would make deployment much easier). Other related consensus\nchanges could be deployed in the meantime (say, quadrupling the block\nsize) making the emergency softfork unnecessary.")]),e._v(" "),n("h2",{attrs:{id:"code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[e._v("#")]),e._v(" Code")]),e._v(" "),n("p",[e._v("This BIP is complemented with a concrete code proposal[4] for an\nuncontroversial hardfork which acts as a precedent and removes the\nperception that hardforks are impossible in Bitcoin. The deployment of\nthe proposal should not block any other potential hardforks (thus it\nwill required the version bits proposal[3] to be implemented). The\nchange itself doesn't add much complexity to Bitcoin Core and is simple\nenough that is trivial to apply to diverse implementations (that\ncurrently can only use libbitcoinconsensus to validate script-related\nrules). The change has been already widely tested in many altcoins.")]),e._v(" "),n("p",[e._v("The chosen consensus change is the fix of the timewarp attack discovered\nand also fixed with a simple patch[5] by @ArtForz. This change has\nbeen deployed by most altcoins that made any minimally meaningful change\nto bitcoin and thus can be considered somewhat tested (in fact, most\nSHA256d altcoins that didn't implement it have died or being forced to\nimplement it as an emergency hardfork). When deploying this change has\nbeen discussed, usually arguments in the lines of \"if we get to the\npoint when this matters to bitcoin, we would be already in serious\ntrouble\" were used against it. This shouldn't be seen as a\ndisadvantage in this context, since it means we can safely activate the\nfix very far away in the future (say, 4 years worth of blocks).")]),e._v(" "),n("h2",{attrs:{id:"footnotes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#footnotes"}},[e._v("#")]),e._v(" Footnotes")]),e._v(" "),n("p",[e._v("[1] "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Schism",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://en.wikipedia.org/wiki/Schism"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[2] "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0050.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bips/blob/master/bip-0050.mediawiki"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[non_proportional_inflatacoin_fork] TODO missing link")]),e._v(" "),n("p",[e._v("[spinoffs] "),n("a",{attrs:{href:"https://bitcointalk.org/index.php?topic=563972.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://bitcointalk.org/index.php?topic=563972.0"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[3] "),n("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("[4]\n"),n("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/compare/0.11",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/bitcoin/bitcoin/compare/0.11"),n("OutboundLink")],1),e._v("...jtimon:hardfork-timewarp-0.11")]),e._v(" "),n("p",[e._v("[5] Original references:\n"),n("a",{attrs:{href:"https://bitcointalk.org/index.php?topic=114751.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://bitcointalk.org/index.php?topic=114751.0"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772"),n("OutboundLink")],1),e._v("\nRebased patch:\n"),n("a",{attrs:{href:"https://github.com/freicoin/freicoin/commit/beb2fa54745180d755949470466cbffd1cd6ff14",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/freicoin/freicoin/commit/beb2fa54745180d755949470466cbffd1cd6ff14"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"attribution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attribution"}},[e._v("#")]),e._v(" Attribution")]),e._v(" "),n("p",[e._v("Incorporated corrections and suggestions from: Andy Chase, Bryan Bishop,\nBtcdrak, Gavin Andresen, Gregory Sanders, Luke Dashjr, Marco Falke.")]),e._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),n("p",[e._v("This document is placed in the public domain.")])])}),[],!1,null,null,null);t.default=a.exports}}]);